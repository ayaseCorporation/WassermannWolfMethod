(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["AplanaticSinglet`SingletParaxialConstraints`"]


(* ::Input::Initialization:: *)
SingletParaxialConstraintsVersion="ParaxialConstraints ver.0.1.A20210323 copyright by Takatoshi Yamada @Ayase corp.";


(* ::Input::Initialization:: *)
SingletParaxialConstraintsDescription="SingletParaxialConstraints package for checking consisntency of paraxial parameter list of singlet lens and fixing omitted paramters from the list.";


(* ::Input::Initialization:: *)
SingletParaxialConsistencyUsage="This package is not checked for all conditions.";


(* ::Input::Initialization:: *)
singletParaxialParameterSymbols::usage="singletParaxialParameterSymbols is a tag for a list of paraxial parameter symbols.";


(* ::Input::Initialization:: *)
focalLength::usage="focalLength is one of paraxial parameters. This value should be positive (i.e., real image) in this package.";
lensMediumRefractiveIndex::usage="lensMediumRefractiveIndex is one of paraxial parameters.";
lensMediumThickness::usage="lensMediumThickness is one of paraxial parameters.";
coddingtonShapeFactor::usage="coddingtonShapeFactor is one of paraxial parameters.";
paraxialWorkingDistance::usage="paraxialWorkingDistance is one of paraxial parameters.";
paraxialObjectDistance::usage="paraxialObjectDistance is one of paraxial parameters.";
paraxialObjectImageDistance::usage="paraxialObjectImageDistance is one of paraxial parameters.";
lateralMagnification::usage="lateralMagnification is one of paraxial parameters and specifying lateral magnification and should be LESS THAN ONE, i.e., reducing image. If not specified, lateralMagnification = 0. If both lateralMagnification and imageObjectDistance are specified, focalLength is ignored by the solver.";


(* ::Input::Initialization:: *)
frontSurfaceCurvature::usage="frontSurfaceCurvature is a result tag of biasphericAplanatSolver. The rhs value is curvature value of the front surface (surface 1).";
backSurfaceCurvature::usage="backSurfaceCurvature is a result tag of biasphericAplanatSolver. The rhs value is curvature value of the back surface (surface 2).";conjugateInfiniteness::usage="conjugateInfiniteness is one of paraxial parameters for output and if True, condition set is infinite.";
paraxialDistanceBetweenObjectAndPrincipal::usage="paraxialDistanceBetweenObjectAndPrincipal is one of paraxial parameters specifying distance between object plane and principal plane in object space. If conjugateInfiniteness is True, a rule expression including this is not included.";
paraxialDistanceBetweenPrincipalAndImage::usage="paraxialDistanceBetweenPrincipalAndImage is one of paraxial parameters specifying distance between principal plane and image plane in image space. If conjugateInfiniteness is True, paraxialDistanceBetweenPrincipalAndImage is equal to paraxialWorkingDistance.";


(* ::Input::Initialization:: *)
fillParaxialParameters::usage="fillParaxialParameters[parameterSet:{__Rule}] checks consistency of parameter set and returns a list of key-value rule pairs of omitted parameters.";


(* ::Input::Initialization:: *)
paraxialThickessDifferenceFromMechanical::usage="paraxialDistanceFromMechanical[ncg_,dcg_] converts mechanical thickness to paraxial with cover glass thickness dcg and refractive index ncg.";
paraxialDistanceFromMechanical::usage="paraxialDistanceFromMechanical[ncg_,dcg_][m_] converts mechanical distance m to paraxial with cover glass thickness dcg and refractive index ncg.";


(* ::Input::Initialization:: *)
paraxialThickessDifferenceToMechanical::usage="paraxialDistanceToMechanical[ncg_,dcg_] converts paraxial thickness to mechanical with cover glass thickness dcg and refractive index ncg.";
paraxialDistanceToMechanical::usage="paraxialDistanceFromMechanical[ncg_,dcg_][m_] converts paraxial distance m to mechanical with cover glass thickness dcg and refractive index ncg.";


(* ::Input::Initialization:: *)
Begin["`Private`"];


(* ::Input::Initialization:: *)
paraxialThickessDifferenceFromMechanical[ncg_,dcg_]=dcg(1.0/ncg-1.0);
paraxialDistanceFromMechanical[ncg_,dcg_]=Function[{m},m-(ncg-1.0)/ncg*dcg];
paraxialThicknessDifferenceToMechanical[ncg_,dcg_]=ncg*dcg/(ncg-1.0);
paraxialDistanceToMechanical[ncg_,dcg_]=Function[{mp},mp+(ncg-1.0)/ncg*dcg];


(* ::Input::Initialization:: *)
singletParaxialParameterSymbols={lensMediumRefractiveIndex,lensMediumThickness,focalLength,coddingtonShapeFactor,paraxialWorkingDistance,paraxialObjectDistance,lateralMagnification,paraxialObjectImageDistance,frontSurfaceCurvature,backSurfaceCurvature,conjugateInfiniteness};


(* ::Input::Initialization:: *)
pN=1;pD=2;pF=3;pC=4;pW=5;pM=6;pB=7;pT=8;


(* ::Input::Initialization:: *)
additionalTermsOfPricipals[rul:{__Rule}]:=(additionalTermsOfPricipals[lensMediumThickness,lensMediumRefractiveIndex,frontSurfaceCurvature,backSurfaceCurvature,paraxialWorkingDistance,paraxialObjectDistance]/.rul)
additionalTermsOfPricipals[d_,n_,k1_,k2_,mid_,mod_]:={paraxialDistanceBetweenObjectAndPrincipal->mod-objectPrincipalPlanePosition[k1,k2,n,d],paraxialDistanceBetweenPrincipalAndImage->mid-imagePrincipalPlanePosition[k1,k2,n,d]}


(* ::Input::Initialization:: *)
objectPrincipalPlanePosition[c1_,c2_,n_,d_]:=c2*d/(c1(c2*d(n-1)+n)-n*c2)
imagePrincipalPlanePosition[c1_,c2_,n_,d_]:=-c1*d/(c1(c2*d(n-1)+n)-n*c2)


(* ::Input::Initialization:: *)
fillParaxialParameters[parameterSet:{__Rule}]:=Module[{res,adt},
res=Catch[fillParaxialParametersInner[N[singletParaxialParameterSymbols/.parameterSet]]];
If[conjugateInfiniteness/.res,res,Flatten[{res,additionalTermsOfPricipals[res]}]]
]


(* ::Input::Initialization:: *)
makePattern[seq:_Integer...]:=ReplacePart[singletParaxialParameterSymbols,Map[#->Blank[Real]&,{seq}]]


(* ::Input::Initialization:: *)
patternDFWI=makePattern[pN,pD,pF,pW];
patternDFCI=makePattern[pN,pD,pF,pC];
patternDCWI=makePattern[pN,pD,pC,pW];
patternFCWI=makePattern[pN,pF,pC,pW];


(* ::Input::Initialization:: *)
takeOutNumeric[pattern_List]:=Cases[pattern,_?NumberQ]


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternDFWI]&)]:=Module[{n,d,f,w,k1,k2,c},
{n,d,f,w}=takeOutNumeric[parameterList];
{k1,k2,c}=Check[k1k2cFromDFWI[n,d,f,w],Throw[$Failed]];
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->True}
]
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternDFCI]&)]:=Module[{n,d,f,w,k1,k2,c},
{n,d,f,c}=takeOutNumeric[parameterList];
{k1,k2,w}=Check[k1k2mFromDFCI[n,d,f,c],Throw[$Failed]];
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->True}
]
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternDCWI]&)]:=Module[{n,d,f,w,k1,k2,c},
{n,d,c,w}=takeOutNumeric[parameterList];
{k1,k2,f}=Check[k1k2fFromDWCI[n,d,c,w],Throw[$Failed]];
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->True}
]
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternFCWI]&)]:=Module[{n,d,f,w,k1,k2,c},
{n,f,c,w}=takeOutNumeric[parameterList];
{k1,k2,d}=Check[k1k2dFromFWCI[n,f,c,w],Throw[$Failed]];
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->True}
]


(* ::Input::Initialization:: *)
coddingtonValue[k1_,k2_]=(k1+k2)/(k1-k2);


(* ::Input::Initialization:: *)
k1k2cFromDFWI[n_,d_,f_,m_]:=Module[{ns1d,nfsm,k1,k2},
ns1d=(n-1.0)d;
nfsm=n*(f-m);
k1=nfsm/(ns1d*f);
k2=(nfsm - d)/(ns1d*m);
{k1,k2,coddingtonValue[k1,k2]}
]


(* ::Input::Initialization:: *)
fillParaxialParameters::illigalset="parameter set is illegal for infinite lens.";


(* ::Input::Initialization:: *)
k1k2mFromDFCI[n_,d_,f_,-1.0]:={0.0,-1.0/((n-1.0)f),f}
k1k2mFromDFCI[n_,d_,f_,1.0]:={1.0/((n-1.0)f),0.0,f-d/n}
k1k2mFromDFCI[n_,d_,f_,c_]:=Module[{nf,ns1df,sm,sqsm,num},
nf=n*f;
sm=nf(nf+(c^2-1.0)d);
If[sm<0.0,Message[fillParaxialParameters::illigalset];Throw[$Failed]];
sqsm=Sqrt[sm];
ns1df=(n-1.0)d*f;
num=sqsm-nf;
{num/((c-1.0)ns1df),num/((c+1.0)ns1df),(n*c*f-sqsm)/(n(c-1.0))}
]


(* ::Input::Initialization:: *)
fillParaxialParameters::invalidcod="Specified coddingtonValue shape factor is impossible for other parameters.";


(* ::Input::Initialization:: *)
k1k2fFromDWCI[n_,d_,c_,w_]:=Module[{sf,f,k1,k2,cc},
sf=(1.+c)^2*d^2+4.*c*(1.+c)*d*n*w+4.*n^2*w^2;
If[sf<0.0,Message[fillParaxialParameters::invalidcod];Throw[$Failed]];
f=(Sqrt[sf]+2.0n*c*w+(c+1.0)d)/(2.0n(c+1.0));
{k1,k2,cc}=k1k2cFromDFWI[n,d,f,w];
{k1,k2,f}
]


(* ::Input::Initialization:: *)
fillParaxialParameters::thkbeinfinite="Specified parameters make lens thickness be infinite.";


(* ::Input::Initialization:: *)
k1k2dFromFWCI[n_,f_,-1.0,w_]:=(Message[fillParaxialParameters::thkbeinfinite];$Failed)
k1k2dFromFWCI[n_,f_,c_,w_]:=Module[{cp1f,d,k1,k2,ff},
cp1f=(c+1.0)f;
d=(f-w)((cp1f+(c-1.0)w))/cp1f;
{k1,k2,ff}=Check[k1k2mFromDFCI[n,d,f,c],Throw[$Failed]];
{k1,k2,d}
]


(* ::Input::Initialization:: *)
patternWMT=makePattern[pN,pD,pW,pM,pT];
patternFWB=makePattern[pN,pD,pF,pW,pB];
patternFMB=makePattern[pN,pD,pF,pM,pB];
patternWMB=makePattern[pN,pD,pW,pM,pB];
patternFCB=makePattern[pN,pD,pF,pC,pB];
patternCWB=makePattern[pN,pD,pC,pW,pB];
patternCMB=makePattern[pN,pD,pB,pC,pM];
patternWMB=makePattern[pN,pD,pW,pM,pB];
patternFCW=makePattern[pN,pD,pF,pC,pW];
patternFCM=makePattern[pN,pD,pF,pC,pM];
patternCWM=makePattern[pN,pD,pC,pW,pM];
patternFBT=makePattern[pN,pD,pF,pB,pT];
patternWBT=makePattern[pN,pD,pW,pB,pT];
patternMBT=makePattern[pN,pD,pM,pB,pT];
patternFCT=makePattern[pN,pD,pF,pC,pT];
patternFWT=makePattern[pN,pD,pF,pW,pT];
patternFMT=makePattern[pN,pD,pF,pM,pT];
patternCWT=makePattern[pN,pD,pC,pW,pT];
patternCMT=makePattern[pN,pD,pC,pM,pT];
patternCBT=makePattern[pN,pD,pC,pB,pT];


(* ::Input::Initialization:: *)
fillParaxialParameters::tautology="Specified parameter set is tautology.";


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternWMT]&)]:=(Message[fillParaxialParameters::tautology];$Failed)


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternFWB]&)]:=Module[{n,d,f,c,w,m,t,b,k1,k2},
{n,d,f,w,b}=takeOutNumeric[parameterList];
{k1,k2,m}=Check[k1k2mFromFWB[n,d,f,w,b],Throw[$Failed]];
t=m+d+w;
c=coddingtonValue[k1,k2];
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
k1k2mFromFWB[n_,d_,f_,w_,b_]:=Module[{sbfn,k1,k2,m},
sbfn=(1.0-b)f*n;
k1=(sbfn-n*w)/((n-1.0)*d*f);
k2=(sbfn-n*w-d)/((n-1.0)(b*f+w)d);
m=-(b*d+n*w)f/(b*n(b*f+w));
{k1,k2,m}
]


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternFMB]&)]:=Module[{n,d,f,c,w,m,t,b,k1,k2},
{n,d,f,m,b}=takeOutNumeric[parameterList];
{k1,k2,w}=Check[k1k2wFromFMB[n,d,f,m,b],Throw[$Failed]];
t=m+d+w;
c=coddingtonValue[k1,k2];
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
k1k2wFromFMB[n_,d_,f_,m_,b_]:=Module[{sbfn,k1,k2,w},
sbfn=(1.0-b)f*n;
k1=(sbfn+b(d+n*m))/((n-1.0)(f+b*m)d);
k2=(sbfn+b*n*m)/((n-1.0)b*d*f);
w=b(d+b*n*m)f/(n(f+b*m));
{k1,k2,w}
]


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternWMB]&)]:=Module[{n,d,f,c,w,m,t,b,k1,k2},
{n,d,w,m,b}=takeOutNumeric[parameterList];
{k1,k2,f}=Check[k1k2fFromWMB[n,d,w,m,b],Throw[$Failed]];
t=m+d+w;
c=coddingtonValue[k1,k2];
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
k1k2fFromWMB[n_,d_,w_,m_,b_]:=Module[{f,k1,k2,mm},
f=-b*n*w*m/(b(b*n*m+d)+n*w);
{k1,k2,mm}=Check[k1k2mFromFWB[n,d,f,w,b],Throw[$Failed]];
{k1,k2,f}
]


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternFCB]&)]:=Module[{n,d,f,c,w,m,t,b,k1,k2},
{n,d,f,c,b}=takeOutNumeric[parameterList];
{k1,k2,w,m}=Check[k1k2wmFromFCB[n,d,f,c,b],Throw[$Failed]];
t=m+d+w;
c=coddingtonValue[k1,k2];
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
fillParaxialParameters::invalidset="Specified parameter set is invalid.";


(* ::Input::Initialization:: *)
k1k2wmFromFCB[n_,d_,f_,c_,b_]:=Module[{w,k1,k2,m,sq},
sq=f*n((c^2-1.0)d+f*n);
If[sq<0.0,Message[fillParaxialParameters::invalidset];Throw[$Failed]];
w=(f-n(b(1.0-c)+c)-Sqrt[sq])/((c-1.0)n);
{k1,k2,m}=Check[k1k2mFromFWB[n,d,f,w,b],Throw[$Failed]];
{k1,k2,w,w}
]


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternCWB]&)]:=Module[{n,d,f,c,w,m,t,b,k1,k2},
{n,d,c,w,b}=takeOutNumeric[parameterList];
{k1,k2,f,m}=Check[k1k2fmFromCWB[n,d,c,w,b],Throw[$Failed]];
t=m+d+w;
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
k1k2fmFromCWB[n_,d_,c_,w_,b_]:=Module[{k1,k2,f,m,sq},
sq=(1.0+c)^2*d^2+4.0*(b+c+c^2-b*c^2)*d*n*w+4.0*n^2*w^2;
If[sq<0.0,Message[fillParaxialParameters::invalidset];Throw[$Failed]];
m=-1.0/2.0*(d+c*d+2.0*c*n*w+Sqrt[sq])/(b*(1.0+c)*n);
{k1,k2,f}=Check[k1k2fFromWMB[n,d,w,m,b],Throw[$Failed]];
{k1,k2,f,m}
]


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternCMB]&)]:=Module[{n,d,f,c,w,m,t,b,k1,k2},
{n,d,c,m,b}=takeOutNumeric[parameterList];
{k1,k2,f,w}=Check[k1k2fwFromCMB[n,d,c,m,b],Throw[$Failed]];
t=m+d+w;
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
k1k2fwFromCMB[n_,d_,c_,m_,b_]:=Module[{k1,k2,f,w,sq},
sq=b*(-4.*(-1.+c^2)*d*m*n+b*((-1.+c)^2*d^2+4.*(-1.+c)*c*d*m*n+4.*m^2*n^2));
If[sq<0.0,Message[fillParaxialParameters::invalidset];Throw[$Failed]];
w=(0.5*(b*(d-1.*c*d-2.*c*m*n)+Sqrt[sq]))/((-1.+c)*n);
{k1,k2,f}=Check[k1k2fFromWMB[n,d,w,m,b],Throw[$Failed]];
{k1,k2,f,w}
]


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternWMB]&)]:=Module[{n,d,f,c,w,m,t,b,k1,k2},
{n,d,w,m,b}=takeOutNumeric[parameterList];
{k1,k2,f}=Check[k1k2fFromWMB[n,d,w,m,b],Throw[$Failed]];
t=m+d+w;
c=coddingtonValue[k1,k2];
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
k1k2fFromWMB[n_,d_,w_,m_,b_]:=Module[{k1,k2,f,mm},
f=(-1.*b*m*n*w)/(b*d+b^2*m*n+n*w);
{k1,k2,mm}=Check[k1k2mFromFWB[n,d,f,w,b],Throw[$Failed]];
{k1,k2,f}
]


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternFCW]&)]:=Module[{n,d,f,c,w,m,t,b,k1,k2},
{n,d,f,c,w}=takeOutNumeric[parameterList];
{k1,k2,m,b}=Check[k1k2mbFromFCW[n,d,f,c,w],Throw[$Failed]];
t=m+d+w;
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
k1k2mbFromFCW[n_,d_,f_,c_,w_]:=Module[{k1,k2,b,m,sq},
sq=f*n*((-1.+c^2)*d+f*n);
If[sq<0.0,Message[fillParaxialParameters::invalidset];Throw[$Failed]];
b=(-1.*Sqrt[sq]+c*n*(f-1.*w)+n*w)/((-1.+c)*f*n);
{k1,k2,m}=Check[k1k2mFromFWB[n,d,f,w,b],Throw[$Failed]];
{k1,k2,m,b}
]


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternFCM]&)]:=Module[{n,d,f,c,w,m,t,b,k1,k2},
{n,d,f,c,m}=takeOutNumeric[parameterList];
{k1,k2,w,f}=Check[k1k2wbFromFCM[n,d,f,c,m],Throw[$Failed]];
t=m+d+w;
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
k1k2wbFromFCM[n_,d_,f_,c_,m_]:=Module[{k1,k2,w,b,sq},
sq=f*n*((-1.+c^2)*d+f*n);
If[sq<0.0,Message[fillParaxialParameters::invalidset];Throw[$Failed]];
b=(-1.*f*(m*n+c*(-1.*f+m)*n+Sqrt[sq]))/(d*(f-1.*c*f)+(f-1.*m)*((-1.+c)*f-1.*(1.+c)*m)*n);
{k1,k2,w}=Check[k1k2wbFromFMB[n,d,f,m,b],Throw[$Failed]];
{k1,k2,w,b}
]


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternCWM]&)]:=Module[{n,d,f,c,w,m,t,b,k1,k2},
{n,d,c,w,m}=takeOutNumeric[parameterList];
{k1,k2,f,b}=Check[k1k2fbFromCWM[n,d,c,w,m],Throw[$Failed]];
t=m+d+w;
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
k1k2fbFromCWM[n_,d_,c_,w_,m_]:=Module[{k1,k2,b,f,sq},
sq=4.*m^2*n^2*w^2+4.*c*d*m*n*w*((1.+c)*m+(-1.+c)*w)+d^2*((1.+c)*m+(-1.+c)*w)^2;
If[sq<0.0,Message[fillParaxialParameters::invalidset];Throw[$Failed]];
b=(-0.5*((1.+c)*d*m+(-1.+c)*d*w+2.*c*m*n*w+Sqrt[sq]))/((1.+c)*m^2*n);
{k1,k2,f}=Check[k1k2fFromWMB[n,d,w,m,b],Throw[$Failed]];
{k1,k2,f,b}
]


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternFBT]&)]:=Module[{n,d,f,c,w,m,t,b,k1,k2},
{n,d,f,b,t}=takeOutNumeric[parameterList];
{k1,k2,w,m}=Check[k1k2wmFromFBT[n,d,f,b,t],Throw[$Failed]];
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
k1k2wmFromFBT[n_,d_,f_,b_,t_]:=Module[{k1,k2,w,m,sq},
sq=f^2+b^4*f^2+2.*b*f*(-1.*d+t)+2.*b^3*f*(-1.*d+t)+b^2*(d^2-2.*f^2+(4.*d*f)/n-2.*d*t+t^2);
If[sq<0.0,Message[fillParaxialParameters::invalidset];Throw[$Failed]];
w=(0.5*(f-1.*b^2*f+b*(-1.*d+t)+Sqrt[sq]))/b;
{k1,k2,m}=Check[k1k2mFromFWB[n,d,f,w,b],Throw[$Failed]];
{k1,k2,w,m}
]


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternWBT]&)]:=Module[{n,d,f,c,w,m,t,b,k1,k2},
{n,d,w,b,t}=takeOutNumeric[parameterList];
{k1,k2,f,m}=Check[k1k2fmFromWBT[n,d,w,b,t],Throw[$Failed]];
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
k1k2fmFromWBT[n_,d_,w_,b_,t_]:=Module[{k1,k2,m,f},
m=t-d-w;
{k1,k2,f}=Check[k1k2fFromWMB[n,d,w,m,b],Throw[$Failed]];
{k1,k2,f,m}
]


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternMBT]&)]:=Module[{n,d,f,c,w,m,t,b,k1,k2},
{n,d,w,b,t}=takeOutNumeric[parameterList];
{k1,k2,f,m}=Check[k1k2fmFromMBT[n,d,w,b,t],Throw[$Failed]];
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
k1k2fmFromMBT[n_,d_,m_,b_,t_]:=Module[{k1,k2,w,f},
w=t-d-m;
{k1,k2,f}=Check[k1k2fFromWMB[n,d,w,m,b],Throw[$Failed]];
{k1,k2,f,m}
]


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternFCT]&)]:=Module[{n,d,f,c,w,m,t,b,k1,k2},
{n,d,f,c,t}=takeOutNumeric[parameterList];
{k1,k2,m,b}=Check[k1k2mbFromFCT[n,d,f,c,t],Throw[$Failed]];
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
k1k2mbFromFCT[n_,d_,f_,c_,t_]:=Module[{k1,k2,b,w,m},
b=c^2/(-1.+c^2)+(0.5*(d-(2.*Sqrt[f*(f+((-1.+c^2)*d)/n)])/(-1.+c^2)-1.*t+Sqrt[(n*(8.*c^2*f^2*n+4.*d*Sqrt[f*n*((-1.+c^2)*d+f*n)]-4.*c^2*d*Sqrt[f*n*((-1.+c^2)*d+f*n)]-8.*c^2*f*Sqrt[f*n*((-1.+c^2)*d+f*n)]+(-1.+c^2)^2*n*(d-1.*t)^2-4.*Sqrt[f*n*((-1.+c^2)*d+f*n)]*t+4.*c^2*Sqrt[f*n*((-1.+c^2)*d+f*n)]*t+4.*(-1.+c^2)*f*(d+c^2*d*n-1.*c^2*n*t)))/(-1.+c)^2]/((1.+c)*n)))/f;
{k1,k2,w}=Check[k1k2wFromFCB[n,d,f,c,b],Throw[$Failed]];
m=t-d-w;
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternFWT]&)]:=Module[{n,d,f,c,w,m,t,b,k1,k2},
{n,d,f,w,t}=takeOutNumeric[parameterList];
{k1,k2,m,b}=Check[k1k2mbFromFWT[n,d,f,w,t],Throw[$Failed]];
c=coddingtonValue[k1,k2];
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
k1k2mbFromFWT[n_,d_,f_,w_,t_]:=Module[{k1,k2,b,m,sq},
sq=d^2*(f-1.*n*w)^2+n^2*(t-1.*w)*w*(-4.*f^2+(t-1.*w)*w)+2.*d*n*w*(f*(2.*f*n+t)-1.*(f+n*t)*w+n*w^2);
If[sq<0.0,Message[fillParaxialParameters::invalidset];Throw[$Failed]];
b=(-0.5*(-1.*d*f+n*w*(d-1.*t+w)+Sqrt[sq]))/(f*n*(d-1.*t+w));
{k1,k2,m}=Check[k1k2mFromFWB[n,d,f,w,b],Throw[$Failed]];
{k1,k2,m,b}
]


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternFMT]&)]:=Module[{n,d,f,c,w,m,t,b,k1,k2},
{n,d,f,m,t}=takeOutNumeric[parameterList];
{k1,k2,w,b}=Check[k1k2wbFromFMT[n,d,f,m,t],Throw[$Failed]];
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
k1k2wbFromFMT[n_,d_,f_,m_,t_]:=Module[{k1,k2,b,w,mm},
w=t-m-d;
{k1,k2,mm,b}=Check[k1k2mbFromFWT[n,d,f,w,t],Throw[$Failed]];
{k1,k2,w,b}
]


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternCWT]&)]:=Module[{n,d,f,c,w,m,t,b,k1,k2},
{n,d,c,w,t}=takeOutNumeric[parameterList];
m=t-d-w;
{k1,k2,f,b}=Check[k1k2fbFromCWT[n,d,c,w,t],Throw[$Failed]];
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
k1k2fbFromCWT[n_,d_,c_,w_,t_]:=Module[{k1,k2,m,b,f,sq},
sq=(1.+c)^2*d^2*(d-1.*t)^2+4.*(1.+c)*d*(d-1.*t)*(d+c*d*n-1.*c*n*t)*w+4.*(d^2*(1.+c*(3.+c)*n+n^2)-1.*d*n*(c*(3.+c)+2.*n)*t+n^2*t^2)*w^2+8.*n*(d*(c+n)-1.*n*t)*w^3+4.*n^2*w^4;
If[sq<0.0,Message[fillParaxialParameters::invalidset];Throw[$Failed]];
b=(0.5*((1.+c)*d*(d-1.*t)+2.*(d+c*d*n-1.*c*n*t)*w+2.*c*n*w^2+Sqrt[sq]))/((1.+c)*n*(d-1.*t+w)^2);
{k1,k2,f,m}=Check[k1k2fmFromCWB[n,d,c,w,b],Throw[$Failed]];
{k1,k2,f,b}
]


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternCMT]&)]:=Module[{n,d,f,c,w,m,t,b,k1,k2},
{n,d,c,m,t}=takeOutNumeric[parameterList];
w=t-d-m;
{k1,k2,f,b}=Check[k1k2fbFromCWT[n,d,c,m,t],Throw[$Failed]];
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_?(MatchQ[#,patternCBT]&)]:=Module[{n,d,f,c,w,m,t,b,k1,k2},
{n,d,c,b,t}=takeOutNumeric[parameterList];
{k1,k2,f,w}=Check[k1k2fwFromCBT[n,d,c,b,t],Throw[$Failed]];
m=t-d-w;
{lensMediumRefractiveIndex->n,lensMediumThickness->d,focalLength->f,coddingtonShapeFactor->c,paraxialWorkingDistance->w,paraxialObjectDistance->m,paraxialObjectImageDistance->t,lateralMagnification->b,frontSurfaceCurvature->k1,backSurfaceCurvature->k2,conjugateInfiniteness->False}
]


(* ::Input::Initialization:: *)
k1k2fwFromCBT[n_,d_,c_,b_,t_]:=Module[ {k1,k2,f,w,sq},
sq=b*((-1.+c^2)*d*n*(d-1.*t)+b^2*(-1.+c^2)*d*n*(d-1.*t)+b*(d^2*(1.-2.*c^2*n+n^2)+2.*d*(c^2-1.*n)*n*t+n^2*t^2));
If[sq<0.0,Message[fillParaxialParameters::invalidset];Throw[$Failed]];
f=(b*(2.*b*d+(-1.-1.*b^2+(-1.+b)^2*c^2)*d*n+(1.+b^2-1.*(-1.+b)^2*c^2)*n*t-2.*Sqrt[sq]))/((-1.+b)^2*(-1.+b*(-1.+c)-1.*c)*(1.+b+(-1.+b)*c)*n);
{k1,k2,w}=Check[k1k2wFromFCB[n,d,f,c,b],Throw[$Failed]];
{k1,k2,f,w}
]


(* ::Input::Initialization:: *)
isSupposedInfinite[parameterList_List]:=(MemberQ[parameterList,lateralMagnification]&&MemberQ[parameterList,paraxialObjectDistance]&&MemberQ[parameterList,paraxialObjectImageDistance])


(* ::Input::Initialization:: *)
numericCount[parameterList_]:=Count[Map[NumberQ,parameterList],True]


(* ::Input::Initialization:: *)
fillParaxialParameters::toofewforinfinite="Specified parameters are indeterminate for infinite conjugate lens.";
fillParaxialParameters::toomuchforinfinite="Specified parameters are too much for infinite conjugate lens.";
fillParaxialParameters::toofewforfinite="Specified parameters are indeterminate for finite conjugate lens.";
fillParaxialParameters::toomuchforfinite="Specified parameters are too much for ifinite conjugate lens.";


(* ::Input::Initialization:: *)
fillParaxialParametersInner[parameterList_List]:=With[{n=numericCount[parameterList]},
If[isSupposedInfinite[parameterList],
If[n<4,Message[fillParaxialParameters::toofewforinfinite],If[n>4,Message[fillParaxialParameters::toomuchforinfinite]]],
If[n<5,Message[fillParaxialParameters::toofewforfinite],If[n>5,Message[fillParaxialParameters::toomuchforfinite]]]];$Failed]


(* ::Input::Initialization:: *)
End[];
EndPackage[];



