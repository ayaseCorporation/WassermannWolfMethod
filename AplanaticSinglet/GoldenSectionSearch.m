(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["AplanaticSinglet`GoldenSectionSearch`"];


(* ::Input::Initialization:: *)
GoldenSectionSearchVersion="GoldenSectionSearch 0.1A by Takatoshi Yamada, Ayase corp.";


(* ::Input::Initialization:: *)
GoldenSectionSearchDescription="GoldenSectionSearch package performs a simple golden section searh in one-dimensional. The standard FindMinimum function can find minimum only for a function without global aruguments.";


(* ::Input::Initialization:: *)
GoldenSectionSearchVersion="GoldenSectionSearch ver.0.1A";


(* ::Input::Initialization:: *)
GoldenSectionSearchUsage::usage="goldenSectionSearch[] search minimum of function f. The search needs no derivative of the function.";


(* ::Input::Initialization:: *)
goldenSectionSearch::usage="goldenSectionSearch[f_,{a_,b_},opt___] returns {argument, minimumValue}.  The search will be performed between region a < b. The function 'f' will be evaluated as f[x].";


(* ::Input::Initialization:: *)
maxIterationCount::usage="maxIterationCount is an option of goldenSectionSearch and specifies maximum iteration count. default value is $maxIterationCount.";


(* ::Input::Initialization:: *)
minimumImprovementRatio::usage="minimumImprovementRatio is an option of goldenSectionSearch and specifies minimum improvement ratio. default value is $minimumImprovementRatio.";


(* ::Input::Initialization:: *)
minimumRangeRatio::usage="minimumRangeRatio is an option of goldenSectionSearch and specifies minimum range ratio. default value is $minimumRangeRatio.";


(* ::Input::Initialization:: *)
$maxIterationCount=100;
$minimumImprovementRatio=1.0*10^-10;
$minimumRangeRatio=0.001;


(* ::Input::Initialization:: *)
Begin["`Private`"];


(* ::Input::Initialization:: *)
Options[goldenSectionSearch]={maxIterationCount->$maxIterationCount,minimumImprovementRatio->$minimumImprovementRatio,minimumRangeRatio->$minimumRangeRatio};


(* ::Input::Initialization:: *)
vacant;
goldenSectionSearch::noMinimum="No mimimum can be found between `1` and `2`, maybe beyond `3` side.";
goldenSectionSearch::illegalRange="Search can not be started in range `1` and `2`.";
goldenSectionSearch[f_,{a_,b_},opt___]:=Module[{iter,impr,rng,lis},
If[a>=b,Message[goldenSectionSearch::illegalRange,a,b];Return[$Failed]];
iter=maxIterationCount/.{opt}/.Options[goldenSectionSearch];
impr=minimumImprovementRatio/.{opt}/.Options[goldenSectionSearch];
rng=(b-a)minimumRangeRatio/.{opt}/.Options[goldenSectionSearch];
lis=burryValue[f,sectionFill[{{a,f[a]},{vacant,0},{vacant,0},{b,f[b]}}]];
lis=burryValue[f,sectionFill[lis]];
If[noMinimumBetweenQ[lis],Message[goldenSectionSearch::noMinimum,a,b,sideBeyond[lis]];Return[$Failed]];
lis=NestWhile[goldenOneStep[f,#]&,lis,(improvement[#]>impr&&stepWidth[#]>rng)&,1,iter];
results[lis]
]


(* ::Input::Initialization:: *)
goldenOneStep[f_,rlis:{{_,_},{_,_},{_,_},{_,_}}]:=Module[{flis},
flis=shrinkRange[rlis,whichIsSmaller[rlis]];
flis=sectionFill[flis];
burryValue[f,flis]
]


(* ::Input::Initialization:: *)
noMinimumBetweenQ[{{_,fa_},{_,fc_},{_,fd_},{_,fb_}}]:=Min[fc,fd]>Min[fa,fb]
sideBeyond[{{a_,fa_},{_,_},{_,_},{b_,fb_}}]:=If[fa<fb,a,b]


(* ::Input::Initialization:: *)
improvement[{{_,_},{_,fc_},{_,fd_},{_,_}}]:=Abs[fd-fc]
stepWidth[{{_,_},{c_,_},{d_,_},{_,_}}]:=d-c
results[{{_,_},{c_,fc_},{d_,fd_},{_,_}}]:={(c+d)0.5,(fc+fd)0.5}


(* ::Input::Initialization:: *)
shrinkRange[{a:{_,_},c:{_,_},d:{_,_},b:{_,_}},2]:={a,{vacant,0},c,d}
shrinkRange[{a:{_,_},c:{_,_},d:{_,_},b:{_,_}},3]:={c,d,{vacant,0},b}


(* ::Input::Initialization:: *)
whichIsSmaller[{{_,_},{_,c_?NumericQ},{_,d_?NumericQ},{_,_}}]:=2/;c<=d
whichIsSmaller[{{_,_},{_,c_?NumericQ},{_,d_?NumericQ},{_,_}}]:=3/;c>d


(* ::Input::Initialization:: *)
Clear[sectionFill];sectionFill[{{a_?NumericQ,fa_},{vacant,_},{d_,fd_},{b_?NumericQ,fb_}}]:=With[{c=a+(b-a)(2.-GoldenRatio)},{{a,fa},{c,vacant},{d,fd},{b,fb}}]
sectionFill[{{a_?NumericQ,fa_},{c_,fc_},{vacant,_},{b_?NumericQ,fb_}}]:=With[{d=a+(b-a)(GoldenRatio-1.)},{{a,fa},{c,fc},{d,vacant},{b,fb}}]


(* ::Input::Initialization:: *)
Clear[burryValue];
burryValue[f_,{{a_?NumericQ,fa_},{c_?NumericQ,vacant},{d_,fd_},{b_?NumericQ,fb_}}]:={{a,fa},{c,f[c]},{d,fd},{b,fb}}
burryValue[f_,{{a_?NumericQ,fa_},{c_,fc_},{d_?NumericQ,vacant},{b_?NumericQ,fb_}}]:={{a,fa},{c,fc},{d,f[d]},{b,fb}}


(* ::Input::Initialization:: *)
End[];
EndPackage[];



