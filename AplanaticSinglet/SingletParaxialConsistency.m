(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["AplanaticSinglet`SingletParaxialConsistency`"]


(* ::Input::Initialization:: *)
SingletParaxialConsistencyVersion="ParaxialConsistency ver.0.1.A";


(* ::Input::Initialization:: *)
SingletParaxialConsistencyDescription="SingletParaxialConsistency package for checking consisntency of paraxial parameter list of singlet lens and fixing omitted paramters from the list.";


(* ::Input::Initialization:: *)
SingletParaxialConsistencyUsage="";


(* ::Input::Initialization:: *)
singletParaxialParameterSymbols::usage="singletParaxialParameterSymbols is a tag for a list of paraxial parameter symbols.";


(* ::Input::Initialization:: *)
focalLength::usage="focalLength is one of paraxial parameters.";
lensMediumRefractiveIndex::usage="lensMediumRefractiveIndex is one of paraxial parameters.";
lensMediumThickness::usage="lensMediumThickness is one of paraxial parameters.";
coddingtonShapeFactor::usage="coddingtonShapeFactor is one of paraxial parameters.";
paraxialWorkingDistance::usage="paraxialWorkingDistance is one of paraxial parameters.";
paraxialObjectDistance::usage="paraxialObjectDistance is one of paraxial parameters.";
paraxialObjectImageDistance::usage="paraxialObjectImageDistance is one of paraxial parameters.";
lateralMagnification::usage="lateralMagnification is one of paraxial parameters and specifying lateral magnification and should be LESS THAN ONE, i.e., reducing image. If not specified, lateralMagnification = 0. If both lateralMagnification and imageObjectDistance are specified, focalLength is ignored by the solver.";


(* ::Input::Initialization:: *)
frontSurfaceCurvature::usage="frontSurfaceCurvature is a result tag of biasphericAplanatSolver. The rhs value is curvature value of the front surface (surface 1).";
backSurfaceCurvature::usage="backSurfaceCurvature is a result tag of biasphericAplanatSolver. The rhs value is curvature value of the back surface (surface 2).";conjugateInfiniteness::usage="conjugateInfiniteness is one of paraxial parameters for output and if True, condition set is infinite.";
paraxialDistanceBetweenObjectAndPrincipal::usage="paraxialDistanceBetweenObjectAndPrincipal is one of paraxial parameters specifying distance between object plane and principal plane in object space. If conjugateInfiniteness is True, a rule expression including this is not included.";
paraxialDistanceBetweenPrincipalAndImage::usage="paraxialDistanceBetweenPrincipalAndImage is one of paraxial parameters specifying distance between principal plane and image plane in image space. If conjugateInfiniteness is True, paraxialDistanceBetweenPrincipalAndImage is equal to paraxialWorkingDistance.";


(* ::Input::Initialization:: *)
settleRemainedParaxialParameters::usage="settleRemainedParaxialParameters[parameterSet:{__Rule}] checks consistency of parameter set and returns a list of key-value rule pairs of omitted parameters.";


(* ::Input::Initialization:: *)
paraxialThickessDifferenceFromMechanical::usage="paraxialDistanceFromMechanical[ncg_,dcg_] converts mechanical thickness to paraxial with cover glass thickness dcg and refractive index ncg.";
paraxialDistanceFromMechanical::usage="paraxialDistanceFromMechanical[ncg_,dcg_][m_] converts mechanical distance m to paraxial with cover glass thickness dcg and refractive index ncg.";


(* ::Input::Initialization:: *)
paraxialThickessDifferenceToMechanical::usage="paraxialDistanceToMechanical[ncg_,dcg_] converts paraxial thickness to mechanical with cover glass thickness dcg and refractive index ncg.";
paraxialDistanceToMechanical::usage="paraxialDistanceFromMechanical[ncg_,dcg_][m_] converts paraxial distance m to mechanical with cover glass thickness dcg and refractive index ncg.";


(* ::Input::Initialization:: *)
Begin["`Private`"];


(* ::Input::Initialization:: *)
singletParaxialParameterSymbols={focalLength,lensMediumRefractiveIndex,lensMediumThickness,coddingtonShapeFactor,paraxialWorkingDistance,paraxialObjectDistance,paraxialObjectImageDistance,lateralMagnification,conjugateInfiniteness};


(* ::Input::Initialization:: *)
paraxialThickessDifferenceFromMechanical[ncg_,dcg_]=dcg(1.0/ncg-1.0);
paraxialDistanceFromMechanical[ncg_,dcg_]=Function[{m},m-(ncg-1.0)/ncg*dcg];
paraxialThicknessDifferenceToMechanical[ncg_,dcg_]=ncg*dcg/(ncg-1.0);
paraxialDistanceToMechanical[ncg_,dcg_]=Function[{mp},mp+(ncg-1.0)/ncg*dcg];


(* ::Input::Initialization:: *)
setEqualQ[a_List,b_List]:=(Sort[a]===Sort[b])


(* ::Input::Initialization:: *)
Clear[fParm,nParm,dParm,cParm,iParm,oParm,oiParm,bParm];
Options[settleRemainedParaxialParameters]={focalLength->fParm,lensMediumRefractiveIndex->nParm,lensMediumThickness->dParm,coddingtonShapeFactor->cParm,paraxialWorkingDistance->iParm,paraxialObjectDistance->oParm,paraxialObjectImageDistance->oiParm,lateralMagnification->bParm};
settleRemainedParaxialParameters[parameterSet__Rule]:=settleRemainedParaxialParameters[{parameterSet}]
settleRemainedParaxialParameters[parameterSet:{__Rule}]:=Module[{f,n,d,c,i,o,oi,\[Beta],ret},
f=focalLength/.parameterSet/.Options[settleRemainedParaxialParameters];
n=lensMediumRefractiveIndex/.parameterSet/.Options[settleRemainedParaxialParameters];
d=lensMediumThickness/.parameterSet/.Options[settleRemainedParaxialParameters];
c=coddingtonShapeFactor/.parameterSet/.Options[settleRemainedParaxialParameters];
i=paraxialWorkingDistance/.parameterSet/.Options[settleRemainedParaxialParameters];
o=paraxialObjectDistance/.parameterSet/.Options[settleRemainedParaxialParameters];
oi=paraxialObjectImageDistance/.parameterSet/.Options[settleRemainedParaxialParameters];
\[Beta]=lateralMagnification/.parameterSet/.Options[settleRemainedParaxialParameters];
If[infiniteParameterSetQ[f,n,d,c,i,o,oi,\[Beta]],Return[settleRemainedParaxialParametersInfinite[d,n,f,i,c]]];
Check[ret=tautologyCheck[d,i,o,oi],Return[$Failed]];
If[! NumericQ[i],i=paraxialWorkingDistance/.ret/.parameterSet/.Options[settleRemainedParaxialParameters]];If[! NumericQ[o],o=paraxialObjectDistance/.ret/.parameterSet/.Options[settleRemainedParaxialParameters]];
Flatten[{ret,settleRemainedParaxialParametersFinite[d,n,f,i,c,o,\[Beta]]}]
]



(* ::Input::Initialization:: *)
Clear[checkNumeric];
Attributes[checkNumeric]={Listable};
checkNumeric[n_?NumericQ,_]:=Nothing
checkNumeric[n_,ret_]:=ret
absentParameter[d_,n_,f_,m_,cod_]:=checkNumeric[{d,n,f,m,cod},{lensMediumThickness,lensMediumSymbol,focalLength,paraxialWorkingDistance,coddingtonShapeFactor}]

(*for finite conjugate case*)
absentParameter[d_,n_,f_,mid_,cod_,mod_,oid_,beta_]:=checkNumeric[{d,n,f,mid,cod,mod,oid,beta},{lensMediumThickness,lensMediumSymbol,focalLength,paraxialWorkingDistance,coddingtonShapeFactor,paraxialObjectDistance,paraxialObjectImageDistance,lateralMagnification}]


(* ::Input::Initialization:: *)
infiniteParameterSetQ[d_,n_,f_,mid_,cod_,mod_,oid_,beta_]:=With[{absents=absentParameter[d,n,f,mid,cod,mod,oid,beta]},SubsetQ[absents,{oiParm,bParm}]||SubsetQ[absents,{oParm,bParm}]]


(* ::Input::Initialization:: *)
CSF[c1_,c2_]:=(c1+c2)/(c1-c2)


(* ::Input::Initialization:: *)
frontParaxialCurvature[d_?NumericQ,n_?NumericQ,f_?NumericQ,m_?NumericQ]:=n (f-m)/((n-1)d*f)
backParaxialCurvature[d_?NumericQ,n_?NumericQ,f_?NumericQ,m_?NumericQ]:=(n(f-m)-d)/((n-1)d*m)
paraxialWorkingDistance[d_?NumericQ,n_?NumericQ,f_?NumericQ,cod_?NumericQ]:=With[{smsq=n*f*(n*f+(cod^2-1)d)},If[smsq<0.0,Message[setupBiasphericAplanatParameters::inconsistent],0.0]]


(* ::Input::Initialization:: *)
Clear[checkNumeric];
Attributes[checkNumeric]={Listable};
checkNumeric[n_?NumericQ,_]:=Nothing
checkNumeric[n_,ret_]:=ret
absentParameter[d_,n_,f_,m_,cod_]:=checkNumeric[{d,n,f,m,cod},{dParm,nParm,fParm,iParm,cParm}]
(*for finite conjugate case*)
allParametersForFinite={dParm,nParm,fParm,iParm,cParm,oParm,oiParm,bParm};
absentParameter[d_,n_,f_,mid_,cod_,mod_,oid_,beta_]:=checkNumeric[{d,n,f,mid,cod,mod,oid,beta},allParametersForFinite]
containedParameter[d_,n_,f_,mid_,cod_,mod_,oid_,beta_]:=Complement[allParametersForFinite,absentParameter[d,n,f,mid,cod,mod,oid,beta]]


(* ::Input::Initialization:: *)
Clear[curvaturesInfinite];
curvaturesInfinite[_?NumericQ,n_?NumericQ,f_?NumericQ,m_?NumericQ,cod_?(N[#]===-1.0&)]:={frontSurfaceCurvature->0,backSurfaceCurvature->-1.0/((n-1)f)}
curvaturesInfinite[_?NumericQ,n_?NumericQ,f_?NumericQ,m_?NumericQ,cod_?(N[#]===1.0&)]:={frontSurfaceCurvature->1.0/((n-1)f),backSurfaceCurvature->0}
curvaturesInfinite[d_?NumericQ,n_?NumericQ,f_?NumericQ,m_?NumericQ,_]:={frontSurfaceCurvature->n (f-m)/((n-1)d*f),backSurfaceCurvature->(n(f-m)-d)/((n-1)d*m),conjugateInfiniteness->True}


(* ::Input::Initialization:: *)
Clear[settleRemainedParaxialParametersInfinite];settleRemainedParaxialParametersInfinite[d_,n_,f_,m_,cod_]:=If[cod=!=-(d*f-n (f^2-m^2)/((n-1.0)d*f)),Message[settleRemainedParaxialParameters::inconsistent];$Failed,Flatten[{curvaturesInfinite[d,n,f,m,cod],paraxialWorkingDistance->m}]]

settleRemainedParaxialParametersInfinite[d_,n_,f_,m_,cod_]:=(Message[settleRemainedParaxialParameters::notenough];$Failed)/;Length[absentParameter[d,n,f,m,cod]]>=2

settleRemainedParaxialParametersInfinite[d_,n_,f_,m_,cod_]:=(Message[settleRemainedParaxialParameters::compalsory,lensMediumSymbol];$Failed)/;absentParameter[d,n,f,m,cod]==={nParm}

settleRemainedParaxialParametersInfinite[d_,n_,f_,m_,cod_]:=(Message[settleRemainedParaxialParameters::notenough];$Failed)/;(absentParameter[d,n,f,m,cod]==={dParm})&&(Abs[N[cod]]===1.0)

settleRemainedParaxialParametersInfinite[d_,n_,f_,m_,cod_]:=Module[{sd,ddep},sd=(cod+1.0)f-(cod-1.0)m;
ddep=n*sd (f-m)/((cod+1.0)f);
Flatten[{curvaturesInfinite[ddep,n,f,m,cod],paraxialWorkingDistance->m,lensMediumThickness->ddep}]
]/;(absentParameter[d,n,f,m,cod]==={dParm})&&(Abs[N[cod]]=!=1.0)

settleRemainedParaxialParametersInfinite[d_,n_,f_,m_,cod_]:=Module[{sd,fdep},sd=(cod+1.0)^2d^2+4n*m*(cod(cod+1.0)d+n*m);
If[sd<0.0,Message[settleRemainedParaxialParameters::inconsistent];Return[$Failed]];
fdep=If[N[cod]=!=-1.0,
(Sqrt[sd]+2.0n*cod*m+(cod+1.0)d)/(2n(cod+1.0)),d/n+m];
Flatten[{curvaturesInfinite[d,n,fdep,m,cod],paraxialWorkingDistance->m,focalLength->fdep}]
]/;absentParameter[d,n,f,m,cod]==={fParm}

settleRemainedParaxialParametersInfinite[d_,n_,f_,m_,cod_]:=Module[{sm,mdep},sm=n*f*(n*f+(cod^2-1.0)d);
If[sm<0.0,Message[settleRemainedParaxialParameters::inconsistent];Return[$Failed]];
mdep=If[N[cod]=!=1.0,(n*cod*f-Sqrt[sm])/(n(cod-1.0)),f-d/n];
Flatten[{curvaturesInfinite[d,n,f,mdep,cod],paraxialWorkingDistance->mdep}]
]/;absentParameter[d,n,f,m,cod]==={iParm}

settleRemainedParaxialParametersInfinite[d_,n_,f_,m_,cod_]:=With[{curvs=curvaturesInfinite[d,n,f,m,cod]},
Flatten[{curvs,paraxialWorkingDistance->m,coddingtonShapeFactor->(CSF[frontSurfaceCurvature,backSurfaceCurvature]/.curvs)}]
]/;absentParameter[d,n,f,m,cod]==={cParm}



(* ::Input::Initialization:: *)
Clear[numericCount];
Attributes[numericCount]={Listable};
numericCount[c_]:=1/;NumericQ[c]
numericCount[c_]:=0/;(! NumericQ[c])
boundingConditionCount[params:{__}]:=Apply[Plus,numericCount[params]]

additionalTermsOfPricipals[d_,n_,c1_,c2_,mid_,mod_]:={paraxialDistanceBetweenObjectAndPrincipal->mod-objectPrincipalPlanePosition[c1,c2,n,d],paraxialDistanceBetweenPrincipalAndImage->mid-imagePrincipalPlanePosition[c1,c2,n,d]}

settleRemainedParaxialParametersFinite[d_,n_,f_,mid_,cod_,mod_,beta_]:=Module[{nc,da,na,fa,ia,ca,oa,ba},
nc=boundingConditionCount[{f,mid,cod,mod,beta}];
If[nc<=2,Message[settleRemainedParaxialParameters::notenough];Return[$Failed],If[nc>=4,Message[settleRemainedParaxialParameters::toomuch];Return[$Failed]]];
Flatten[{conjugateInfiniteness->False,fixRemainedParaxialParametersFinite[d,n,f,mid,cod,mod,beta]}]
]

fixRemainedParaxialParametersFinite[d_,n_,_,mid_?NumericQ,_,mod_?NumericQ,beta_?NumericQ]:=With[{c1=(beta(d+n*mod)+n mid)/(beta(n-1.0)d mod),c2=-(d+beta n mod+n mid)/((n-1.0)d mid)},
Flatten[{frontSurfaceCurvature->c1,backSurfaceCurvature->c2,focalLength->-beta n mid mod/(beta(beta n mod+d)+n mid),coddingtonShapeFactor->CSF[c1,c2],additionalTermsOfPricipals[d,n,c1,c2,mid,mod]}]
]

fixRemainedParaxialParametersFinite[d_,n_,f_?NumericQ,mid_?NumericQ,_,_,beta_?NumericQ]:=With[{c1=((1.0-beta)f n- n mid)/((n-1.0)d f),c2=((1.0-beta)f n - n mid - d)/((n-1.0)(beta f + mid)d),mod=-(beta d f+f n mid)/(beta n (beta f +mid))},
Flatten[{frontSurfaceCurvature->c1,backSurfaceCurvature->c2,paraxialObjectDistance->mod,coddingtonShapeFactor->CSF[c1,c2],additionalTermsOfPricipals[d,n,c1,c2,mid,mod]}]
]

fixRemainedParaxialParametersFinite[d_,n_,f_?NumericQ,_,_,mod_?NumericQ,beta_?NumericQ]:=With[{c1=(beta d +(1.0-beta)n f+beta n mod)/(d(n-1.0)(beta f +mod)d),c2=((1.0-beta)f n - n mod - d)/((n-1.0)(beta f + mod)d),mid=-(beta f(beta n mod+d))/(n(f+beta mod))},
Flatten[{frontSurfaceCurvature->c1,backSurfaceCurvature->c2,paraxialWorkingDistance->mid,coddingtonShapeFactor->CSF[c1,c2],additionalTermsOfPricipals[d,n,c1,c2,mid,mod]}]
]

fixRemainedParaxialParametersFinite[d_,n_,f_?NumericQ,_,cod_?NumericQ,_,beta_?NumericQ]:=Module[{s,sq,c1,c2,mid,mod},
s=n((cod^2-1.0)d+n f)f;
If[s<0.0,Message[settleRemainedParaxialParameters::inconsistent];Return[$Failed]];
sq=Sqrt[s];
c1=(sq-n f)/((cod-1.0)(n-1.0)d f);
c2=(sq-n f)/((cod+1.0)(n-1.0)d f);
mod=(beta sq+f n ((beta-1.0)cod-1.0))/(beta(cod+1.0)n);
mid=-(sq+n f((beta-1.0)cod -beta))/((cod-1.0)n);
Flatten[{frontSurfaceCurvature->c1,backSurfaceCurvature->c2,paraxialObjectDistance->mod,paraxialWorkingDistance->mid,additionalTermsOfPricipals[d,n,c1,c2,mid,mod]}]
]

fixRemainedParaxialParametersFinite[d_,n_,f_?NumericQ,mid_?NumericQ,cod_?NumericQ,_,_]:=Module[{s,sq,c1,c2,mod},
s=n((cod^2-1.0)d+n f)n f;
If[s<0.0,Message[settleRemainedParaxialParameters::inconsistent];Return[$Failed]];
sq=Sqrt[s];
c1=(sq-n f)/((cod-1.0)(n-1.0)d f);
c2=(sq-n f)/((cod+1.0)(n-1.0)d f);
mod=(c2*d(n-1.0)mid+d+n mid)/((n-1.0)(c1(c2 d(n-1.0)mid+d+n mid)-c2 n mid)-n);
Flatten[{frontSurfaceCurvature->c1,backSurfaceCurvature->c2,paraxialObjectDistance->mod,lateralMagnification->(cod n (f-mid)+n mid - sq)/((cod-1.0)n f),additionalTermsOfPricipals[d,n,c1,c2,mid,mod]}]
]

fixRemainedParaxialParametersFinite[d_,n_,f_?NumericQ,mid_?NumericQ,_,mod_?NumericQ,_]:=Module[{s,sq,c1,c2},
s=(d f)^2+2.0d f n mid mod+n^2mid mod(mid mod-4.0f^2);
If[s<0.0,Message[settleRemainedParaxialParameters::inconsistent];Return[$Failed]];
sq=Sqrt[s];
c1=(sq-d f+n mod(mid-2.0f))/(2.0d f (n-1.0)mod);
c2=(sq+d f + 2.0 f n mid-n mod mid)/(2.0d f mid(1.0-n));
Flatten[{frontSurfaceCurvature->c1,backSurfaceCurvature->c2,lateralMagnification->(sq-f d f - n mid mod)/(2.0 f n mod),coddingtonShapeFactor->CSF[c1,c2],additionalTermsOfPricipals[d,n,c1,c2,mid,mod]}]
]

fixRemainedParaxialParametersFinite[d_,n_,f_?NumericQ,_,cod_?NumericQ,_,beta_?NumericQ]:=Module[{s,sq,rc,rm,c1,c2,mod,mid},
s=((cod^2-1.0)d+n f)n f;
If[s<0.0,Message[settleRemainedParaxialParameters::inconsistent];Return[$Failed]];
sq=Sqrt[s];
rc=(sq-n f)/((n-1.0)d f);
rm=((cod(beta-1.0)-1.0)n f+beta*sq)/(beta n);
c1=rc/(cod-1.0);
c2=rc/(cod+1.0);
mod=rm/(cod+1.0);
mid=rm/(cod-1.0);
Flatten[{frontSurfaceCurvature->c1,backSurfaceCurvature->c2,paraxialObjectDistance->mod,paraxialWorkingDistance->mid,additionalTermsOfPricipals[d,n,c1,c2,mid,mod]}]
]

fixRemainedParaxialParametersFinite[__]:=(
Message[settleRemainedParaxialParameters::notimplemented];$Failed)


(* ::Input::Initialization:: *)
objectPrincipalPlanePosition[c1_,c2_,n_,d_]:=c2*d/(c1(c2*d(n-1)+n)-n*c2)
imagePrincipalPlanePosition[c1_,c2_,n_,d_]:=-c1*d/(c1(c2*d(n-1)+n)-n*c2)


(* ::Input::Initialization:: *)
tautologyCheck[d_?NumericQ,mid_?NumericQ,mod_?NumericQ,oid_?NumericQ]:={}/;oid==d+mid+mod
tautologyCheck[d_?NumericQ,mid_?NumericQ,mod_?NumericQ,oid_?NumericQ]:=(Message[settleRemainedParaxialParameters::tautology];$Failed)/;oid=!=d+mid+mod
tautologyCheck[_?(! NumericQ[#]&),mid_?NumericQ,mod_?NumericQ,oid_?NumericQ]:={lensMediumThickness->oid-mid-mod}
tautologyCheck[d_?NumericQ,_?(! NumericQ[#]&),mod_?NumericQ,oid_?NumericQ]:={paraxialWorkingDistance->oid-d-mod}
tautologyCheck[d_?NumericQ,mid_?NumericQ,_?(! NumericQ[#]&),oid_?NumericQ]:={paraxialObjectDistance->oid-d-mid}
tautologyCheck[d_?NumericQ,mid_?NumericQ,mod_?NumericQ,_?(! NumericQ[#]&)]:={paraxialObjectImageDistance->mid+d+mod}
tautologyCheck[__]:=Sequence[]

tautologyParameterList={dParm,iParm,oParm,oiParm};
tautologyParametersMatchQ[d_,n_,f_,mid_,cod_,mod_,oid_,beta_]:=(Intersection[absentParameter[d,n,f,mid,cod,mod,oid,beta],tautologyParameterList]==={})

tooMuchConstraintsQ[d_,n_,f_,mid_,cod_,mod_,oid_,beta_]:=(! tautologyParametersMatchQ[d,n,f,mid,cod,mod,oid,beta] && (False))(*testing*)


(* ::Input::Initialization:: *)
mostProbableParameterList={nParm,dParm,iParm,bParm,oiParm};
settleRemainedParaxialForMostProbableParameters[d_,n_,mid_,oid_,beta_]:=Module[{c1,c2,mod,f,cod},
mod=oid-d-mid;
If[mod<0.0,Message[settleRemainedParaxialParameters::meybepositive,paraxialObjectDistance]];
c1=(beta*d+n(beta*mod+mid))/(beta(n-1.0)d*mod);
c2=-(d+n(beta*mod+mid))/((n-1.0)d*mid);
f=-beta*n*mid*mod/(n*mid+beta(d+beta*n*mod));
If[mod<0.0,Message[settleRemainedParaxialParameters::meybepositive,focalLength]];
cod=(c1+c2)/(c1-c2);
{frontSurfaceCurvature->c1,backSurfaceCurvature->c2,focalLength->f,paraxialObjectDistance->mod,coddingtonShapeFactor->cod,paraxialDistanceBetweenObjectAndPrincipal->mod-objectPrincipalPlanePosition[c1,c2,n,d],paraxialDistanceBetweenPrincipalAndImage->mid-imagePrincipalPlanePosition[c1,c2,n,d],conjugateInfiniteness->False}]


(* ::Input::Initialization:: *)
fixedFocalLengthParameterList={nParm,dParm,fParm,bParm,oiParm};
settleRemainedParaxialForFixedFocalLength[d_,n_,f_,oid_,beta_]:=Module[{sq,mid},
sq=((oid-d)beta)^2+((beta^2-1.0)f)^2+2beta*f((oid-d)(beta^2+1.0)+2.0beta*d/n);
If[sq<0.0,Message[settleRemainedParaxialParameters::inconsistent,Return[$Failed]]];
mid=((1-beta^2)f+beta(oid-d)+Sqrt[sq])/(2beta);
If[mid<0.0,Message[settleRemainedParaxialParameters::meybepositive,paraxialWorkingDistance]];Flatten[{paraxialWorkingDistance->mid,settleRemainedParaxialForMostProbableParameters[d,n,mid,oid,beta]}]
]

lackOfOIAndWDParameterList={nParm,dParm,fParm,bParm,oParm};
settleRemainedParaxialForlackOfOIAndWD[d_,n_,f_,mod_,beta_]:=Module[{mid,oid},
mid=-(beta*f(beta*n*mod+d))/(n(beta*mod+f));
If[mid<0.0,Message[settleRemainedParaxialParameters::meybepositive,paraxialWorkingDistance]];oid=d+mod+mid;
Flatten[{paraxialWorkingDistance->mid,paraxialObjectImageDistance->oid,settleRemainedParaxialForMostProbableParameters[d,n,mid,oid,beta]}]
]

lackOfOIAndODParameterList={nParm,dParm,fParm,bParm,iParm};
settleRemainedParaxialForlackOfOIAndOD[d_,n_,f_,mid_,beta_]:=Module[{mod,oid},
mod=-f(n*mid+beta*d)/(beta*n(mid+beta*f));
If[mod<0.0,Message[settleRemainedParaxialParameters::meybepositive,paraxialObjectDistance]];
oid=d+mod+mid;
Flatten[{paraxialWorkingDistance->mid,paraxialObjectImageDistance->oid,settleRemainedParaxialForMostProbableParameters[d,n,mid,oid,beta]}]
]


(* ::Input::Initialization:: *)
settleRemainedParaxialParametersFinite[d_,n_,f_,mid_,cod_,mod_,oid_,beta_]:=If[oid===mod+d+mid,settleRemainedParaxialParametersFinite[d,n,f,mid,cod,oParm,oid,beta],Message[settleRemainedParaxialParameters::tautoloy];$Failed]/;tautologyParametersMatchQ[d,n,f,mid,cod,mod,oid,beta]

settleRemainedParaxialParametersFinite[d_,n_,f_,m_,cod_]:=(Message[settleRemainedParaxialParameters::compalsory,lensMediumSymbol];$Failed)/;absentParameter[d,n,f,m,cod]==={nParm}

settleRemainedParaxialParametersFinite[d_,n_,f_,mid_,cod_,mod_,oid_,beta_]:=settleRemainedParaxialForMostProbableParameters[d,n,mid,oid,beta]/;setEqualQ[containedParameter[d,n,f,mid,cod,mod,oid,beta],mostProbableParameterList]

settleRemainedParaxialParametersFinite[d_,n_,f_,mid_,cod_,mod_,oid_,beta_]:=settleRemainedParaxialForFixedFocalLength[d,n,f,oid,beta]/;setEqualQ[containedParameter[d,n,f,mid,cod,mod,oid,beta],fixedFocalLengthParameterList]

settleRemainedParaxialParametersFinite[d_,n_,f_,mid_,cod_,mod_,oid_,beta_]:=settleRemainedParaxialForlackOfOIAndWD[d,n,f,mod,beta]/;setEqualQ[containedParameter[d,n,f,mid,cod,mod,oid,beta],lackOfOIAndWDParameterList]

settleRemainedParaxialParametersFinite[d_,n_,f_,mid_,cod_,mod_,oid_,beta_]:=settleRemainedParaxialForlackOfOIAndOD[d,n,f,mod,beta]/;setEqualQ[containedParameter[d,n,f,mid,cod,mod,oid,beta],lackOfOIAndODParameterList]

settleRemainedParaxialParametersFinite[__]:=(Message[settleRemainedParaxialParameters::notimplemented];$Failed)


(* ::Input::Initialization:: *)
settleRemainedParaxialParameters::tautology="distances are not consistent each other.";
settleRemainedParaxialParameters::meybepositive="a paraxial parameter `1` may be positive.";
settleRemainedParaxialParameters::inconsistent="paraxial parameter set is inconsistent.";
settleRemainedParaxialParameters::notenough="paraxial parameter set is insufficient to fix paraxial condition.";
settleRemainedParaxialParameters::toomuch="paraxial parameter set is excessive and no solution.";
settleRemainedParaxialParameters::compalsory="numerical rule for `1` is needed for consistency between parameters.";
settleRemainedParaxialParameters::tautoloy="parameter set includes tautology.";
settleRemainedParaxialParameters::notimplemented="sorry, a result for the parameter set is currently not implemented.";


(* ::Input::Initialization:: *)
End[];
EndPackage[];



