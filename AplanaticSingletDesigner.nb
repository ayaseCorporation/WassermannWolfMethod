(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    962192,      22362]
NotebookOptionsPosition[    952504,      22172]
NotebookOutlinePosition[    958584,      22298]
CellTagsIndexPosition[    957894,      22276]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Aplanatic bi-aspherical Singlet Designer", "Title",
 CellChangeTimes->{{3.823204603958084*^9, 3.823204615018716*^9}, {
  3.823287760629455*^9, 3.823287762657476*^9}, {3.8232910652630463`*^9, 
  3.823291074115197*^9}},ExpressionUUID->"b9e6fe14-67c5-4f7d-9ec0-\
13c361826e91"],

Cell[CellGroupData[{

Cell[TextData[{
 "Initialization Code",
 StyleBox[" (optional) ", "SectionGloss"],
 Cell[BoxData[
  TemplateBox[{"Initialization Code", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
        TextData[{"Provide any code that must be evaluated before the ", 
          StyleBox["Manipulate", "MRbig"], 
          ". This will automatically be built into the ", 
          StyleBox["Manipulate", "MRbig"], 
          " in the final notebook version. Never use a package that is not \
included in the default distribution of ", 
          StyleBox["Mathematica", FontSlant -> "Italic"], 
          ". To use a package, use the ", 
          StyleBox["Initialization", "MRbig"], " option (with ", 
          StyleBox["Get", "MRbig"], ", not ", 
          StyleBox["Needs", "MRbig"], ") in the ", 
          StyleBox["Manipulate", "MRbig"], 
          " itself, and use the full name of the function from the package. \
For example:\n", 
          StyleBox[
          "  Manipulate[\n  ...\n  ComputationalGeometry`ConvexHull[...]...\n \
 ...\n  Initialization :> Get[\"ComputationalGeometry`\"],\n  ...\n  ]", 
           "MR"], "\nIf you provide initialization code, include a ", 
          StyleBox["SaveDefinitions->True", "MRbig"], " option in the ", 
          StyleBox["Manipulate", "MRbig"], ".", 
          StyleBox["\n", FontSize -> 4]}], "MoreInfoText"], Background -> 
       GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
       RoundingRadius -> 5]], "MoreInfoText", Deletable -> True, 
     CellTags -> {"SectionMoreInfoDefinition"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "81fde376-e763-44cf-83ed-5c52ec315067"]
}], "InitializationSection",
 InitializationCell->False,
 CellTags->
  "Initialization \
Code",ExpressionUUID->"1d34a731-8c48-4189-8b6f-89ef5777db9f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"canBeObjectSymbol", "[", "s_Symbol", "]"}], ":=", 
  RowBox[{"ContainsOnly", "[", 
   RowBox[{
    RowBox[{"Attributes", "[", "s", "]"}], ",", 
    RowBox[{"{", "Temporary", "}"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"canBeObjectSymbol", "[", 
   RowBox[{"s_Symbol", "[", "___", "]"}], "]"}], ":=", 
  RowBox[{"canBeObjectSymbol", "[", "s", "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"canBeObjectSymbol", "[", "_", "]"}], ":=", "False"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"mediumTypes", "=", 
   RowBox[{"{", 
    RowBox[{"constantMedium", ",", "dispersiveMedium"}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "createMedium", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"mediumName", "\[Rule]", "\"\<\>\""}], ",", 
     RowBox[{"lambdaDomain", "\[Rule]", "All"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"refractiveIndexValue", "::", "outofrange"}], "=", 
   "\"\<wavelength `1` is not in range `2` to `3`\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"createMedium", "[", 
   RowBox[{
    RowBox[{"mediumSymbol_", "?", "canBeObjectSymbol"}], ",", 
    "rindexFunction_Function", ",", "opt___"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"mediumQ", "[", "mediumSymbol", "]"}], "^=", "True"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mediumSymbol", "[", "mediumType", "]"}], "=", 
      "dispersiveMedium"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mediumSymbol", "[", "mediumName", "]"}], "=", 
      RowBox[{
       RowBox[{"mediumName", "/.", 
        RowBox[{"{", "opt", "}"}]}], "/.", 
       RowBox[{"mediumName", "\[Rule]", 
        RowBox[{"ToString", "[", "mediumSymbol", "]"}]}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mediumSymbol", "[", "lambdaDomain", "]"}], "=", 
      RowBox[{
       RowBox[{"lambdaDomain", "/.", 
        RowBox[{"{", "opt", "}"}]}], "/.", 
       RowBox[{"Options", "[", "createMedium", "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mediumSymbol", "[", "refractiveIndex", "]"}], "=", 
      "rindexFunction"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mediumSymbol", "[", "lastLambda", "]"}], "=", "0.0"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mediumSymbol", "[", "lastIndex", "]"}], "=", "0.0"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"refractiveIndexValue", "[", "mediumSymbol", "]"}], "^=", 
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", "lambda", "}"}], ",", 
        RowBox[{"Evaluate", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"mediumSymbol", "[", "lambdaDomain", "]"}], "=!=", 
               "All"}], ")"}], "&&", 
             RowBox[{"Not", "[", 
              RowBox[{"Between", "[", 
               RowBox[{"lambda", ",", 
                RowBox[{"medium", "[", "lambdaDomain", "]"}]}], "]"}], 
              "]"}]}], ",", 
            RowBox[{
             RowBox[{"Message", "[", 
              RowBox[{
               RowBox[{"refractiveIndexValue", "::", "outofrange"}], ",", 
               "lambda", ",", 
               RowBox[{
                RowBox[{"mediumSymbol", "[", "lambdaDomain", "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{
                RowBox[{"mediumSymbol", "[", "lambdaDomain", "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{"-", "1"}], "]"}], "]"}]}], "]"}], ";", 
             RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"lambda", "=!=", 
             RowBox[{"mediumSymbol", "[", "lastLambda", "]"}]}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"mediumSymbol", "[", "lastLambda", "]"}], "=", 
              "lambda"}], ";", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"mediumSymbol", "[", "lastIndex", "]"}], "=", 
              RowBox[{
               RowBox[{"mediumSymbol", "[", "refractiveIndex", "]"}], "[", 
               "lambda", "]"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"mediumSymbol", "[", "lastIndex", "]"}]}], "]"}]}], "]"}]}],
      ";", "\[IndentingNewLine]", "mediumSymbol"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"createConstantMedium", "[", 
   RowBox[{
    RowBox[{"mediumSymbol_", "?", "canBeObjectSymbol"}], ",", 
    RowBox[{"rindex_", "?", "NumberQ"}], ",", "opt___"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"mediumQ", "[", "mediumSymbol", "]"}], "^=", "True"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"refractiveIndexValue", "[", "mediumSymbol", "]"}], "^=", 
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", "lambda", "}"}], ",", 
        RowBox[{"mediumSymbol", "[", "lastIndex", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mediumSymbol", "[", "mediumType", "]"}], "=", 
      "constantMedium"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mediumSymbol", "[", "mediumName", "]"}], "=", 
      RowBox[{
       RowBox[{"mediumName", "/.", 
        RowBox[{"{", "opt", "}"}]}], "/.", 
       RowBox[{"{", 
        RowBox[{"mediumName", "\[Rule]", 
         RowBox[{"ToString", "[", "mediumSymbol", "]"}]}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mediumSymbol", "[", "lambdaDomain", "]"}], "=", "All"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mediumSymbol", "[", "lastLambda", "]"}], "=", "0.0"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mediumSymbol", "[", "lastIndex", "]"}], "=", "rindex"}], ";", 
     "\[IndentingNewLine]", "mediumSymbol"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"mediumQ", "[", "_", "]"}], ":=", "False"}], "\[IndentingNewLine]",
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"refractiveIndexValue", "[", 
    RowBox[{
     RowBox[{"medium_", "?", "mediumQ"}], ",", 
     RowBox[{"lambda_", "?", "NumberQ"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"refractiveIndexValue", "[", "medium", "]"}], "[", "lambda", 
    "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"createConstantMedium", "[", 
    RowBox[{"atmosphere", ",", "1.0"}], "]"}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"sellmeierDispersion", "[", 
    RowBox[{
    "a1_", ",", "b1_", ",", "a2_", ",", "b2_", ",", "a3_", ",", "b3_", ",", 
     "___"}], "]"}], ":=", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", "lambda", "}"}], ",", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"lsq", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1000", "lambda"}], ")"}], "^", "2"}]}], "}"}], ",", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"1", "+", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a1", "/", 
             RowBox[{"(", 
              RowBox[{"lsq", "-", "b1"}], ")"}]}], "+", 
            RowBox[{"a2", "/", 
             RowBox[{"(", 
              RowBox[{"lsq", "-", "b2"}], ")"}]}], "+", 
            RowBox[{"a3", "/", 
             RowBox[{"(", 
              RowBox[{"lsq", "-", "b3"}], ")"}]}]}], ")"}], "lsq"}]}], 
        "]"}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"schottDispersion", "[", 
    RowBox[{
    "a0_", ",", "a1_", ",", "a2_", ",", "a3_", ",", "a4_", ",", "a5_", ",", 
     "___"}], "]"}], ":=", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", "lambda", "}"}], ",", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"lsq", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1000", "lambda"}], ")"}], "^", "2"}]}], "}"}], ",", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"a0", "+", 
         RowBox[{"a1", "*", "lsq"}], "+", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"a2", "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"a3", "+", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"a4", "+", 
                  RowBox[{"a5", "/", "lsq"}]}], ")"}], "/", "lsq"}]}], ")"}], 
             "/", "lsq"}]}], ")"}], "/", "lsq"}]}], "]"}]}], "]"}]}], "]"}]}],
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"conradyDispersion", "[", 
    RowBox[{"a_", ",", "b_", ",", "c_", ",", "___"}], "]"}], ":=", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", "lambda", "}"}], ",", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"l", "=", 
         RowBox[{"1000", "lambda"}]}], "}"}], ",", 
       RowBox[{"a", "+", 
        RowBox[{"b", "/", "l"}], "+", 
        RowBox[{"c", "/", 
         RowBox[{"l", "^", "3.5"}]}]}]}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"interpretNumeric", "::", "cannotconvert"}], "=", 
    "\"\<A non-numerical string is found in `1`\>\""}], ";", 
   RowBox[{
    RowBox[{"interpretNumeric", "[", "s_String", "]"}], ":=", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", "=", 
        RowBox[{"ToExpression", "[", 
         RowBox[{"StringReplace", "[", 
          RowBox[{"s", ",", 
           RowBox[{"\"\<E\>\"", "\[Rule]", "\"\<*10^\>\""}]}], "]"}], "]"}]}],
        "}"}], ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"NumberQ", "[", "n", "]"}]}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"interpretNumeric", "::", "cannotconvert"}], ",", "s"}], 
         "]"}], ",", "n"}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"dispersionFunctionFromString", "[", 
    RowBox[{"s_String", ",", "modelFunction_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "sp", "}"}], ",", 
     RowBox[{
      RowBox[{"sp", "=", 
       RowBox[{"StringSplit", "[", "s", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "sp", "]"}], "===", "0"}], "||", 
         RowBox[{
          RowBox[{"First", "[", "sp", "]"}], "=!=", "\"\<CD\>\""}]}], ",", 
        RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Apply", "[", 
       RowBox[{"modelFunction", ",", 
        RowBox[{"Map", "[", 
         RowBox[{"interpretNumeric", ",", 
          RowBox[{"Rest", "[", "sp", "]"}]}], "]"}]}], "]"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"$nameHeader", "=", "\"\<NM*\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"$disersionCoefficientHeader", "=", "\"\<CD*\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"$lambdaRangeHeader", "=", "\"\<LD*\>\""}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"Clear", "[", "dispersionModels", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"dispersionModels", "[", "1", "]"}], "=", "schottDispersion"}], 
  ";", 
  RowBox[{
   RowBox[{"dispersionModels", "[", "2", "]"}], "=", "sellmeierDispersion"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"dispersionModels", "[", "5", "]"}], "=", "conradyDispersion"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"dispersionModels", "[", "_", "]"}], ":=", "$Failed"}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"headerMatchQ", "[", 
    RowBox[{"s_String", ",", "header_String"}], "]"}], ":=", 
   RowBox[{"StringMatchQ", "[", 
    RowBox[{"s", ",", "header"}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"rangeFind", "[", 
   RowBox[{"{", "}"}], "]"}], ":=", "All"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"rangeFind", "[", 
    RowBox[{"{", "s_String", "}"}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"ws", "=", 
       RowBox[{"StringSplit", "[", "s", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"0.001", 
        RowBox[{"interpretNumeric", "[", 
         RowBox[{"ws", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ",", 
       RowBox[{"0.001", 
        RowBox[{"interpretNumeric", "[", 
         RowBox[{"ws", "[", 
          RowBox[{"[", "3", "]"}], "]"}], "]"}]}]}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"readDispersion", "[", 
    RowBox[{"strs", ":", 
     RowBox[{"{", 
      RowBox[{"_String", "..."}], "}"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "frst", ",", "name", ",", "dispf", ",", "dlin", ",", "rlin", ",", 
       "rng"}], "}"}], ",", 
     RowBox[{
      RowBox[{"frst", "=", 
       RowBox[{"StringSplit", "[", 
        RowBox[{"strs", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"name", "=", 
       RowBox[{"frst", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"dispf", "=", 
       RowBox[{"dispersionModels", "[", 
        RowBox[{"ToExpression", "[", 
         RowBox[{"frst", "[", 
          RowBox[{"[", "3", "]"}], "]"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"dispf", "\[Equal]", "$Failed"}], ",", 
        RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dlin", "=", 
       RowBox[{
        RowBox[{"Flatten", "[", 
         RowBox[{"Select", "[", 
          RowBox[{"strs", ",", 
           RowBox[{
            RowBox[{"headerMatchQ", "[", 
             RowBox[{"#", ",", "$disersionCoefficientHeader"}], "]"}], 
            "&"}]}], "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"rlin", "=", 
       RowBox[{"rangeFind", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"Select", "[", 
          RowBox[{"strs", ",", 
           RowBox[{
            RowBox[{"headerMatchQ", "[", 
             RowBox[{"#", ",", "$lambdaRangeHeader"}], "]"}], "&"}]}], "]"}], 
         "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"name", ",", 
        RowBox[{"ToExpression", "[", 
         RowBox[{"toMediumSymbol", "[", "name", "]"}], "]"}], ",", 
        RowBox[{"dispersionFunctionFromString", "[", 
         RowBox[{"dlin", ",", "dispf"}], "]"}], ",", "rlin"}], "}"}]}]}], 
    "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"toMediumSymbol", "[", "s_String", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "sl", "}"}], ",", 
     RowBox[{
      RowBox[{"sl", "=", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringMatchQ", "[", 
           RowBox[{"s", ",", 
            RowBox[{"RegularExpression", "[", "\"\<\\\\d\>\"", "]"}]}], "]"}],
           ",", "\"\<$\>\"", ",", "\"\<\>\""}], "]"}], "<>", 
        RowBox[{"ToLowerCase", "[", "s", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"sl", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<-\>\"", "\[Rule]", "\"\<$\>\""}], ",", 
          RowBox[{"\"\<_\>\"", "\[Rule]", "\"\<$\>\""}]}], "}"}]}], "]"}]}]}],
     "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"mediumCatalog", "[", "]"}], "=", 
   RowBox[{"{", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Clear", "[", "createMediumsFromAGFFile", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"createMediumsFromAGFFile", "::", "cannotopen"}], "=", 
   "\"\<can not open the path `1`\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"createMediumsFromAGFFile", "[", "path_String", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "catalogName", 
      RowBox[{"(*", 
       RowBox[{
       ",", "strs", ",", "lines", ",", "rlines", ",", "blck", ",", "ps"}], 
       "*)"}], "}"}], ",", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"StringMatchQ", "[", 
          RowBox[{
           RowBox[{"FileExtension", "[", "path", "]"}], ",", "\"\<AGF\>\"", 
           ",", 
           RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}], "]"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"parseStringForDispersion", "::", "cannotopen"}], ",", 
           "path"}], "]"}], ";", 
         RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"strs", "=", 
       RowBox[{"ReadList", "[", 
        RowBox[{"path", ",", "String", ",", 
         RowBox[{"RecordSeparators", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<\\n\>\"", ",", "\"\<\\r\\n\>\"", ",", "\"\<\\r\>\""}],
            "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"strs", "===", "$Failed"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"parseStringForDispersion", "::", "cannotopen"}], ",", 
           "path"}], "]"}], ";", 
         RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"createMediumsFromAGFString", "[", 
       RowBox[{"strs", ",", 
        RowBox[{"FileBaseName", "[", "path", "]"}]}], "]"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"createMediumsFromAGFString", "[", 
    RowBox[{
     RowBox[{"agfstrs", ":", 
      RowBox[{"{", 
       RowBox[{"_String", "..."}], "}"}]}], ",", "catalogName_String"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"strs", ",", "lines", ",", "rlines", ",", "blck", ",", "ps"}], 
      "}"}], ",", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"catalogName", "=", 
        RowBox[{"FileBaseName", "[", "catName", "]"}]}], ";"}], "*)"}], 
     RowBox[{
      RowBox[{"strs", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"StringReplace", "[", 
           RowBox[{"#", ",", 
            RowBox[{
             RowBox[{"RegularExpression", "[", "\"\<[[:cntrl:]]\>\"", "]"}], 
             "\[RuleDelayed]", "\"\<\>\""}]}], "]"}], "&"}], ",", "agfstrs"}],
         "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"lines", "=", 
       RowBox[{"SequenceSplit", "[", 
        RowBox[{"strs", ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"x_", "?", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"headerMatchQ", "[", 
               RowBox[{"#", ",", "$nameHeader"}], "]"}], "&"}], ")"}]}], 
           "}"}], "\[RuleDelayed]", 
          RowBox[{"{", "x", "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"rlines", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"headerMatchQ", "[", 
          RowBox[{
           RowBox[{"lines", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "$nameHeader"}], 
          "]"}], ",", "lines", ",", 
         RowBox[{"Rest", "[", "lines", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"blck", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"Flatten", ",", 
         RowBox[{"Partition", "[", 
          RowBox[{"rlines", ",", "2"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ps", "=", 
       RowBox[{"Select", "[", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{"readDispersion", ",", "blck"}], "]"}], ",", 
         RowBox[{
          RowBox[{"#", "=!=", "$Failed"}], "&"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{
        RowBox[{"mediumCatalog", "[", "]"}], ",", "catalogName"}], "]"}], ";",
       "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"mediumCatalog", "[", "catalogName", "]"}], "=", 
       RowBox[{"Map", "[", 
        RowBox[{"First", ",", "ps"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"createMedium", "[", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", 
           RowBox[{"#", "[", 
            RowBox[{"[", "3", "]"}], "]"}], ",", 
           RowBox[{"mediumName", "\[Rule]", 
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ",", 
           RowBox[{"lambdaDomain", "\[Rule]", 
            RowBox[{"#", "[", 
             RowBox[{"[", "4", "]"}], "]"}]}]}], "]"}], "&"}], ",", "ps"}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"ReleaseHold", "[", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Hold", "[", 
           RowBox[{
            RowBox[{"mediumCatalog", "[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "=", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], ",", "ps"}], 
        "]"}], "]"}], ";", "\[IndentingNewLine]", "catalogName"}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"raySet", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"y0_", ",", "z0_"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"yd_", ",", "zd_"}], "}"}], ",", "opt___"}], "]"}], ":=", 
  RowBox[{"ray", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"y0", ",", "z0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"yd", ",", "zd"}], "}"}], ",", "opt"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"raySet", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"y0_", ",", "z0_"}], "}"}], ",", 
     RowBox[{"angleToAxis_", "?", "NumericQ"}], ",", 
     RowBox[{"refractiveIndex_", "?", "NumericQ"}], ",", "opt___"}], "]"}], ":=", 
   RowBox[{"ray", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"y0", ",", "z0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"refractiveIndex", "*", 
        RowBox[{"Sin", "[", "angleToAxis", "]"}]}], ",", 
       RowBox[{"refractiveIndex", "*", 
        RowBox[{"Cos", "[", "angleToAxis", "]"}]}]}], "}"}], ",", "opt"}], 
    "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"appendRayOption", "[", 
    RowBox[{
     RowBox[{"ray", "[", 
      RowBox[{"p_", ",", "d_", ",", "o___"}], "]"}], ",", "opt___"}], "]"}], ":=", 
   RowBox[{"ray", "[", 
    RowBox[{"p", ",", "d", ",", "o", ",", "opt"}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", "domainDefinedMarginalRay", "]"}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"markRayAsDomainDefinedMarginal", "[", "r_ray", "]"}], ":=", 
  RowBox[{"appendRayOption", "[", 
   RowBox[{"r", ",", "domainDefinedMarginalRay"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"raySetAsDomainDefinedMarginal", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"y0_", ",", "z0_"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"yd_", ",", "zd_"}], "}"}], ",", "opt___"}], "]"}], ":=", 
  RowBox[{"raySet", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"y0", ",", "z0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"yd", ",", "zd"}], "}"}], ",", "domainDefinedMarginalRay", ",", 
    "opt"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"domainDefinedMarginalRayQ", "[", 
    RowBox[{"ray", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}], ",", "opt___"}], "]"}], "]"}], ":=", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"{", "opt", "}"}], ",", "domainDefinedMarginalRay"}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"setRefractiveIndexForRay", "[", 
    RowBox[{
     RowBox[{"ray", "[", 
      RowBox[{
       RowBox[{"p", ":", 
        RowBox[{"{", 
         RowBox[{"_", ",", "_"}], "}"}]}], ",", 
       RowBox[{"v", ":", 
        RowBox[{"{", 
         RowBox[{"_", ",", "_"}], "}"}]}], ",", "opt___"}], "]"}], ",", 
     "index_"}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"len", "=", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"v", ".", "v"}], "]"}]}], "}"}], ",", 
     RowBox[{"ray", "[", 
      RowBox[{"p", ",", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"index", "/", "len"}], "*", "#"}], "&"}], ",", "v"}], 
        "]"}], ",", "opt"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"ray", "[", 
    RowBox[{
     RowBox[{"org", ":", 
      RowBox[{"{", 
       RowBox[{"y0_", ",", "z0_"}], "}"}]}], ",", 
     RowBox[{"dir", ":", 
      RowBox[{"{", 
       RowBox[{"yd_", ",", "zd_"}], "}"}]}], ",", "___"}], "]"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"origin", "[", 
   RowBox[{"ray", "[", 
    RowBox[{"org_", ",", "dir_", ",", "___"}], "]"}], "]"}], ":=", 
  "org"}], "\n", 
 RowBox[{
  RowBox[{"heightOfOrigin", "[", 
   RowBox[{"ray", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"h_", ",", "z_"}], "}"}], ",", "_", ",", "___"}], "]"}], "]"}], 
  ":=", "h"}], "\n", 
 RowBox[{
  RowBox[{"direction", "[", 
   RowBox[{"ray", "[", 
    RowBox[{"org_", ",", "dir_", ",", "___"}], "]"}], "]"}], ":=", 
  "dir"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"offsetRay", "[", 
    RowBox[{
     RowBox[{"ray", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"y_", ",", "z_"}], "}"}], ",", "dir_", ",", "opt___"}], "]"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"yoff_", ",", "zoff_"}], "}"}]}], "]"}], ":=", 
   RowBox[{"ray", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"y", "-", "yoff"}], ",", 
       RowBox[{"z", "-", "zoff"}]}], "}"}], ",", "dir", ",", "opt"}], "]"}]}],
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"origin", "[", 
   RowBox[{"stoppedRay", "[", 
    RowBox[{
     RowBox[{"org", ":", 
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}]}], ",", "__"}], "]"}], "]"}], ":=", 
  "org"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"origin", "[", 
    RowBox[{"stoppedRay", "[", "noIntersection", "]"}], "]"}], ":=", 
   RowBox[{"Sequence", "[", "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"parallelToAxisQ", "[", 
    RowBox[{"ray", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"yd_", ",", "_"}], "}"}], ",", "___"}], "]"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"N", "[", "yd", "]"}], "===", "0.0"}], ")"}]}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"declinationForHeight", "[", "r_ray", "]"}], ":=", 
    RowBox[{"Indeterminate", "/;", 
     RowBox[{"parallelToAxisQ", "[", "r", "]"}]}]}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"declinationForHeight", "[", 
   RowBox[{"r", ":", 
    RowBox[{"ray", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"yd_", ",", "_"}], "}"}], ",", "___"}], "]"}]}], "]"}], ":=", 
  "yd"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"signOfCosine", "[", 
    RowBox[{"r", ":", 
     RowBox[{"ray", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"_", ",", "_"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"_", ",", "zd_"}], "}"}], ",", "___"}], "]"}]}], "]"}], ":=", 
   
   RowBox[{"Sign", "[", "zd", "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"offsetBackRay", "[", 
   RowBox[{
    RowBox[{"ray", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"y_", ",", "z_"}], "}"}], ",", "dir_", ",", "opt___"}], "]"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"yoff_", ",", "zoff_"}], "}"}]}], "]"}], ":=", 
  RowBox[{"ray", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"y", "+", "yoff"}], ",", 
      RowBox[{"z", "+", "zoff"}]}], "}"}], ",", "dir", ",", "opt"}], 
   "]"}]}], "\n", 
 RowBox[{
  RowBox[{"offsetBackRay", "[", 
   RowBox[{
    RowBox[{"stoppedRay", "[", "noIntersection", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"yoff_", ",", "zoff_"}], "}"}]}], "]"}], ":=", 
  RowBox[{"stoppedRay", "[", "noIntersection", "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"offsetBackRay", "[", 
    RowBox[{
     RowBox[{"stoppedRay", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"y_", ",", "z_"}], "}"}], ",", "a_"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"yoff_", ",", "zoff_"}], "}"}]}], "]"}], ":=", 
   RowBox[{"stoppedRay", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"y", "+", "yoff"}], ",", 
       RowBox[{"z", "+", "zoff"}]}], "}"}], ",", "a"}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"refractiveIndexFromDirection", "[", 
    RowBox[{"ray", "[", 
     RowBox[{"_", ",", "dir_", ",", "___"}], "]"}], "]"}], ":=", 
   RowBox[{"Sqrt", "[", 
    RowBox[{"dir", ".", "dir"}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"axisCrossingPosition", "[", 
   RowBox[{"ray", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"y_", ",", "z_"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"s_", ",", "c_"}], "}"}], ",", "___"}], "]"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"s", "*", "z"}], "-", 
     RowBox[{"c", "*", "y"}]}], ")"}], "/", "s"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"axisCrossingPosition", "[", 
    RowBox[{"ray", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"y_", ",", "z_"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"s_", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"N", "[", "#", "]"}], "===", "0.0"}], "&"}], ")"}]}], ",",
         "c_"}], "}"}], ",", "___"}], "]"}], "]"}], ":=", "Indeterminate"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"raySegmentCount", "[", 
    RowBox[{"raySequence", "[", 
     RowBox[{"lambda_", ",", "rays_List"}], "]"}], "]"}], ":=", 
   RowBox[{"Length", "[", "rays", "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"opticalPath", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"p1", ":", 
        RowBox[{"{", 
         RowBox[{"_", ",", "z1_"}], "}"}]}], ",", 
       RowBox[{"p2", ":", 
        RowBox[{"{", 
         RowBox[{"_", ",", "z2_"}], "}"}]}]}], "}"}], ",", "refInd_"}], "]"}],
    ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"v", "=", 
       RowBox[{"p1", "-", "p2"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"Sign", "[", 
       RowBox[{"z2", "-", "z1"}], "]"}], "*", 
      RowBox[{"Sqrt", "[", 
       RowBox[{"v", ".", "v"}], "]"}], "refInd"}]}], "]"}]}], 
  RowBox[{"(*", 
   RowBox[{
   "assumed", " ", "rays", " ", "go", " ", "toward", " ", "positive", " ", 
    "z", " ", "direction"}], "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"raySequence", "[", 
    RowBox[{"lambda_", ",", 
     RowBox[{"rays", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"ray", "[", "___", "]"}], "..."}], "}"}]}]}], "]"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"waveLength", "[", 
   RowBox[{"raySequence", "[", 
    RowBox[{"lambda_", ",", "___"}], "]"}], "]"}], ":=", "lambda"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"sequenceOfRays", "[", 
    RowBox[{"raySequence", "[", 
     RowBox[{"lambda_", ",", "rays_List"}], "]"}], "]"}], ":=", 
   RowBox[{"Cases", "[", 
    RowBox[{"rays", ",", 
     RowBox[{"Except", "[", "untraceableRay", "]"}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"opticalPathLength", "[", "rs_raySequence", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sr", ",", "ps", ",", "inds"}], "}"}], ",", 
    RowBox[{
     RowBox[{"sr", "=", 
      RowBox[{"sequenceOfRays", "[", "rs", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ps", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"origin", ",", "sr"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"inds", "=", 
      RowBox[{"Most", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"refractiveIndexFromDirection", ",", "sr"}], "]"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Total", "[", 
      RowBox[{"Thread", "[", 
       RowBox[{"opticalPath", "[", 
        RowBox[{
         RowBox[{"Most", "[", 
          RowBox[{"Transpose", "[", 
           RowBox[{"{", 
            RowBox[{"ps", ",", 
             RowBox[{"RotateLeft", "[", "ps", "]"}]}], "}"}], "]"}], "]"}], 
         ",", "inds"}], "]"}], "]"}], "]"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"opticalPathLengthForHeight", "[", "rs_raySequence", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sr", ",", "ps", ",", "inds"}], "}"}], ",", 
    RowBox[{
     RowBox[{"sr", "=", 
      RowBox[{"sequenceOfRays", "[", "rs", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Cases", "[", 
         RowBox[{"sr", ",", 
          RowBox[{"stoppedRay", "[", "_", "]"}]}], "]"}], "=!=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"Return", "[", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ps", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"origin", ",", "sr"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"inds", "=", 
      RowBox[{"Most", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"refractiveIndexFromDirection", ",", "sr"}], "]"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"heightOfOrigin", "[", 
        RowBox[{"First", "[", "sr", "]"}], "]"}], ",", 
       RowBox[{"Total", "[", 
        RowBox[{"Thread", "[", 
         RowBox[{"opticalPath", "[", 
          RowBox[{
           RowBox[{"Most", "[", 
            RowBox[{"Transpose", "[", 
             RowBox[{"{", 
              RowBox[{"ps", ",", 
               RowBox[{"RotateLeft", "[", "ps", "]"}]}], "}"}], "]"}], "]"}], 
           ",", "inds"}], "]"}], "]"}], "]"}]}], "}"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"opticalPathLengthForHeight", "[", 
   RowBox[{"rs_raySequence", ",", 
    RowBox[{"op_", "?", "opticsQ"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "ppos", "}"}], ",", 
    RowBox[{
     RowBox[{"ppos", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{"positionOfAttributedSurface", "[", 
        RowBox[{"op", ",", "pupilSurface", ",", "True"}], "]"}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ppos", "===", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"Return", "[", 
        RowBox[{"opticalPathLengthForHeight", "[", "rs", "]"}], "]"}]}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"opticalPathLengthForHeight", "[", 
      RowBox[{"rs", ",", 
       RowBox[{
        RowBox[{"ppos", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "+", "1"}]}], "]"}]}]}], 
   "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"opticalPathLengthForHeight", "[", 
    RowBox[{"rs_raySequence", ",", 
     RowBox[{"sn_", "?", "IntegerQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"ppos", ",", "sr", ",", "ps", ",", "inds"}], "}"}], ",", 
     RowBox[{
      RowBox[{"sr", "=", 
       RowBox[{"sequenceOfRays", "[", "rs", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Cases", "[", 
          RowBox[{"sr", ",", 
           RowBox[{"stoppedRay", "[", "_", "]"}]}], "]"}], "=!=", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ps", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"origin", ",", "sr"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"inds", "=", 
       RowBox[{"Most", "[", 
        RowBox[{"Map", "[", 
         RowBox[{"refractiveIndexFromDirection", ",", "sr"}], "]"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"heightOfOrigin", "[", 
         RowBox[{"sr", "[", 
          RowBox[{"[", "sn", "]"}], "]"}], "]"}], ",", 
        RowBox[{"Total", "[", 
         RowBox[{"Thread", "[", 
          RowBox[{"opticalPath", "[", 
           RowBox[{
            RowBox[{"Most", "[", 
             RowBox[{"Transpose", "[", 
              RowBox[{"{", 
               RowBox[{"ps", ",", 
                RowBox[{"RotateLeft", "[", "ps", "]"}]}], "}"}], "]"}], "]"}],
             ",", "inds"}], "]"}], "]"}], "]"}]}], "}"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"opticalPathDifference", "[", 
   RowBox[{"ops", ":", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}], "..."}], "}"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"fitf", ",", "x"}], "}"}], ",", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"Not", "[", 
        RowBox[{"MatrixQ", "[", 
         RowBox[{"ops", ",", "NumberQ"}], "]"}], "]"}], ",", 
       RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"fitf", "=", 
      RowBox[{"Fit", "[", 
       RowBox[{"ops", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "x", ",", 
          RowBox[{"x", "^", "2"}]}], "}"}], ",", "x"}], "]"}]}], ";", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"subtract", " ", "y"}], "-", 
       RowBox[{"and", " ", "z"}], "-", 
       RowBox[{"focus", " ", "position", " ", "moving"}]}], "*)"}], 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "-", 
           RowBox[{"(", 
            RowBox[{"fitf", "/.", 
             RowBox[{"x", "\[Rule]", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}]}], ")"}]}]}], "}"}], "&"}], 
       ",", "ops"}], "]"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"opticalPathDifference", "[", 
   RowBox[{"rss", ":", 
    RowBox[{"{", 
     RowBox[{"_raySequence", "..."}], "}"}]}], "]"}], ":=", 
  RowBox[{"opticalPathDifference", "[", 
   RowBox[{"Map", "[", 
    RowBox[{"opticalPathLengthForHeight", ",", "rss"}], "]"}], "]"}]}], "\n", 

 RowBox[{
  RowBox[{
   RowBox[{"opticalPathDifference", "[", 
    RowBox[{
     RowBox[{"rss", ":", 
      RowBox[{"{", "__raySequence", "}"}]}], ",", 
     RowBox[{"op_", "?", "opticsQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"ppos", ",", "sn", ",", "ops", ",", "fitf", ",", "x"}], "}"}], 
     ",", 
     RowBox[{
      RowBox[{"ppos", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"positionOfAttributedSurface", "[", 
         RowBox[{"op", ",", "pupilSurface", ",", "True"}], "]"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"ppos", "===", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"opticalPathDifference", "[", "rs", "]"}], "]"}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"sn", "=", 
       RowBox[{
        RowBox[{"ppos", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "+", "1"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ops", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"opticalPathLengthForHeight", "[", 
           RowBox[{"#", ",", "sn"}], "]"}], "&"}], ",", "rss"}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"fitf", "=", 
       RowBox[{"Fit", "[", 
        RowBox[{"ops", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "x", ",", 
           RowBox[{"x", "^", "2"}]}], "}"}], ",", "x"}], "]"}]}], ";", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "-", 
            RowBox[{"(", 
             RowBox[{"fitf", "/.", 
              RowBox[{"x", "\[Rule]", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}]}], ")"}]}]}], "}"}], "&"}], 
        ",", "ops"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"logitudinalAberPositionReversed", "[", "rs_raySequence", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sr", ",", "s", ",", "e"}], "}"}], ",", 
    RowBox[{
     RowBox[{"sr", "=", 
      RowBox[{"sequenceOfRays", "[", "rs", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"s", "=", 
      RowBox[{"First", "[", "sr", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"e", "=", 
      RowBox[{"Last", "[", "sr", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"axisCrossingPosition", "[", "e", "]"}], ",", 
       RowBox[{"heightOfOrigin", "[", "s", "]"}]}], "}"}]}]}], "]"}]}], "\n", 

 RowBox[{
  RowBox[{
   RowBox[{"logitudinalAberPositionReversed", "[", 
    RowBox[{"rs_raySequence", ",", 
     RowBox[{"sn_", "?", "IntegerQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sr", ",", "s", ",", "e"}], "}"}], ",", 
     RowBox[{
      RowBox[{"sr", "=", 
       RowBox[{"sequenceOfRays", "[", "rs", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"s", "=", 
       RowBox[{"sr", "[", 
        RowBox[{"[", "sn", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"e", "=", 
       RowBox[{"Last", "[", "sr", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"axisCrossingPosition", "[", "e", "]"}], ",", 
        RowBox[{"heightOfOrigin", "[", "s", "]"}]}], "}"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"longitudinalSphericalAberration", "[", 
    RowBox[{
     RowBox[{"rs", ":", 
      RowBox[{"{", "__raySequence", "}"}]}], ",", 
     RowBox[{"op_", "?", "opticsQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"ppos", ",", "sn"}], "}"}], ",", 
     RowBox[{
      RowBox[{"ppos", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"positionOfAttributedSurface", "[", 
         RowBox[{"op", ",", "pupilSurface", ",", "True"}], "]"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"ppos", "===", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"opticalPathDifference", "[", "rs", "]"}], "]"}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"sn", "=", 
       RowBox[{
        RowBox[{"ppos", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "+", "1"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"logitudinalAberPositionReversed", "[", 
            RowBox[{"#", ",", "sn"}], "]"}], "&"}], ",", "rs"}], "]"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", 
            RowBox[{"-", "1"}], "]"}], "]"}], "\[GreaterEqual]", "0.0"}], 
         "&"}]}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"oscValueReversed", "[", 
   RowBox[{"rs_raySequence", ",", "f_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sr", ",", "s", ",", "e", ",", "de", ",", "h"}], "}"}], ",", 
    RowBox[{
     RowBox[{"sr", "=", 
      RowBox[{"sequenceOfRays", "[", "rs", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"s", "=", 
      RowBox[{"First", "[", "sr", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"h", "=", 
      RowBox[{"heightOfOrigin", "[", "s", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"e", "=", 
      RowBox[{"Last", "[", "sr", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"de", "=", 
      RowBox[{"declinationForHeight", "[", "e", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"de", "=!=", "0.0"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"-", 
            RowBox[{"signOfCosine", "[", "e", "]"}]}], 
           RowBox[{"h", "/", "de"}]}], "-", "f"}], ",", "h"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.0", ",", "h"}], "}"}]}], "]"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"finiteOscValueReversed", "[", 
    RowBox[{"rs_raySequence", ",", 
     RowBox[{"{", 
      RowBox[{"dop_", ",", "dpi_"}], "}"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sr", ",", "so", ",", "si"}], "}"}], ",", 
     RowBox[{
      RowBox[{"sr", "=", 
       RowBox[{"sequenceOfRays", "[", "rs", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"so", "=", 
       RowBox[{"declinationForHeight", "[", 
        RowBox[{"First", "[", "sr", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"si", "=", 
       RowBox[{"declinationForHeight", "[", 
        RowBox[{"Last", "[", "sr", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"si", "=!=", "0.0"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"-", 
             RowBox[{"signOfCosine", "[", 
              RowBox[{"Last", "[", "sr", "]"}], "]"}]}], "dop", "*", 
            RowBox[{"so", "/", "si"}]}], "-", "dpi"}], ",", 
          RowBox[{"dop", "*", "so"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0.0", ",", 
          RowBox[{"dop", "*", "so"}]}], "}"}]}], "]"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"offenceAgainstSineCondition", "[", 
   RowBox[{
    RowBox[{"rs", ":", 
     RowBox[{"{", "__raySequence", "}"}]}], ",", "f_"}], "]"}], ":=", 
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"oscValueReversed", "[", 
        RowBox[{"#", ",", "f"}], "]"}], "&"}], ",", "rs"}], "]"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "[", 
       RowBox[{"[", 
        RowBox[{"-", "1"}], "]"}], "]"}], "\[GreaterEqual]", "0.0"}], "&"}]}],
    "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"offenceAgainstSineCondition", "[", 
    RowBox[{
     RowBox[{"rs", ":", 
      RowBox[{"{", "__raySequence", "}"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"dop_", ",", "dpi_"}], "}"}]}], "]"}], ":=", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"finiteOscValueReversed", "[", 
         RowBox[{"#", ",", 
          RowBox[{"{", 
           RowBox[{"dop", ",", "dpi"}], "}"}]}], "]"}], "&"}], ",", "rs"}], 
      "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", 
         RowBox[{"-", "1"}], "]"}], "]"}], "\[GreaterEqual]", "0.0"}], 
      "&"}]}], "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"Clear", "[", "domainAll", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Interval", "[", "domainAll", "]"}], "^=", 
   RowBox[{"Interval", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}], "]"}]}], ";", 
  RowBox[{
   RowBox[{"Between", "[", "domainAll", "]"}], "^=", 
   RowBox[{"Between", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"domain", "[", 
   RowBox[{"s_", "[", 
    RowBox[{
     RowBox[{"{", "___", "}"}], ",", "_", ",", "explicitDomain_"}], "]"}], 
   "]"}], ":=", 
  RowBox[{"explicitDomain", "/;", 
   RowBox[{"shapeQ", "[", "s", "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"implicitDomain", "[", 
   RowBox[{"s_", "[", 
    RowBox[{
     RowBox[{"{", "___", "}"}], ",", "impdom_", ",", "_"}], "]"}], "]"}], ":=", 
  RowBox[{"impdom", "/;", 
   RowBox[{"shapeQ", "[", "s", "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"insideDomain", "[", 
   RowBox[{"s_", "?", "shapeQ"}], "]"}], ":=", 
  RowBox[{"Between", "[", 
   RowBox[{"domain", "[", "s", "]"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"insideImplicitDomain", "[", 
    RowBox[{"s_", "?", "shapeQ"}], "]"}], ":=", 
   RowBox[{"Between", "[", 
    RowBox[{"implicitDomain", "[", "s", "]"}], "]"}]}], "\[IndentingNewLine]",
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"copyShapeReplacingDomain", "[", 
    RowBox[{
     RowBox[{"s_", "[", 
      RowBox[{
       RowBox[{"p", ":", 
        RowBox[{"{", "___", "}"}]}], ",", "impdom_", ",", "dom_"}], "]"}], 
     ",", "newDom_"}], "]"}], ":=", 
   RowBox[{"s", "[", 
    RowBox[{"p", ",", "impdom", ",", "newDom"}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"planeShape", "[", "]"}], ":=", 
  RowBox[{"plane", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "domainAll", ",", "domainAll"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"planeShape", "[", 
    RowBox[{"dom", ":", 
     RowBox[{"{", 
      RowBox[{"_", ",", "_"}], "}"}]}], "]"}], ":=", 
   RowBox[{"plane", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "domainAll", ",", "dom"}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"perfectThinLensShape", "[", 
   RowBox[{"f_", "?", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"N", "[", "f", "]"}], "===", "0.0"}], "&"}], ")"}]}], "]"}], ":=", 
  RowBox[{"planeShape", "[", "]"}]}], "\n", 
 RowBox[{
  RowBox[{"perfectThinLensShape", "[", 
   RowBox[{"f_", "?", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"N", "[", "#", "]"}], "=!=", "0.0"}], "&"}], ")"}]}], "]"}], ":=", 
  RowBox[{"perfectThinLens", "[", 
   RowBox[{
    RowBox[{"{", "f", "}"}], ",", "domainAll", ",", "domainAll"}], 
   "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"perfectThinLensShape", "[", 
    RowBox[{
     RowBox[{"f_", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"N", "[", "#", "]"}], "=!=", "0.0"}], "&"}], ")"}]}], ",", 
     RowBox[{"dom", ":", 
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}]}]}], "]"}], ":=", 
   RowBox[{"perfectThinLens", "[", 
    RowBox[{
     RowBox[{"{", "f", "}"}], ",", "domainAll", ",", "dom"}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"quadraticImpicitDomain", "[", 
   RowBox[{
    RowBox[{"curv_", "?", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"N", "[", "#", "]"}], "=!=", "0.0"}], "&"}], ")"}]}], ",", 
    RowBox[{"conic_", "?", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"N", "[", "#", "]"}], "\[GreaterEqual]", 
        RowBox[{"-", "1.0"}]}], "&"}], ")"}]}]}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "1"}], "/", 
     RowBox[{"(", 
      RowBox[{"curv", 
       RowBox[{"(", 
        RowBox[{"1", "+", "conic"}], ")"}]}], ")"}]}], ",", 
    RowBox[{"1", "/", 
     RowBox[{"(", 
      RowBox[{"curv", 
       RowBox[{"(", 
        RowBox[{"1", "+", "conic"}], ")"}]}], ")"}]}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"quadraticImpicitDomain", "[", 
    RowBox[{
     RowBox[{"curv_", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"N", "[", "#", "]"}], "=!=", "0.0"}], "&"}], ")"}]}], ",", 
     RowBox[{"conic_", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"N", "[", "#", "]"}], "<", 
         RowBox[{"-", "1.0"}]}], "&"}], ")"}]}]}], "]"}], ":=", "domainAll"}],
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"sphericalShape", "[", 
   RowBox[{"curv_", "?", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"N", "[", "#", "]"}], "===", "0.0"}], "&"}], ")"}]}], "]"}], ":=", 
  RowBox[{"planeShape", "[", "]"}]}], "\n", 
 RowBox[{
  RowBox[{"sphericalShape", "[", 
   RowBox[{
    RowBox[{"curv_", "?", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"N", "[", "#", "]"}], "===", "0.0"}], "&"}], ")"}]}], ",", 
    "dom_"}], "]"}], ":=", 
  RowBox[{"planeShape", "[", "dom", "]"}]}], "\n", 
 RowBox[{
  RowBox[{"sphericalShape", "[", 
   RowBox[{"curv_", "?", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"N", "[", "#", "]"}], "=!=", "0.0"}], "&"}], ")"}]}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"impdom", "=", 
      RowBox[{"quadraticImpicitDomain", "[", 
       RowBox[{"curv", ",", "0.0"}], "]"}]}], "}"}], ",", 
    RowBox[{"spherical", "[", 
     RowBox[{
      RowBox[{"{", "curv", "}"}], ",", "impdom", ",", "impdom"}], "]"}]}], 
   "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"sphericalShape", "[", 
    RowBox[{
     RowBox[{"curv_", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"N", "[", "#", "]"}], "=!=", "0.0"}], "&"}], ")"}]}], ",", 
     RowBox[{"dom", ":", 
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}]}]}], "]"}], ":=", 
   RowBox[{"spherical", "[", 
    RowBox[{
     RowBox[{"{", "curv", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "1.0"}], "/", "curv"}], ",", 
       RowBox[{"1.0", "/", "curv"}]}], "}"}], ",", "dom"}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"curvature", "[", 
   RowBox[{"spherical", "[", 
    RowBox[{
     RowBox[{"{", "curv_", "}"}], ",", "__"}], "]"}], "]"}], ":=", 
  "curv"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"radius", "[", 
    RowBox[{"spherical", "[", 
     RowBox[{
      RowBox[{"{", "curv_", "}"}], ",", "__"}], "]"}], "]"}], ":=", 
   RowBox[{"1.0", "/", "curv"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"quadraticShape", "[", 
   RowBox[{
    RowBox[{"curv_", "?", "NumericQ"}], ",", 
    RowBox[{"conic_", "?", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"N", "[", "#", "]"}], "===", "0.0"}], "&"}], ")"}]}]}], "]"}],
   ":=", 
  RowBox[{"sphericalShape", "[", "curv", "]"}]}], "\n", 
 RowBox[{
  RowBox[{"quadraticShape", "[", 
   RowBox[{
    RowBox[{"curv_", "?", "NumericQ"}], ",", 
    RowBox[{"conic_", "?", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"N", "[", "#", "]"}], "===", "0.0"}], "&"}], ")"}]}], ",", 
    RowBox[{"dom", ":", 
     RowBox[{"{", 
      RowBox[{"_", ",", "_"}], "}"}]}]}], "]"}], ":=", 
  RowBox[{"sphericalShape", "[", 
   RowBox[{"curv", ",", "dom"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"quadraticShape", "[", 
   RowBox[{
    RowBox[{"curv_", "?", "NumericQ"}], ",", 
    RowBox[{"conic_", "?", "NumericQ"}]}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"dom", "=", 
      RowBox[{"quadraticImpicitDomain", "[", 
       RowBox[{"curv", ",", "conic"}], "]"}]}], "}"}], ",", 
    RowBox[{"quadratic", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"curv", ",", "conic"}], "}"}], ",", "dom", ",", "dom"}], 
     "]"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"quadraticShape", "[", 
    RowBox[{
     RowBox[{"curv_", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"N", "[", "#", "]"}], "=!=", "0.0"}], "&"}], ")"}]}], ",", 
     RowBox[{"conic_", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"N", "[", "#", "]"}], "=!=", "0.0"}], "&"}], ")"}]}], ",", 
     RowBox[{"dom", ":", 
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}]}]}], "]"}], ":=", 
   RowBox[{"quadratic", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"curv", ",", "conic"}], "}"}], ",", 
     RowBox[{"quadraticImpicitDomain", "[", 
      RowBox[{"curv", ",", "conic"}], "]"}], ",", "dom"}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"curvature", "[", 
   RowBox[{"quadratic", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"curv_", ",", "_"}], "}"}], ",", "__"}], "]"}], "]"}], ":=", 
  "curv"}], "\n", 
 RowBox[{
  RowBox[{"radius", "[", 
   RowBox[{"quadratic", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"curv_", ",", "_"}], "}"}], ",", "__"}], "]"}], "]"}], ":=", 
  RowBox[{"1.0", "/", "curv"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"conicConstant", "[", 
    RowBox[{"quadratic", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"_", ",", "conic_"}], "}"}], ",", "___"}], "]"}], "]"}], ":=", 
   "conic"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"parametricShape", "[", 
   RowBox[{"f_Function", ",", 
    RowBox[{"dom", ":", 
     RowBox[{"{", 
      RowBox[{"_", ",", "_"}], "}"}]}]}], "]"}], ":=", 
  RowBox[{"parametric", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"f", ",", 
      RowBox[{"Evaluate", "[", 
       RowBox[{
        RowBox[{"Derivative", "[", "1", "]"}], "[", "f", "]"}], "]"}]}], 
     "}"}], ",", "dom", ",", "dom"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"parametricShape", "[", "f_InterpolatingFunction", "]"}], ":=", 
  RowBox[{"parametric", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"f", ",", 
      RowBox[{"Evaluate", "[", 
       RowBox[{
        RowBox[{"Derivative", "[", "1", "]"}], "[", "f", "]"}], "]"}]}], 
     "}"}], ",", 
    RowBox[{"interpolationDomain", "[", "f", "]"}], ",", 
    RowBox[{"interpolationDomain", "[", "f", "]"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"parametricShape", "[", 
    RowBox[{"f_InterpolatingFunction", ",", 
     RowBox[{"dom", ":", 
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}]}]}], "]"}], ":=", 
   RowBox[{"parametric", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"f", ",", 
       RowBox[{"Evaluate", "[", 
        RowBox[{
         RowBox[{"Derivative", "[", "1", "]"}], "[", "f", "]"}], "]"}]}], 
      "}"}], ",", 
     RowBox[{"interpolationDomain", "[", "f", "]"}], ",", "dom"}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"individualOffset", "[", 
   RowBox[{"parametric", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"f_", ",", "_"}], "}"}], ",", "___"}], "]"}], "]"}], ":=", 
  RowBox[{"f", "[", "0.0", "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"individualOffset", "[", "_", "]"}], ":=", "0.0"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"shapeFunction", "[", 
   RowBox[{"parametric", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"f_", ",", "_"}], "}"}], ",", "___"}], "]"}], "]"}], ":=", 
  "f"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"shapeDerivativeFunction", "[", 
    RowBox[{"parametric", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"_", ",", "df_"}], "}"}], ",", "__"}], "]"}], "]"}], ":=", 
   "df"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"shapeQ", "[", "spherical", "]"}], ":=", "True"}], "\n", 
 RowBox[{
  RowBox[{"shapeQ", "[", "quadratic", "]"}], ":=", "True"}], "\n", 
 RowBox[{
  RowBox[{"shapeQ", "[", "plane", "]"}], ":=", "True"}], "\n", 
 RowBox[{
  RowBox[{"shapeQ", "[", "perfectThinLens", "]"}], ":=", "True"}], "\n", 
 RowBox[{
  RowBox[{"shapeQ", "[", "parametric", "]"}], ":=", "True"}], "\n", 
 RowBox[{
  RowBox[{"shapeQ", "[", 
   RowBox[{"spherical", "[", "___", "]"}], "]"}], ":=", "True"}], "\n", 
 RowBox[{
  RowBox[{"shapeQ", "[", 
   RowBox[{"quadratic", "[", "___", "]"}], "]"}], ":=", "True"}], "\n", 
 RowBox[{
  RowBox[{"shapeQ", "[", 
   RowBox[{"plane", "[", "___", "]"}], "]"}], ":=", "True"}], "\n", 
 RowBox[{
  RowBox[{"shapeQ", "[", 
   RowBox[{"perfectThinLens", "[", "___", "]"}], "]"}], ":=", 
  "True"}], "\n", 
 RowBox[{
  RowBox[{"shapeQ", "[", 
   RowBox[{"parametric", "[", "___", "]"}], "]"}], ":=", "True"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"shapeQ", "[", "_", "]"}], ":=", "False"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"shapeFunctionToDraw", "[", "s_plane", "]"}], "[", "h_", "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"0", ",", "h"}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"shapeFunctionToDraw", "[", "s_perfectThinLens", "]"}], "[", "h_", 
   "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"0", ",", "h"}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"shapeFunctionToDraw", "[", "s_spherical", "]"}], "[", "h_", "]"}],
   ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"curvature", "[", "s", "]"}], "*", 
       RowBox[{"h", "^", "2"}]}], ")"}], "/", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"1", "-", 
         RowBox[{
          RowBox[{
           RowBox[{"curvature", "[", "s", "]"}], "^", "2"}], "*", 
          RowBox[{"h", "^", "2"}]}]}], "]"}]}], ")"}]}], ",", "h"}], 
   "}"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"shapeFunctionToDraw", "[", "s_quadratic", "]"}], "[", "h_", "]"}],
   ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"curvature", "[", "s", "]"}], "*", 
       RowBox[{"h", "^", "2"}]}], ")"}], "/", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"1", "-", 
         RowBox[{
          RowBox[{
           RowBox[{"curvature", "[", "s", "]"}], "^", "2"}], "*", 
          RowBox[{"h", "^", "2"}], "*", 
          RowBox[{"(", 
           RowBox[{"1", "+", 
            RowBox[{"conicConstant", "[", "s", "]"}]}], ")"}]}]}], "]"}]}], 
      ")"}]}], ",", "h"}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"shapeFunctionToDraw", "[", "s_parametric", "]"}], "[", "h_", 
    "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"shapeFunction", "[", "s", "]"}], "[", "h", "]"}], ",", "h"}], 
    "}"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"marginalPosition", "[", 
    RowBox[{"s_", "?", "shapeQ"}], "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"shapeFunctionToDraw", "[", "s", "]"}], ",", 
     RowBox[{"domain", "[", "s", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Protect", "[", "noNormalVector", "]"}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"normalVector", "[", 
    RowBox[{
     RowBox[{"plane", "[", "__", "]"}], ",", "_"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"0.0", ",", "1.0"}], "}"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"\.10normalVector", "[", 
    RowBox[{
     RowBox[{"perfectThinLens", "[", "__", "]"}], ",", "_"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"0.0", ",", "1.0"}], "}"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"normalVector", "[", 
   RowBox[{"s_spherical", ",", "h_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"crv", ",", "v", ",", "sq"}], "}"}], ",", 
     RowBox[{
      RowBox[{"crv", "=", 
       RowBox[{"curvature", "[", "s", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"v", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "h"}], "*", 
          RowBox[{
           RowBox[{"Sqrt", "[", 
            RowBox[{"1.0", "-", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"crv", "*", "h"}], ")"}], "^", "2"}]}], "]"}], "/", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"1.0", "/", "crv"}], "-", 
             RowBox[{"crv", "*", 
              RowBox[{"h", "^", "2"}]}]}], ")"}]}]}], ",", "1.0"}], "}"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"sq", "=", 
       RowBox[{"v", ".", "v"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"v", "/", 
       RowBox[{"Sqrt", "[", "sq", "]"}]}]}]}], "]"}], "/;", 
   RowBox[{
    RowBox[{"insideImplicitDomain", "[", "s", "]"}], "[", "h", 
    "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"normalVector", "[", 
    RowBox[{"s_spherical", ",", "h_"}], "]"}], ":=", 
   RowBox[{"noNormalVector", "/;", 
    RowBox[{"(", 
     RowBox[{"!", 
      RowBox[{
       RowBox[{"insideImplicitDomain", "[", "s", "]"}], "[", "h", "]"}]}], 
     ")"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"normalVector", "[", 
   RowBox[{"q_quadratic", ",", "h_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"crv", ",", "con", ",", "v", ",", "sq"}], "}"}], ",", 
     RowBox[{
      RowBox[{"crv", "=", 
       RowBox[{"curvature", "[", "q", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"con", "=", 
       RowBox[{"conicConstant", "[", "q", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"v", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "h"}], "*", 
          RowBox[{
           RowBox[{"Sqrt", "[", 
            RowBox[{"1.0", "-", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"1.0", "+", "con"}], ")"}], 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"crv", "*", "h"}], ")"}], "^", "2"}]}]}], "]"}], "/", 
           
           RowBox[{"(", 
            RowBox[{
             RowBox[{"1.0", "/", "crv"}], "-", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"1.0", "+", "con"}], ")"}], "*", "crv", "*", 
              RowBox[{"h", "^", "2"}]}]}], ")"}]}]}], ",", "1.0"}], "}"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"sq", "=", 
       RowBox[{"v", ".", "v"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"v", "/", 
       RowBox[{"Sqrt", "[", "sq", "]"}]}]}]}], "]"}], "/;", 
   RowBox[{
    RowBox[{"insideImplicitDomain", "[", "q", "]"}], "[", "h", 
    "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"normalVector", "[", 
    RowBox[{"q_quadratic", ",", "h_"}], "]"}], ":=", 
   RowBox[{"noNormalVector", "/;", 
    RowBox[{"(", 
     RowBox[{"!", 
      RowBox[{
       RowBox[{"insideImplicitDomain", "[", "q", "]"}], "[", "h", "]"}]}], 
     ")"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"normalVector", "[", 
   RowBox[{"p_parametric", ",", "h_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"v", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{
           RowBox[{"shapeDerivativeFunction", "[", "p", "]"}], "[", "h", 
           "]"}]}], ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"v", "/", 
      RowBox[{"Sqrt", "[", 
       RowBox[{"v", ".", "v"}], "]"}]}]}], "]"}], "/;", 
   RowBox[{
    RowBox[{"insideImplicitDomain", "[", "p", "]"}], "[", "h", 
    "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"normalVector", "[", 
    RowBox[{"p_parametric", ",", "h_"}], "]"}], ":=", 
   RowBox[{"noNormalVector", "/;", 
    RowBox[{"(", 
     RowBox[{"!", 
      RowBox[{
       RowBox[{"insideImplicitDomain", "[", "p", "]"}], "[", "h", "]"}]}], 
     ")"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Protect", "[", "totalReflection", "]"}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"reflectedVector", "[", 
    RowBox[{
     RowBox[{"plane", "[", "__", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"iind_", ",", "oind_"}], "}"}], ",", "h_", ",", 
     RowBox[{"r", ":", 
      RowBox[{"{", 
       RowBox[{"ry_", ",", "rz_"}], "}"}]}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sq", "=", 
       RowBox[{
        RowBox[{"oind", "^", "2"}], "-", 
        RowBox[{"iind", "^", "2"}], "+", 
        RowBox[{"rz", "^", "2"}]}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"sq", "<", "0.0"}], ",", "$Failed", ",", 
       RowBox[{"{", 
        RowBox[{"ry", ",", 
         RowBox[{"Sqrt", "[", "sq", "]"}]}], "}"}]}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"reflectedVector", "[", 
    RowBox[{
     RowBox[{"perfectThinLens", "[", 
      RowBox[{
       RowBox[{"{", "f_", "}"}], ",", "__"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"iind_", ",", "oind_"}], "}"}], ",", "h_", ",", 
     RowBox[{"r", ":", 
      RowBox[{"{", 
       RowBox[{"ry_", ",", "rz_"}], "}"}]}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sq", "=", 
       RowBox[{
        RowBox[{"Sqrt", "[", 
         RowBox[{
          RowBox[{"f", "^", "2"}], "+", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"h", "-", 
             RowBox[{"f", "*", "ry"}]}], ")"}], "^", "2"}]}], "]"}], 
        RowBox[{"oind", "/", "iind"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"f", "*", "ry"}], "-", "h"}], ")"}], "/", "sq"}], ",", 
       RowBox[{"f", "/", "sq"}]}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"reflectedVector", "[", 
    RowBox[{
     RowBox[{"s_", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"spherical", ",", "quadratic", ",", "parametric"}], "}"}], 
          ",", 
          RowBox[{"Head", "[", "#", "]"}]}], "]"}], "&"}], ")"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"iind_", ",", "oind_"}], "}"}], ",", "h_", ",", 
     RowBox[{"r", ":", 
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"v", ",", "sq", ",", "com", ",", "iprod"}], "}"}], ",", 
     RowBox[{
      RowBox[{"v", "=", 
       RowBox[{"normalVector", "[", 
        RowBox[{"s", ",", "h"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"v", "===", "noNormalVector"}], ",", 
        RowBox[{"Return", "[", "noNormalVector", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"iprod", "=", 
       RowBox[{"r", ".", "v"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"sq", "=", 
       RowBox[{
        RowBox[{"oind", "^", "2"}], "-", 
        RowBox[{"iind", "^", "2"}], "+", 
        RowBox[{"iprod", "^", "2"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"sq", "<", "0.0"}], ",", 
        RowBox[{"Return", "[", "totalReflection", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"com", "=", 
       RowBox[{
        RowBox[{"Sqrt", "[", "sq", "]"}], "-", "iprod"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"r", "+", 
       RowBox[{"v", "*", "com"}]}]}]}], "]"}]}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"reflectedVector", "[", 
     RowBox[{"q_quadratic", ",", 
      RowBox[{"{", 
       RowBox[{"iind_", ",", "oind_"}], "}"}], ",", "h_", ",", 
      RowBox[{"r", ":", 
       RowBox[{"{", 
        RowBox[{"_", ",", "_"}], "}"}]}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"v", ",", "sq", ",", "com", ",", "iprod"}], "}"}], ",", 
        RowBox[{
         RowBox[{"v", "=", 
          RowBox[{"normalVector", "[", 
           RowBox[{"q", ",", "h"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"v", "===", "noNormalVector"}], ",", 
           RowBox[{"Return", "[", "noNormalVector", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"iprod", "=", 
          RowBox[{"r", ".", "v"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"sq", "=", 
          RowBox[{
           RowBox[{"oind", "^", "2"}], "-", 
           RowBox[{"iind", "^", "2"}], "+", 
           RowBox[{"iprod", "^", "2"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"sq", "<", "0.0"}], ",", 
           RowBox[{"Return", "[", "totalReflection", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"com", "=", 
          RowBox[{
           RowBox[{"Sqrt", "[", "sq", "]"}], "-", "iprod"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"r", "+", 
          RowBox[{"v", "*", "com"}]}]}]}], "]"}], " ", 
      RowBox[{"reflectedVector", "[", 
       RowBox[{"p_parametric", ",", 
        RowBox[{"{", 
         RowBox[{"iind_", ",", "oind_"}], "}"}], ",", "h_", ",", 
        RowBox[{"r", ":", 
         RowBox[{"{", 
          RowBox[{"_", ",", "_"}], "}"}]}]}], "]"}]}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"v", ",", "sq", ",", "com", ",", "iprod"}], "}"}], ",", 
       RowBox[{
        RowBox[{"v", "=", 
         RowBox[{"normalVector", "[", 
          RowBox[{"p", ",", "h"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"v", "===", "noNormalVector"}], ",", 
          RowBox[{"Return", "[", "noNormalVector", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"iprod", "=", 
         RowBox[{"r", ".", "v"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"sq", "=", 
         RowBox[{
          RowBox[{"oind", "^", "2"}], "-", 
          RowBox[{"iind", "^", "2"}], "+", 
          RowBox[{"iprod", "^", "2"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"sq", "<", "0.0"}], ",", 
          RowBox[{"Return", "[", "totalReflection", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"com", "=", 
         RowBox[{
          RowBox[{"Sqrt", "[", "sq", "]"}], "-", "iprod"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "+", 
         RowBox[{"v", "*", "com"}]}]}]}], "]"}]}]}], "*)"}], 
  "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Protect", "[", "noIntersection", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"intersection", "[", 
    RowBox[{
     RowBox[{"plane", "[", "__", "]"}], ",", 
     RowBox[{"ray", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"yg_", ",", "zg_"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"yd_", ",", "zd_"}], "}"}], ",", "opt___"}], "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "t", "}"}], ",", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"N", "[", "zd", "]"}], "===", "0.0"}], ",", 
        RowBox[{"Return", "[", "noIntersection", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"yg", "-", 
         RowBox[{"yd", "*", 
          RowBox[{"zg", "/", "zd"}]}]}], ",", "0.0"}], "}"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"intersection", "[", 
    RowBox[{
     RowBox[{"perfectThinLens", "[", "__", "]"}], ",", 
     RowBox[{"ray", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"yg_", ",", "zg_"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"yd_", ",", "zd_"}], "}"}], ",", "opt___"}], "]"}]}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"yg", "-", 
      RowBox[{"zg", "*", "yd"}]}], ",", "0.0"}], "}"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"intersection", "[", 
    RowBox[{"s_spherical", ",", 
     RowBox[{"ray", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"yg_", ",", "zg_"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"yd_", ",", "zd_"}], "}"}], ",", "opt___"}], "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"crv", ",", "isq", ",", "a", ",", "pos"}], "}"}], ",", 
     RowBox[{
      RowBox[{"crv", "=", 
       RowBox[{"curvature", "[", "s", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"isq", "=", 
       RowBox[{
        RowBox[{"zd", "^", "2"}], "-", 
        RowBox[{
         RowBox[{"crv", "^", "2"}], "*", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"yg", "*", "zd"}], "-", 
            RowBox[{"yd", "*", "zg"}]}], ")"}], "^", "2"}]}], "+", 
        RowBox[{"2", "*", "crv", "*", "yd", "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{"yg", "*", "zd"}], ")"}]}], "+", 
           RowBox[{"yd", "*", "zg"}]}], ")"}]}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"isq", "<", "0.0"}], ",", 
        RowBox[{"Return", "[", "noIntersection", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"a", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"zd", "-", 
          RowBox[{"crv", "*", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"yd", "*", "yg"}], "+", 
             RowBox[{"zd", "*", "zg"}]}], ")"}]}], "-", 
          RowBox[{"Sqrt", "[", "isq", "]"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"crv", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"yd", "^", "2"}], "+", 
            RowBox[{"zd", "^", "2"}]}], ")"}]}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"pos", "=", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"yg", ",", "zg"}], "}"}], "+", 
        RowBox[{"a", 
         RowBox[{"{", 
          RowBox[{"yd", ",", "zd"}], "}"}]}]}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"insideImplicitDomain", "[", "s", "]"}], "[", 
         RowBox[{"pos", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", "pos", ",", 
        "noIntersection"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"intersection", "[", 
    RowBox[{"q_quadratic", ",", 
     RowBox[{"ray", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"yg_", ",", "zg_"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"yd_", ",", "zd_"}], "}"}], ",", "opt___"}], "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"crv", ",", "con", ",", "isq", ",", "a", ",", "pos"}], "}"}], 
     ",", 
     RowBox[{
      RowBox[{"crv", "=", 
       RowBox[{"curvature", "[", "q", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"con", "=", 
       RowBox[{"conicConstant", "[", "q", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"isq", "=", 
       RowBox[{
        RowBox[{"zd", "^", "2"}], "-", 
        RowBox[{
         RowBox[{"crv", "^", "2"}], "*", 
         RowBox[{"(", 
          RowBox[{"1", "+", "con"}], ")"}], "*", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"yg", "*", "zd"}], "-", 
            RowBox[{"yd", "*", "zg"}]}], ")"}], "^", "2"}]}], "+", 
        RowBox[{"2", "*", "crv", "*", "yd", "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"(", 
             RowBox[{"yg", "*", "zd"}], ")"}]}], "+", 
           RowBox[{"yd", "*", "zg"}]}], ")"}]}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"isq", "<", "0.0"}], ",", 
        RowBox[{"Return", "[", "noIntersection", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"a", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"zd", "-", 
          RowBox[{"crv", "*", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"yd", "*", "yg"}], "+", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"1", "+", "con"}], ")"}], "*", "zd", "*", "zg"}]}], 
            ")"}]}], "-", 
          RowBox[{"Sqrt", "[", "isq", "]"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"crv", "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"yd", "^", "2"}], "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "+", "con"}], ")"}], "*", 
             RowBox[{"zd", "^", "2"}]}]}], ")"}]}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"pos", "=", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"yg", ",", "zg"}], "}"}], "+", 
        RowBox[{"a", 
         RowBox[{"{", 
          RowBox[{"yd", ",", "zd"}], "}"}]}]}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"insideImplicitDomain", "[", "q", "]"}], "[", 
         RowBox[{"pos", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", "pos", ",", 
        "noIntersection"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"heightInDomain", "[", 
   RowBox[{"height_", ",", 
    RowBox[{"dom", ":", 
     RowBox[{"{", 
      RowBox[{"_", ",", "_"}], "}"}]}]}], "]"}], ":=", 
  RowBox[{"height", "/;", 
   RowBox[{
    RowBox[{"Between", "[", "dom", "]"}], "[", "height", "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"heightInDomain", "[", 
   RowBox[{"height_", ",", 
    RowBox[{"{", 
     RowBox[{"hmin_", ",", "hmax_"}], "}"}]}], "]"}], ":=", 
  RowBox[{"hmin", "/;", 
   RowBox[{"height", "<", "hmin"}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"heightInDomain", "[", 
    RowBox[{"height_", ",", 
     RowBox[{"{", 
      RowBox[{"hmin_", ",", "hmax_"}], "}"}]}], "]"}], ":=", 
   RowBox[{"hmax", "/;", 
    RowBox[{"hmax", "<", "height"}]}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"intersection", "[", 
    RowBox[{"p_parametric", ",", 
     RowBox[{"ray", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"yg_", ",", "zg_"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"yd_", ",", "zd_"}], "}"}], ",", "opt___"}], "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"f", ",", "y", ",", "ini", ",", "hsol"}], "}"}], ",", 
     RowBox[{
      RowBox[{"ini", "=", 
       RowBox[{"heightInDomain", "[", 
        RowBox[{
         RowBox[{"yg", "-", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"yd", "*", "zg"}], ")"}], "/", "zd"}]}], ",", 
         RowBox[{"implicitDomain", "[", "p", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"f", "=", 
       RowBox[{"shapeFunction", "[", "p", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"hsol", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"N", "[", "yd", "]"}], "===", "0.0"}], ",", "yg", ",", 
         RowBox[{"y", "/.", 
          RowBox[{"FindRoot", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"f", "[", "y", "]"}], "\[Equal]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"y", " ", "zd"}], "-", 
                RowBox[{"yg", "*", "zd"}], "+", 
                RowBox[{"yd", "*", "zg"}]}], ")"}], "/", "yd"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"y", ",", "ini"}], "}"}]}], "]"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"insideImplicitDomain", "[", "p", "]"}], "[", "hsol", "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"hsol", ",", 
          RowBox[{"f", "[", "hsol", "]"}]}], "}"}], ",", "noIntersection"}], 
       "]"}]}]}], "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"surfaceQ", "[", "_", "]"}], ":=", "False"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "createSurface", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"surfaceComment", "\[Rule]", "\"\<\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"createSurface", "[", 
   RowBox[{
    RowBox[{"surfaceSymbol_", "?", "canBeObjectSymbol"}], ",", 
    "surfaceShape_", ",", 
    RowBox[{"position", ":", 
     RowBox[{"{", 
      RowBox[{"_", ",", "_"}], "}"}]}], ",", "opt___"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"surfaceQ", "[", "surfaceSymbol", "]"}], "^=", "True"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"surfaceSymbol", "[", "shape", "]"}], "=", "surfaceShape"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"surfaceSymbol", "[", "origin", "]"}], "=", "position"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"surfaceSymbol", "[", "surfaceComment", "]"}], "=", 
      RowBox[{
       RowBox[{"surfaceComment", "/.", 
        RowBox[{"{", "opt", "}"}]}], "/.", 
       RowBox[{"{", 
        RowBox[{"surfaceComment", "\[Rule]", 
         RowBox[{"ToString", "[", "surfaceComment", "]"}]}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", "surfaceSymbol"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"inDomainQ", "[", 
   RowBox[{
    RowBox[{"surface_", "?", "surfaceQ"}], ",", "height_"}], "]"}], ":=", 
  RowBox[{"Between", "[", 
   RowBox[{"height", ",", 
    RowBox[{"surface", "[", "domain", "]"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"nearestHeight", "[", 
   RowBox[{
    RowBox[{"surface_", "?", "surfaceQ"}], ",", "height_"}], "]"}], ":=", 
  RowBox[{"height", "/;", 
   RowBox[{"inDomain", "[", 
    RowBox[{"surface", ",", "height"}], "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"nearestHeight", "[", 
   RowBox[{
    RowBox[{"surface_", "?", "surfaceQ"}], ",", "height_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"surface", "[", "domain", "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}], "/;", 
   RowBox[{"height", "<", 
    RowBox[{
     RowBox[{"surface", "[", "domain", "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"nearestHeight", "[", 
    RowBox[{
     RowBox[{"surface_", "?", "surfaceQ"}], ",", "height_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"surface", "[", "domain", "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"-", "1"}], "]"}], "]"}], "/;", 
    RowBox[{
     RowBox[{
      RowBox[{"surface", "[", "domain", "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"-", "1"}], "]"}], "]"}], "<", "height"}]}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"clearAperture", "[", 
    RowBox[{"surf_", "?", "surfaceQ"}], "]"}], ":=", 
   RowBox[{"domain", "[", 
    RowBox[{"surf", "[", "shape", "]"}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"surfacePosition", "[", 
    RowBox[{"surf_", "?", "surfaceQ"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"surf", "[", "origin", "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"-", "1"}], "]"}], "]"}], "+", 
    RowBox[{"individualOffset", "[", 
     RowBox[{"surf", "[", "shape", "]"}], "]"}]}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"marginalPositionOfSurface", "[", 
    RowBox[{"s_", "?", "surfaceQ"}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"p", "=", 
       RowBox[{"surfacePosition", "[", "s", "]"}]}], "}"}], ",", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "p"}], "}"}], "+", "#"}], "&"}], ",", 
       RowBox[{"marginalPosition", "[", 
        RowBox[{"s", "[", "shape", "]"}], "]"}]}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"surfaceShapeType", "[", 
    RowBox[{"surf_", "?", "surfaceQ"}], "]"}], ":=", 
   RowBox[{"Head", "[", 
    RowBox[{"surf", "[", "shape", "]"}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"attachAttributeToSurface", "[", 
    RowBox[{
     RowBox[{"surfaceSymbol_", "?", "surfaceQ"}], ",", 
     "attributeSymbol_Symbol", ",", "attributeValue_"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"surfaceSymbol", "[", "attributeSymbol", "]"}], "=", 
     "attributeValue"}], ")"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"setDomain", "[", 
    RowBox[{
     RowBox[{"surface_", "?", "surfaceQ"}], ",", "pos_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"h", ",", "dom"}], "}"}], ",", 
     RowBox[{
      RowBox[{"h", "=", 
       RowBox[{"pos", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"dom", "=", 
         RowBox[{"domain", "[", 
          RowBox[{"surface", "[", "shape", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"dom", "=!=", "domainAll"}], ")"}], "&&", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"dom", "[", 
              RowBox[{"[", 
               RowBox[{"-", "1"}], "]"}], "]"}], "<", "h"}], ")"}]}], 
          ","}]}]}], "*)"}], 
      RowBox[{
       RowBox[{"surface", "[", "shape", "]"}], "=", 
       RowBox[{"copyShapeReplacingDomain", "[", 
        RowBox[{
         RowBox[{"surface", "[", "shape", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "h"}], ",", "h"}], "}"}]}], "]"}]}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"reflectedRay", "[", 
     RowBox[{"surface_", "?", "surfaceQ"}], "]"}], "[", 
    RowBox[{
     RowBox[{"r", ":", 
      RowBox[{"ray", "[", 
       RowBox[{"_", ",", "_", ",", "opt___"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"inputIndex_", ",", "outputIndex_"}], "}"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"pos", ",", "rv"}], "}"}], ",", 
     RowBox[{
      RowBox[{"pos", "=", 
       RowBox[{"intersection", "[", 
        RowBox[{
         RowBox[{"surface", "[", "shape", "]"}], ",", "r"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"pos", "===", "noIntersection"}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"stoppedRay", "[", "noIntersection", "]"}], "]"}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"domainDefinedMarginalRayQ", "[", "r", "]"}], ",", 
        RowBox[{"setDomain", "[", 
         RowBox[{"surface", ",", "pos"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"rv", "=", 
       RowBox[{"reflectedVector", "[", 
        RowBox[{
         RowBox[{"surface", "[", "shape", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"inputIndex", ",", "outputIndex"}], "}"}], ",", 
         RowBox[{"pos", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{"direction", "[", "r", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"rv", "===", "noNormalVector"}], "||", 
         RowBox[{"rv", "===", "totalReflection"}]}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"stoppedRay", "[", 
          RowBox[{"pos", ",", "rv"}], "]"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ray", "[", 
       RowBox[{"pos", ",", "rv", ",", "opt"}], "]"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"opticsQ", "[", "_", "]"}], ":=", "False"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"createOptics", "[", 
    RowBox[{
     RowBox[{"opticsSymbol_", "?", "canBeObjectSymbol"}], ",", 
     RowBox[{"seq", ":", 
      RowBox[{"{", "___", "}"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"meds", ",", "surfs"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"meds", ",", "surfs"}], "}"}], "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"Partition", "[", 
         RowBox[{"seq", ",", "2"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"Apply", "[", 
          RowBox[{"And", ",", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{"mediumQ", ",", "meds"}], "]"}], ",", 
             RowBox[{"Map", "[", 
              RowBox[{"surfaceQ", ",", "surfs"}], "]"}]}], "]"}]}], "]"}], 
         "]"}], ",", 
        RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"opticsQ", "[", "opticsSymbol", "]"}], "^=", "True"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"opticsSymbol", "[", "mediums", "]"}], "=", "meds"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"opticsSymbol", "[", "surfaces", "]"}], "=", "surfs"}], ";", 
      "\[IndentingNewLine]", "opticsSymbol"}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"positionOfAttributedSurface", "[", 
    RowBox[{
     RowBox[{"op_", "?", "opticsQ"}], ",", "attributeSymbol_Symbol", ",", 
     "attributeValue_"}], "]"}], ":=", 
   RowBox[{"Position", "[", 
    RowBox[{
     RowBox[{"op", "[", "surfaces", "]"}], ",", 
     RowBox[{"_", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", "attributeSymbol", "]"}], "===", 
         "attributeValue"}], "&"}], ")"}]}]}], "]"}]}], "\[IndentingNewLine]",
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"setPupil", "::", "nosurface"}], "=", 
   "\"\<optics does not have a surface `1`\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"setPupil", "[", 
    RowBox[{
     RowBox[{"opticsSymbol_", "?", "opticsQ"}], ",", 
     RowBox[{"surfaceSymbol_", "?", "surfaceQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"poss", ",", "surf"}], "}"}], ",", 
     RowBox[{
      RowBox[{"poss", "=", 
       RowBox[{"positionOfAttributedSurface", "[", 
        RowBox[{"opticsSymbol", ",", "pupilSurface", ",", "True"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"poss", "=!=", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{
         RowBox[{"surfs", "=", 
          RowBox[{"Extract", "[", 
           RowBox[{
            RowBox[{"opticsSymbol", "[", "surfaces", "]"}], ",", "poss"}], 
           "]"}]}], ";", 
         RowBox[{"ReleaseHold", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Hold", "[", 
              RowBox[{
               RowBox[{"#", "[", "pupilSurface", "]"}], "=", "False"}], "]"}],
              "&"}], ",", "surfs"}], "]"}], "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"opticsSymbol", "[", "surfaces", "]"}], ",", 
          "surfaceSymbol"}], "]"}], ",", 
        RowBox[{
         RowBox[{"surfaceSymbol", "[", "pupilSurface", "]"}], "=", "True"}], 
        ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"setPupil", "::", "nosurface"}], ",", "surfaceSymbol"}], 
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", "opticsSymbol"}]}], 
    "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"traceRay", "[", 
     RowBox[{"optics_", "?", "opticsQ"}], "]"}], "[", 
    RowBox[{"initialRay_ray", ",", 
     RowBox[{"lambda_", "?", "NumberQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "indices", ",", "indpair", ",", "args", ",", "ir", ",", "rays"}], "}"}],
      ",", 
     RowBox[{
      RowBox[{"indices", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"refractiveIndexValue", "[", 
           RowBox[{"#", ",", "lambda"}], "]"}], "&"}], ",", 
         RowBox[{"optics", "[", "mediums", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"indpair", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{"indices", ",", 
          RowBox[{"RotateLeft", "[", "indices", "]"}]}], "}"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"args", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"optics", "[", "surfaces", "]"}], ",", 
          RowBox[{"Take", "[", 
           RowBox[{"indpair", ",", 
            RowBox[{"Length", "[", 
             RowBox[{"optics", "[", "surfaces", "]"}], "]"}]}], "]"}]}], 
         "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ir", "=", 
       RowBox[{"setRefractiveIndexForRay", "[", 
        RowBox[{"initialRay", ",", 
         RowBox[{"indices", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"rays", "=", 
       RowBox[{"FoldList", "[", 
        RowBox[{"traceOneRay", ",", "ir", ",", "args"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"raySequence", "[", 
       RowBox[{"lambda", ",", "rays"}], "]"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"traceRay", "[", 
     RowBox[{"surface_", "?", "surfaceQ"}], "]"}], "[", 
    RowBox[{"r_ray", ",", 
     RowBox[{"{", 
      RowBox[{"inputIndex_", ",", "outputIndex_"}], "}"}]}], "]"}], ":=", 
   RowBox[{"traceOneRay", "[", 
    RowBox[{"r", ",", 
     RowBox[{"{", 
      RowBox[{"surface", ",", 
       RowBox[{"{", 
        RowBox[{"inputIndex", ",", "outputIndex"}], "}"}]}], "}"}]}], "]"}]}],
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"traceOneRay", "[", 
   RowBox[{"r_ray", ",", 
    RowBox[{"{", 
     RowBox[{"surface_", ",", 
      RowBox[{"{", 
       RowBox[{"inputIndex_", ",", "outputIndex_"}], "}"}]}], "}"}]}], "]"}], 
  ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"offray", ",", "refray"}], "}"}], ",", 
    RowBox[{
     RowBox[{"offray", "=", 
      RowBox[{"offsetRay", "[", 
       RowBox[{"r", ",", 
        RowBox[{"surface", "[", "origin", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"refray", "=", 
      RowBox[{
       RowBox[{"reflectedRay", "[", "surface", "]"}], "[", 
       RowBox[{"offray", ",", 
        RowBox[{"{", 
         RowBox[{"inputIndex", ",", "outputIndex"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"offsetBackRay", "[", 
      RowBox[{"refray", ",", 
       RowBox[{"surface", "[", "origin", "]"}]}], "]"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"traceOneRay", "[", 
   RowBox[{
    RowBox[{"stoppedRay", "[", "__", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"surface_", ",", 
      RowBox[{"{", 
       RowBox[{"inputIndex_", ",", "outputIndex_"}], "}"}]}], "}"}]}], "]"}], 
  ":=", "untraceableRay"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"traceOneRay", "[", 
    RowBox[{"untraceableRay", ",", 
     RowBox[{"{", 
      RowBox[{"surface_", ",", 
       RowBox[{"{", 
        RowBox[{"inputIndex_", ",", "outputIndex_"}], "}"}]}], "}"}]}], "]"}],
    ":=", "untraceableRay"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}], "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Protect", "[", "mediums", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Protect", "[", "surfaces", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Protect", "[", "shape", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Protect", "[", "surface", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Protect", "[", "boundary", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Protect", "[", "domain", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Protect", "[", "ray", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Protect", "[", "raySequence", "]"}], ";", "\[IndentingNewLine]", 
    
    RowBox[{"Protect", "[", "plane", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Protect", "[", "spherical", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Protect", "[", "quadratic", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Protect", "[", "parametric", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Protect", "[", "stoppedRay", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Protect", "[", "untraceableRay", "]"}], ";"}], "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"unfoldInterpolation", "[", "if_InterpolatingFunction", "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dompos", "=", 
       RowBox[{"interpolationSectionPoints", "[", "if", "]"}]}], "}"}], ",", 
     RowBox[{"Interpolation", "[", 
      RowBox[{"Evaluate", "[", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#", ",", 
            RowBox[{"if", "[", 
             RowBox[{"Abs", "[", "#", "]"}], "]"}]}], "}"}], "&"}], ",", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"Reverse", "[", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "#"}], "&"}], ",", 
              RowBox[{"Rest", "[", "dompos", "]"}]}], "]"}], "]"}], ",", 
           "dompos"}], "]"}]}], "]"}], "]"}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"interpolationDomain", "[", "itf_InterpolatingFunction", "]"}], ":=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"itf", "[", "\"\<Domain\>\"", "]"}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
   "interpolationSectionPoints", "[", "itf_InterpolatingFunction", "]"}], ":=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"itf", "[", 
     RowBox[{"[", "3", "]"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"thinOut", "[", 
    RowBox[{"lis_List", ",", "n_"}], "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{"First", ",", 
     RowBox[{"Partition", "[", 
      RowBox[{"lis", ",", 
       RowBox[{"Round", "[", 
        RowBox[{
         RowBox[{"Length", "[", "lis", "]"}], "/", "n"}], "]"}]}], "]"}]}], 
    "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"thinOutFromBothSide", "[", 
    RowBox[{"lis_List", ",", "n_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"subs", ",", "nhalf"}], "}"}], ",", 
     RowBox[{
      RowBox[{"nhalf", "=", 
       RowBox[{"Floor", "[", 
        RowBox[{"n", "/", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"subs", "=", 
       RowBox[{"Partition", "[", 
        RowBox[{"lis", ",", 
         RowBox[{"Floor", "[", 
          RowBox[{
           RowBox[{"Length", "[", "lis", "]"}], "/", "2"}], "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"thinOut", "[", 
         RowBox[{
          RowBox[{"subs", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", "nhalf"}], "]"}], ",", 
        RowBox[{"Reverse", "[", 
         RowBox[{"thinOut", "[", 
          RowBox[{
           RowBox[{"Reverse", "[", 
            RowBox[{"subs", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", "nhalf"}], "]"}], 
         "]"}]}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"lineStyles", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"CapForm", "[", "\"\<Round\>\"", "]"}], ",", 
      RowBox[{"JoinForm", "[", "\"\<Round\>\"", "]"}], ",", "Black", ",", 
      RowBox[{"AbsoluteThickness", "[", "1.6", "]"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"surfaceGraphics", "[", 
   RowBox[{"s_", "?", "surfaceQ"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"h", ",", "isec"}], "}"}], ",", 
    RowBox[{
     RowBox[{"isec", "=", 
      RowBox[{"Interval", "[", 
       RowBox[{"domain", "[", 
        RowBox[{"s", "[", "shape", "]"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ParametricPlot", "[", 
      RowBox[{
       RowBox[{"Evaluate", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"shapeFunctionToDraw", "[", 
           RowBox[{"s", "[", "shape", "]"}], "]"}], "[", "h", "]"}], "+", 
         RowBox[{"Reverse", "[", 
          RowBox[{"s", "[", "origin", "]"}], "]"}]}], "]"}], ",", 
       RowBox[{"Evaluate", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"{", "h", "}"}], ",", 
           RowBox[{"MinMax", "[", "isec", "]"}]}], "]"}], "]"}], "]"}], ",", 
       RowBox[{"PlotStyle", "\[RuleDelayed]", "lineStyles"}]}], "]"}]}]}], 
   "]"}]}], "\n", 
 RowBox[{
  RowBox[{"surfaceGraphics", "[", 
   RowBox[{
    RowBox[{"s_", "?", "surfaceQ"}], ",", 
    RowBox[{"dom", ":", 
     RowBox[{"{", 
      RowBox[{"_", ",", "_"}], "}"}]}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"h", ",", "isec"}], "}"}], ",", 
    RowBox[{
     RowBox[{"isec", "=", 
      RowBox[{"IntervalIntersection", "[", 
       RowBox[{
        RowBox[{"Interval", "[", "dom", "]"}], ",", 
        RowBox[{"Interval", "[", 
         RowBox[{"domain", "[", 
          RowBox[{"s", "[", "shape", "]"}], "]"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ParametricPlot", "[", 
      RowBox[{
       RowBox[{"Evaluate", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"shapeFunctionToDraw", "[", 
           RowBox[{"s", "[", "shape", "]"}], "]"}], "[", "h", "]"}], "+", 
         RowBox[{"Reverse", "[", 
          RowBox[{"s", "[", "origin", "]"}], "]"}]}], "]"}], ",", 
       RowBox[{"Evaluate", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"{", "h", "}"}], ",", 
           RowBox[{"MinMax", "[", "isec", "]"}]}], "]"}], "]"}], "]"}], ",", 
       RowBox[{"PlotStyle", "\[RuleDelayed]", "lineStyles"}]}], "]"}]}]}], 
   "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"surfaceGraphics", "[", 
    RowBox[{
     RowBox[{"s_", "?", "surfaceQ"}], ",", "___"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Graphics", "[", "]"}], "/;", 
    RowBox[{"hiddenQ", "[", "s", "]"}]}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"cornerPostion", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x1_", ",", "y1_"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x2_", ",", "y2_"}], "}"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x2", ",", "y1"}], "}"}], "/;", 
   RowBox[{
    RowBox[{"Abs", "[", "y1", "]"}], "\[GreaterEqual]", 
    RowBox[{"Abs", "[", "y2", "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"cornerPostion", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x1_", ",", "y1_"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x2_", ",", "y2_"}], "}"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x1", ",", "y2"}], "}"}], "/;", 
   RowBox[{
    RowBox[{"Abs", "[", "y1", "]"}], "<", 
    RowBox[{"Abs", "[", "y2", "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"edgeLine", "[", 
    RowBox[{
     RowBox[{"p1", ":", 
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}]}], ",", 
     RowBox[{"p2", ":", 
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}]}]}], "]"}], ":=", 
   RowBox[{"Line", "[", 
    RowBox[{"{", 
     RowBox[{"p1", ",", 
      RowBox[{"cornerPostion", "[", 
       RowBox[{"p1", ",", "p2"}], "]"}], ",", "p2"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"marginalPosition", "[", 
    RowBox[{"s_", "?", "surfaceQ"}], "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "+", 
       RowBox[{"Reverse", "[", 
        RowBox[{"s", "[", "origin", "]"}], "]"}]}], "&"}], ",", 
     RowBox[{"marginalPosition", "[", 
      RowBox[{"s", "[", "shape", "]"}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"edgeConnectingLines", "[", 
    RowBox[{"s1_", ",", "s2_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"p1", ",", "p2"}], "}"}], ",", 
     RowBox[{
      RowBox[{"p1", "=", 
       RowBox[{"marginalPosition", "[", "s1", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"p2", "=", 
       RowBox[{"marginalPosition", "[", "s2", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"edgeLine", "[", 
         RowBox[{
          RowBox[{"p1", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{"p2", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
        RowBox[{"edgeLine", "[", 
         RowBox[{
          RowBox[{"p1", "[", 
           RowBox[{"[", "2", "]"}], "]"}], ",", 
          RowBox[{"p2", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "}"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"bulkLensGraphics", "[", 
    RowBox[{
     RowBox[{"s1_", "?", "surfaceQ"}], ",", 
     RowBox[{"s2_", "?", "surfaceQ"}]}], "]"}], ":=", 
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"Graphics", "[", 
      RowBox[{"Join", "[", 
       RowBox[{"lineStyles", ",", 
        RowBox[{"{", 
         RowBox[{"edgeConnectingLines", "[", 
          RowBox[{"s1", ",", "s2"}], "]"}], "}"}]}], "]"}], "]"}], ",", 
     RowBox[{"surfaceGraphics", "[", "s1", "]"}], ",", 
     RowBox[{"surfaceGraphics", "[", "s2", "]"}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"lensGraphics", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"s1_", "?", "surfaceQ"}], ",", 
      RowBox[{"s2_", "?", "surfaceQ"}]}], "}"}], ",", "atmosphere"}], "]"}], ":=", 
  RowBox[{"{", "}"}]}], "\n", 
 RowBox[{
  RowBox[{"lensGraphics", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"s1_", "?", "surfaceQ"}], ",", 
      RowBox[{"s2_", "?", "surfaceQ"}]}], "}"}], ",", "_"}], "]"}], ":=", 
  RowBox[{"bulkLensGraphics", "[", 
   RowBox[{"s1", ",", "s2"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"singleSurfaceGraphics", "[", 
   RowBox[{
    RowBox[{"s_", "?", "surfaceQ"}], ",", 
    RowBox[{"{", 
     RowBox[{"atmosphere", ",", "atmosphere"}], "}"}]}], "]"}], ":=", 
  RowBox[{"surfaceGraphics", "[", "s", "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"singleSurfaceGraphics", "[", 
    RowBox[{
     RowBox[{"s_", "?", "surfaceQ"}], ",", 
     RowBox[{"{", 
      RowBox[{"_", ",", "_"}], "}"}]}], "]"}], ":=", 
   RowBox[{"{", "}"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"neighbouringPair", "[", "l_List", "]"}], ":=", 
   RowBox[{"Most", "[", 
    RowBox[{"Transpose", "[", 
     RowBox[{"{", 
      RowBox[{"l", ",", 
       RowBox[{"RotateLeft", "[", "l", "]"}]}], "}"}], "]"}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"positionToDifferent", "[", "l_List", "]"}], ":=", 
  RowBox[{"Position", "[", 
   RowBox[{"l", ",", 
    RowBox[{"_", "?", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "=!=", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "&"}], ")"}]}], ",", "1", ",", 
    RowBox[{"Heads", "\[Rule]", "False"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"removeUselessSurfaces", "[", 
    RowBox[{"surfs_", ",", "meds_"}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"poss", "=", 
       RowBox[{"positionToDifferent", "[", 
        RowBox[{"neighbouringPair", "[", "meds", "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Extract", "[", 
        RowBox[{"surfs", ",", "poss"}], "]"}], ",", 
       RowBox[{"Extract", "[", 
        RowBox[{"meds", ",", "poss"}], "]"}]}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "opticsGraphics", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"removeLast", "\[Rule]", "False"}], ",", 
     RowBox[{"hideUselessSurface", "\[Rule]", "True"}]}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"opticsGraphics", "[", 
    RowBox[{
     RowBox[{"opti_", "?", "opticsQ"}], ",", "opt___Rule"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "sus", ",", "osurfs", ",", "omeds", ",", "cnt", ",", "surs", ",", 
       "bulks", ",", "meds", ",", "mbet", ",", "mpir"}], "}"}], ",", 
     RowBox[{
      RowBox[{"sus", "=", 
       RowBox[{
        RowBox[{"hideUselessSurface", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "opticsGraphics", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"osurfs", ",", "omeds"}], "}"}], "=", 
       RowBox[{"If", "[", 
        RowBox[{"sus", ",", 
         RowBox[{"removeUselessSurfaces", "[", 
          RowBox[{
           RowBox[{"opti", "[", "surfaces", "]"}], ",", 
           RowBox[{"opti", "[", "mediums", "]"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"opti", "[", "surfaces", "]"}], ",", 
           RowBox[{"opti", "[", "mediums", "]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"cnt", "=", 
       RowBox[{
        RowBox[{"Length", "[", "osurfs", "]"}], "+", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"removeLast", "/.", 
              RowBox[{"{", "opt", "}"}]}], "/.", 
             RowBox[{"Options", "[", "opticsGraphics", "]"}]}], ")"}], "&&", 
           RowBox[{"(", 
            RowBox[{"!", "sus"}], ")"}]}], ",", 
          RowBox[{"-", "1"}], ",", "0"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"surs", "=", 
       RowBox[{"Take", "[", 
        RowBox[{"osurfs", ",", "cnt"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"bulks", "=", 
       RowBox[{"neighbouringPair", "[", "surs", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"meds", "=", 
       RowBox[{"Append", "[", 
        RowBox[{"omeds", ",", "atmosphere"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mbet", "=", 
       RowBox[{"Take", "[", 
        RowBox[{
         RowBox[{"Rest", "[", "meds", "]"}], ",", 
         RowBox[{"cnt", "-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"mpair", "=", 
       RowBox[{"Take", "[", 
        RowBox[{
         RowBox[{"neighbouringPair", "[", "meds", "]"}], ",", "cnt"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"Thread", "[", 
         RowBox[{"lensGraphics", "[", 
          RowBox[{"bulks", ",", "mbet"}], "]"}], "]"}], ",", 
        RowBox[{"Thread", "[", 
         RowBox[{"singleSurfaceGraphics", "[", 
          RowBox[{"surs", ",", "mpair"}], "]"}], "]"}]}], "]"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"reflectedPointsToDraw", "[", "rs_raySequence", "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{"Reverse", ",", 
    RowBox[{"Map", "[", 
     RowBox[{"origin", ",", 
      RowBox[{"sequenceOfRays", "[", "rs", "]"}]}], "]"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"rayLineToDraw", "[", "rs_raySequence", "]"}], ":=", 
  RowBox[{"Line", "[", 
   RowBox[{"reflectedPointsToDraw", "[", "rs", "]"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"rayLineToDraw", "[", 
   RowBox[{"rs_raySequence", ",", "count_"}], "]"}], ":=", 
  RowBox[{"Line", "[", 
   RowBox[{"Take", "[", 
    RowBox[{
     RowBox[{"reflectedPointsToDraw", "[", "rs", "]"}], ",", "count"}], "]"}],
    "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"rayLineToDraw", "[", 
    RowBox[{"rs_raySequence", ",", 
     RowBox[{"{", 
      RowBox[{"from_", ",", "upto_"}], "}"}]}], "]"}], ":=", 
   RowBox[{"Line", "[", 
    RowBox[{"Take", "[", 
     RowBox[{
      RowBox[{"reflectedPointsToDraw", "[", "rs", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"from", ",", "upto"}], "}"}]}], "]"}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"Clear", "[", "rayCongruenceGraphics", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "rayCongruenceGraphics", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"rayCount", "\[Rule]", "12"}], ",", 
     RowBox[{"removeLast", "\[Rule]", "False"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"rayCongruenceGraphics", "[", 
   RowBox[{
    RowBox[{"rss", ":", 
     RowBox[{"{", "__raySequence", "}"}]}], ",", "opt___Rule"}], "]"}], ":=", 
  
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"rc", ",", "cnt"}], "}"}], ",", 
    RowBox[{
     RowBox[{"rc", "=", 
      RowBox[{
       RowBox[{"raySegmentCount", "[", 
        RowBox[{"rss", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], "+", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"removeLast", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"Options", "[", "rayCongruenceGraphics", "]"}]}], ",", 
         RowBox[{"-", "1"}], ",", "0"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"cnt", "=", 
      RowBox[{
       RowBox[{"rayCount", "/.", 
        RowBox[{"{", "opt", "}"}]}], "/.", 
       RowBox[{"Options", "[", "rayCongruenceGraphics", "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"cnt", ">", 
        RowBox[{"Length", "[", "rss", "]"}]}], ",", 
       RowBox[{"cnt", "=", 
        RowBox[{"Length", "[", "rss", "]"}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Graphics", "[", 
      RowBox[{"{", 
       RowBox[{"Thin", ",", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"rayLineToDraw", "[", 
            RowBox[{"#", ",", "rc"}], "]"}], "&"}], ",", 
          RowBox[{"thinOutFromBothSide", "[", 
           RowBox[{"rss", ",", "cnt"}], "]"}]}], "]"}]}], "}"}], "]"}]}]}], 
   "]"}]}], "\n", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}], 
  RowBox[{
   RowBox[{"biasphericAplanatParameterSymbols", "=", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "designWavelength", ",", "lensMediumSymbol", ",", 
        "numericalApertureTarget", ",", "mechanicalImageDistance", ",", 
        "mechanicalObjectDistance", ",", "coverGlassExistence", ",", 
        "coverGlassMediumSymbol", ",", "coverGlassThickness", ",", 
        "mechanicalObjectImageDistance", ",", "objectSideCoverGlassExistence",
         ",", "objectSideCoverGlassMediumSymbol", ",", 
        "objectSideCoverGlassThickness", ",", "marginRatio"}], "}"}], ",", 
      "singletParaxialParameterSymbols"}], "]"}]}], ";"}], "\n", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"$marginRatio", "=", "1.02"}], ";"}], "\n", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "setDefaultMarginRatio", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"setDefaultMarginRatio", "::", "notnumeric"}], "=", 
   "\"\<argument `1` should be a numeric value.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"setDefaultMarginRatio", "::", "lessthan1"}], "=", 
   "\"\<argument `1` should be greater than 1.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"setDefaultMarginRatio", "[", "mratio_", "]"}], "/;", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"NumericQ", "[", "mratio", "]"}], ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"N", "[", "mratio", "]"}], ">", "1."}], ",", "True", ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"setDefaultMarginRatio", "::", "lessthan1"}], ",", 
           "mratio"}], "]"}], ";", "False"}]}], "]"}], ",", 
      RowBox[{
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"setDefaultMarginRatio", "::", "notnumeric"}], ",", 
         "mratio"}], "]"}], ";", "False"}]}], "]"}]}], ":=", 
   RowBox[{"(", 
    RowBox[{"$marginRatio", "=", "mratio"}], ")"}]}], "\n", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "setupBiasphericAplanatParameters", "]"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "setupBiasphericAplanatParameters", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"marginRatio", "\[Rule]", "$marginRatio"}], "}"}]}], ";"}], "\n", 

 RowBox[{
  RowBox[{
   RowBox[{"setupBiasphericAplanatParameters", "[", "parameters__Rule", "]"}],
    ":=", 
   RowBox[{"setupBiasphericAplanatParameters", "[", 
    RowBox[{"{", "parameters", "}"}], "]"}]}], "\n", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"setupBiasphericAplanatParameters", "[", 
    RowBox[{"parameters", ":", 
     RowBox[{"{", "__Rule", "}"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "wl", ",", "lm", ",", "n", ",", "icQ", ",", "ocQ", ",", "difid", ",", 
       "difod", ",", "pwd", ",", "pod", ",", "poi", ",", "paramp", ",", 
       "paraparm", ",", "conj", ",", "remp"}], "}"}], ",", 
     RowBox[{
      RowBox[{"wl", "=", 
       RowBox[{"designWavelength", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"NumericQ", "[", "wl", "]"}]}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"setupBiasphericAplanatParameters", "::", "needslambda"}], 
          "]"}], ";", 
         RowBox[{"Return", "[", "$Fialed", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"lm", "=", 
       RowBox[{"lensMediumSymbol", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"mediumQ", "[", "lm", "]"}]}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"setupBiasphericAplanatParameters", "::", "notmedium"}], 
           ",", "lm", ",", "lensMediumSymbol"}], "]"}], ";", 
         RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"n", "=", 
       RowBox[{"refractiveIndexValue", "[", 
        RowBox[{"lm", ",", "wl"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"icQ", "=", 
       RowBox[{"hasImageSpaceCoverGlassPresentQ", "[", "parameters", "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"difid", "=", 
       RowBox[{"If", "[", 
        RowBox[{"icQ", ",", 
         RowBox[{"Check", "[", 
          RowBox[{
           RowBox[{"differenceToParaxialCoverGlass", "[", 
            RowBox[{"wl", ",", 
             RowBox[{"{", 
              RowBox[{"coverGlassMediumSymbol", ",", "coverGlassThickness"}], 
              "}"}], ",", "parameters"}], "]"}], ",", 
           RowBox[{"Return", "[", "parameters", "]"}]}], "]"}], ",", "0.0"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"pwd", "=", 
       RowBox[{"mechanicalImageDistance", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ocQ", "=", 
       RowBox[{"hasObjectSpaceCoverGlassPresentQ", "[", "parameters", "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"difod", "=", 
       RowBox[{"If", "[", 
        RowBox[{"ocQ", ",", 
         RowBox[{"Check", "[", 
          RowBox[{
           RowBox[{"differenceToParaxialCoverGlass", "[", 
            RowBox[{"wl", ",", 
             RowBox[{"{", 
              RowBox[{
              "objectSideCoverGlassMediumSymbol", ",", 
               "objectSideCoverGlassThickness"}], "}"}], ",", "parameters"}], 
            "]"}], ",", 
           RowBox[{"Return", "[", "parameters", "]"}]}], "]"}], ",", "0.0"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"pod", "=", 
       RowBox[{"mechanicalObjectDistance", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"poi", "=", 
       RowBox[{"mechanicalObjectImageDistance", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"paramp", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{"parameters", ",", 
          RowBox[{"lensMediumRefractiveIndex", "\[Rule]", "n"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"NumericQ", "[", "pwd", "]"}], ",", 
            RowBox[{"paraxialWorkingDistance", "\[Rule]", 
             RowBox[{"pwd", "+", "difid"}]}], ",", "Nothing"}], "]"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"NumericQ", "[", "pod", "]"}], ",", 
            RowBox[{"paraxialObjectDistance", "\[Rule]", 
             RowBox[{"pod", "+", "difod"}]}], ",", "Nothing"}], "]"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"NumericQ", "[", "poi", "]"}], ",", 
            RowBox[{"paraxialObjectImageDistance", "\[Rule]", 
             RowBox[{"poi", "+", "difid", "+", "difod"}]}], ",", "Nothing"}], 
           "]"}]}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"paraparm", "=", 
       RowBox[{"Check", "[", 
        RowBox[{
         RowBox[{"settleRemainedParaxialParameters", "[", "paramp", "]"}], 
         ",", 
         RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"remp", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"NumericQ", "[", "pwd", "]"}]}], ",", 
           RowBox[{"mechanicalImageDistance", "\[Rule]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"paraxialWorkingDistance", "/.", "paraparm"}], ")"}], 
             "-", "difid"}]}], ",", "Nothing"}], "]"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"(", 
             RowBox[{"conjugateInfiniteness", "/.", "paraparm"}], ")"}]}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"!", 
                RowBox[{"NumericQ", "[", "pod", "]"}]}], ",", 
               RowBox[{"mechanicalObjectDistance", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"paraxialObjectDistance", "/.", "paraparm"}], ")"}],
                  "-", "difod"}]}], ",", "Nothing"}], "]"}], ",", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"!", 
                RowBox[{"NumericQ", "[", "poi", "]"}]}], ",", 
               RowBox[{"mechanicalObjectImageDistance", "\[Rule]", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"paraxialObjectImageDistance", "/.", "paraparm"}], 
                  ")"}], "-", "difid", "-", "difod"}]}], ",", "Nothing"}], 
              "]"}]}], "}"}], ",", "Nothing"}], "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Apply", "[", 
       RowBox[{"Sequence", ",", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{"paramp", ",", 
           RowBox[{"coverGlassExistence", "\[Rule]", "icQ"}], ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"conjugateInfiniteness", "/.", "paraparm"}], ",", 
             "Nothing", ",", 
             RowBox[{"objectSideCoverGlassExistence", "\[Rule]", "ocQ"}]}], 
            "]"}], ",", "remp", ",", "paraparm", ",", 
           RowBox[{
           "Options", "[", "setupBiasphericAplanatParameters", "]"}]}], "}"}],
          "]"}]}], "]"}]}]}], "]"}]}], "\n", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"hasImageSpaceCoverGlassPresentQ", "[", "parameters__Rule", "]"}], ":=", 
  RowBox[{"hasImageSpaceCoverGlassPresentQ", "[", 
   RowBox[{"{", "parameters", "}"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"hasImageSpaceCoverGlassPresentQ", "[", 
    RowBox[{"parameters", ":", 
     RowBox[{"{", "__Rule", "}"}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"plist", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"First", ",", "parameters"}], "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"SubsetQ", "[", 
        RowBox[{"plist", ",", 
         RowBox[{"{", 
          RowBox[{"coverGlassMediumSymbol", ",", "coverGlassThickness"}], 
          "}"}]}], "]"}], ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"coverGlassMediumSymbol", "/.", "parameters"}], ")"}], "=!=",
           "atmosphere"}], ")"}], "&&", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"N", "[", 
           RowBox[{"(", 
            RowBox[{"coverGlassThickness", "/.", "parameters"}], ")"}], "]"}],
           ">", "0.0"}], ")"}]}], ",", "False"}], "]"}]}], "]"}]}], "\n", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"hasObjectSpaceCoverGlassPresentQ", "[", "parameters__Rule", "]"}], 
  ":=", 
  RowBox[{"hasObjectSpaceCoverGlassPresentQ", "[", 
   RowBox[{"{", "parameters", "}"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"hasObjectSpaceCoverGlassPresentQ", "[", 
    RowBox[{"parameters", ":", 
     RowBox[{"{", "__Rule", "}"}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"plist", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"First", ",", "parameters"}], "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"SubsetQ", "[", 
        RowBox[{"plist", ",", 
         RowBox[{"{", 
          RowBox[{
          "objectSideCoverGlassMediumSymbol", ",", 
           "objectSideCoverGlassThickness"}], "}"}]}], "]"}], ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"objectSideCoverGlassMediumSymbol", "/.", "parameters"}], 
           ")"}], "=!=", "atmosphere"}], ")"}], "&&", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"N", "[", 
           RowBox[{"(", 
            RowBox[{"objectSideCoverGlassThickness", "/.", "parameters"}], 
            ")"}], "]"}], ">", "0.0"}], ")"}]}], ",", "False"}], "]"}]}], 
    "]"}]}], "\n", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"differenceToParaxialCoverGlass", "[", 
    RowBox[{"wavelength_", ",", 
     RowBox[{"{", 
      RowBox[{"cgms_", ",", "cgt_"}], "}"}], ",", 
     RowBox[{"parameters", ":", 
      RowBox[{"{", "__Rule", "}"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mc", ",", "nc", ",", "dc", ",", "wd"}], "}"}], ",", 
     RowBox[{
      RowBox[{"mc", "=", 
       RowBox[{"cgms", "/.", "parameters"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"mediumQ", "[", "mc", "]"}]}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"setupBiasphericAplanatParameters", "::", "notmedium"}], 
           ",", "mc", ",", "cgms"}], "]"}], ";", 
         RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"nc", "=", 
       RowBox[{"refractiveIndexValue", "[", 
        RowBox[{"mc", ",", "wavelength"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dc", "=", 
       RowBox[{"cgt", "/.", "parameters"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"paraxialThickessDifferenceFromMechanical", "[", 
       RowBox[{"nc", ",", "dc"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}], 
  "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "biasphericAplanatSolve", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"biasphericAplanatSolve", "[", "parameters__Rule", "]"}], ":=", 
  RowBox[{"biasphericAplanatSolve", "[", 
   RowBox[{"{", "parameters", "}"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"biasphericAplanatSolve", "[", 
    RowBox[{"parameters", ":", 
     RowBox[{"{", "__Rule", "}"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "wl", ",", "ml", ",", "na", ",", "iconj", ",", "cgi", ",", "cgo"}], 
      "}"}], ",", 
     RowBox[{
      RowBox[{"iconj", "=", 
       RowBox[{"conjugateInfiniteness", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"TrueQ", "[", 
          RowBox[{"Element", "[", 
           RowBox[{"iconj", ",", "Booleans"}], "]"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"biasphericAplanatSolve", "::", "usesetup"}], "]"}], ";", 
         RowBox[{"Return", "[", "parameters", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"wl", "=", 
       RowBox[{"designWavelength", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"NumericQ", "[", "wl", "]"}]}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"biasphericAplanatSolve", "::", "usesetup"}], "]"}], ";", 
         RowBox[{"Return", "[", "parameters", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ml", "=", 
       RowBox[{"lensMediumSymbol", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"mediumQ", "[", "ml", "]"}]}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"biasphericAplanatSolve", "::", "usesetup"}], "]"}], ";", 
         RowBox[{"Return", "[", "parameters", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"na", "=", 
       RowBox[{"numericalApertureTarget", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"NumericQ", "[", "na", "]"}]}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"biasphericAplanatSolve", "::", "usesetup"}], "]"}], ";", 
         RowBox[{"Return", "[", "parameters", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"cgi", "=", 
       RowBox[{"coverGlassExistence", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "iconj"}], ",", 
        RowBox[{"cgo", "=", 
         RowBox[{"objectSideCoverGlassExistence", "/.", "parameters"}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"branchSolver", "[", 
       RowBox[{"iconj", ",", "cgi", ",", "cgo", ",", "parameters"}], 
       "]"}]}]}], "]"}]}], "\n", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"branchSolver", "[", 
    RowBox[{"iconj_", ",", "cgi_", ",", "cgo_", ",", "parameters_"}], "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"iconj", ",", "cgi", ",", "cgo"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"True", ",", "False", ",", "_"}], "}"}], ",", 
     RowBox[{"biasphericAplanatSolveInfinite", "[", "parameters", "]"}], ",", 
     
     RowBox[{"{", 
      RowBox[{"True", ",", "True", ",", "_"}], "}"}], ",", 
     RowBox[{
     "biasphericAplanatSolveInfiniteWithCoverGlass", "[", "parameters", "]"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "False", ",", "False"}], "}"}], ",", 
     RowBox[{"biasphericAplanatSolveFinite", "[", "parameters", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True", ",", "False"}], "}"}], ",", 
     RowBox[{
     "biasphericAplanatSolveFiniteWithImageCoverGlass", "[", "parameters", 
      "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "False", ",", "True"}], "}"}], ",", 
     RowBox[{
     "biasphericAplanatSolveFiniteWithObjectCoverGlass", "[", "parameters", 
      "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True", ",", "True"}], "}"}], ",", 
     RowBox[{
     "biasphericAplanatSolveFiniteWithBothImageAndObjectCoverGlass", "[", 
      "parameters", "]"}]}], "]"}]}], "\n", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"commonParameters", "[", 
    RowBox[{"parameters", ":", 
     RowBox[{"{", "__Rule", "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"(*", 
      RowBox[{"{", 
       RowBox[{"mr", ",", "na", ",", "n", ",", "d", ",", "m"}], "}"}], "*)"}], 
     RowBox[{"marginRatio", ",", "numericalApertureTarget", ",", 
      RowBox[{"refractiveIndexValue", "[", 
       RowBox[{"lensMediumSymbol", ",", "designWavelength"}], "]"}], ",", 
      "lensMediumThickness", ",", "mechanicalImageDistance"}], "}"}], "/.", 
    "parameters"}]}], "\n", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"filterNDSolveOptions", "[", 
    RowBox[{"parameters", ":", 
     RowBox[{"{", "__Rule", "}"}]}], "]"}], ":=", 
   RowBox[{"Apply", "[", 
    RowBox[{"Sequence", ",", 
     RowBox[{"FilterRules", "[", 
      RowBox[{"parameters", ",", 
       RowBox[{"Options", "[", "NDSolve", "]"}]}], "]"}]}], "]"}]}], "\n", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"biasphericAplanatSolveInfinite", "[", 
    RowBox[{"parameters", ":", 
     RowBox[{"{", "__Rule", "}"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "x1", ",", "x2", ",", "mr", ",", "na", ",", "n", ",", "d", ",", "m", 
       ",", "f", ",", "shps", ",", "secpnts", ",", "ana"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"mr", ",", "na", ",", "n", ",", "d", ",", "m"}], "}"}], "=", 
       RowBox[{"commonParameters", "[", "parameters", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"f", "=", 
       RowBox[{"focalLength", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x1", ",", "x2"}], "}"}], "=", 
       RowBox[{"SolveInfinite", "[", 
        RowBox[{
         RowBox[{"mr", "*", "na"}], ",", "n", ",", "d", ",", "m", ",", "f", 
         ",", 
         RowBox[{"filterNDSolveOptions", "[", "parameters", "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"secpnts", "=", 
       RowBox[{"interpolationSectionPoints", "[", "x1", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ana", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"Last", "[", "secpnts", "]"}], "/", "mr"}], "/.", 
        "parameters"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"frontSurfaceShapeFunction", "\[Rule]", 
          RowBox[{"Interpolation", "[", 
           RowBox[{"mirroredData", "[", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"f", "*", "#"}], ",", 
                 RowBox[{"x1", "[", "#", "]"}]}], "}"}], "&"}], ",", 
              "secpnts"}], "]"}], "]"}], "]"}]}], ",", 
         RowBox[{"backSurfaceShapeFunction", "\[Rule]", 
          RowBox[{"Interpolation", "[", 
           RowBox[{"mirroredData", "[", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"#", " ", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"m", "-", 
                    RowBox[{"x2", "[", "#", "]"}]}], ")"}], "/", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"1.0", "-", 
                    RowBox[{"#", "^", "2"}]}], "]"}]}]}], ",", 
                 RowBox[{
                  RowBox[{"x2", "[", "#", "]"}], "+", "d"}]}], "}"}], "&"}], 
              ",", "secpnts"}], "]"}], "]"}], "]"}]}], ",", 
         RowBox[{"numericalAperture", "\[Rule]", "ana"}], ",", "parameters"}],
         "}"}], "]"}]}]}], "]"}]}], "\n", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"biasphericAplanatSolveInfiniteWithCoverGlass", "[", 
    RowBox[{"parameters", ":", 
     RowBox[{"{", "__Rule", "}"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "x1", ",", "x2", ",", "mr", ",", "na", ",", "n", ",", "d", ",", "m", 
       ",", "f", ",", "dc", ",", "mc", ",", "nc", ",", "shps", ",", "secpnts",
        ",", "ana"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"mr", ",", "na", ",", "n", ",", "d", ",", "m"}], "}"}], "=", 
       RowBox[{"commonParameters", "[", "parameters", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"f", "=", 
       RowBox[{"focalLength", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dc", "=", 
       RowBox[{"coverGlassThickness", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mc", "=", 
       RowBox[{"coverGlassMediumSymbol", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"nc", "=", 
       RowBox[{"refractiveIndexValue", "[", 
        RowBox[{"mc", ",", 
         RowBox[{"designWavelength", "/.", "parameters"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x1", ",", "x2"}], "}"}], "=", 
       RowBox[{"SolveInfiniteWithCoverGlass", "[", 
        RowBox[{
         RowBox[{"mr", "*", "na"}], ",", "n", ",", "d", ",", "m", ",", "f", 
         ",", "dc", ",", "nc", ",", 
         RowBox[{"filterNDSolveOptions", "[", "parameters", "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"secpnts", "=", 
       RowBox[{"interpolationSectionPoints", "[", "x1", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ana", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"Last", "[", "secpnts", "]"}], "/", "mr"}], "/.", 
        "parameters"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"frontSurfaceShapeFunction", "\[Rule]", 
          RowBox[{"Interpolation", "[", 
           RowBox[{"mirroredData", "[", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"f", "*", "#"}], ",", 
                 RowBox[{"x1", "[", "#", "]"}]}], "}"}], "&"}], ",", 
              "secpnts"}], "]"}], "]"}], "]"}]}], ",", 
         RowBox[{"backSurfaceShapeFunction", "\[Rule]", 
          RowBox[{"Interpolation", "[", 
           RowBox[{"mirroredData", "[", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"#", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"dc", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"1", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"#", "^", "2"}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{"1", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "^", "2"}]}], "+", 
                    RowBox[{"nc", "^", "2"}]}], "]"}]}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"m", "-", 
                    RowBox[{"x2", "[", "#", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"#", "^", "2"}]}], "]"}]}]}], ")"}]}], ",", 
                 RowBox[{"d", "+", 
                  RowBox[{"x2", "[", "#", "]"}]}]}], "}"}], "&"}], ",", 
              "secpnts"}], "]"}], "]"}], "]"}]}], ",", 
         RowBox[{"numericalAperture", "\[Rule]", "ana"}], ",", "parameters"}],
         "}"}], "]"}]}]}], "]"}]}], "\n", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"biasphericAplanatSolveFinite", "[", 
    RowBox[{"parameters", ":", 
     RowBox[{"{", "__Rule", "}"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "x1", ",", "x2", ",", "mr", ",", "na", ",", "n", ",", "d", ",", "m1", 
       ",", "m2", ",", "oi", ",", "beta", ",", "shps", ",", "secpnts", ",", 
       "ana"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"mr", ",", "na", ",", "n", ",", "d", ",", "m2"}], "}"}], "=", 
       
       RowBox[{"commonParameters", "[", "parameters", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"oi", "=", 
       RowBox[{"mechanicalObjectImageDistance", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"m1", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"NumericQ", "[", "oi", "]"}], ",", 
         RowBox[{"oi", "-", "m2", "-", "d"}], ",", 
         RowBox[{"mechanicalObjectDistance", "/.", "parameters"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"beta", "=", 
       RowBox[{
        RowBox[{"-", "lateralMagnification"}], "/.", "parameters"}]}], ";", 
      RowBox[{"(*", 
       RowBox[{"why", " ", 
        RowBox[{"negate", "?", "see"}], " ", "original", " ", "expression"}], 
       "*)"}], 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x1", ",", "x2"}], "}"}], "=", 
       RowBox[{"SolveFinite", "[", 
        RowBox[{
         RowBox[{"mr", "*", "na", "*", "beta"}], ",", "n", ",", "d", ",", 
         "m1", ",", "m2", ",", "beta", ",", 
         RowBox[{"filterNDSolveOptions", "[", "parameters", "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"secpnts", "=", 
       RowBox[{"interpolationSectionPoints", "[", "x1", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ana", "=", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Last", "[", "secpnts", "]"}], "/", "mr"}], "/", "beta"}], "/.",
         "parameters"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"frontSurfaceShapeFunction", "\[Rule]", 
          RowBox[{"Interpolation", "[", 
           RowBox[{"mirroredData", "[", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"#", "*", 
                    RowBox[{"(", 
                    RowBox[{"m1", "+", 
                    RowBox[{"x1", "[", "#", "]"}]}], ")"}]}], ")"}], "/", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"1", "-", 
                    RowBox[{"#", "^", "2"}]}], "]"}]}], ",", 
                 RowBox[{"x1", "[", "#", "]"}]}], "}"}], "&"}], ",", 
              "secpnts"}], "]"}], "]"}], "]"}]}], ",", 
         RowBox[{"backSurfaceShapeFunction", "\[Rule]", 
          RowBox[{"Interpolation", "[", 
           RowBox[{"mirroredData", "[", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"#", "*", 
                    RowBox[{"(", 
                    RowBox[{"m2", "-", 
                    RowBox[{"x2", "[", "#", "]"}]}], ")"}]}], ")"}], "/", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "^", "2"}]}], "+", 
                    RowBox[{"beta", "^", "2"}]}], "]"}]}], ",", 
                 RowBox[{"d", "+", 
                  RowBox[{"x2", "[", "#", "]"}]}]}], "}"}], "&"}], ",", 
              "secpnts"}], "]"}], "]"}], "]"}]}], ",", 
         RowBox[{"numericalAperture", "\[Rule]", "ana"}], ",", "parameters"}],
         "}"}], "]"}]}]}], "]"}]}], "\n", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"biasphericAplanatSolveFiniteWithImageCoverGlass", "[", 
    RowBox[{"parameters", ":", 
     RowBox[{"{", "__Rule", "}"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "x1", ",", "x2", ",", "mr", ",", "na", ",", "n", ",", "d", ",", "m1", 
       ",", "m2", ",", "oi", ",", "beta", ",", "mc", ",", "dc", ",", "nc", 
       ",", "shps", ",", "secpnts", ",", "ana"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"mr", ",", "na", ",", "n", ",", "d", ",", "m2"}], "}"}], "=", 
       
       RowBox[{"commonParameters", "[", "parameters", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"oi", "=", 
       RowBox[{"mechanicalObjectImageDistance", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"m1", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"NumericQ", "[", "oi", "]"}], ",", 
         RowBox[{"oi", "-", "m2", "-", "d"}], ",", 
         RowBox[{"mechanicalObjectDistance", "/.", "parameters"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"beta", "=", 
       RowBox[{
        RowBox[{"-", "lateralMagnification"}], "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dc", "=", 
       RowBox[{"coverGlassThickness", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mc", "=", 
       RowBox[{"coverGlassMediumSymbol", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"nc", "=", 
       RowBox[{"refractiveIndexValue", "[", 
        RowBox[{"mc", ",", 
         RowBox[{"designWavelength", "/.", "parameters"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x1", ",", "x2"}], "}"}], "=", 
       RowBox[{"SolveFiniteWithCoverGlass", "[", 
        RowBox[{
         RowBox[{"mr", "*", "na", "*", "beta"}], ",", "n", ",", "d", ",", 
         "m1", ",", "m2", ",", "beta", ",", "dc", ",", "nc", ",", 
         RowBox[{"filterNDSolveOptions", "[", "parameters", "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"secpnts", "=", 
       RowBox[{"interpolationSectionPoints", "[", "x1", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ana", "=", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Last", "[", "secpnts", "]"}], "/", "mr"}], "/", "beta"}], "/.",
         "parameters"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"frontSurfaceShapeFunction", "\[Rule]", 
          RowBox[{"Interpolation", "[", 
           RowBox[{"mirroredData", "[", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"#", "*", 
                    RowBox[{"(", 
                    RowBox[{"m1", "+", 
                    RowBox[{"x1", "[", "#", "]"}]}], ")"}]}], ")"}], "/", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"1", "-", 
                    RowBox[{"#", "^", "2"}]}], "]"}]}], ",", 
                 RowBox[{"x1", "[", "#", "]"}]}], "}"}], "&"}], ",", 
              "secpnts"}], "]"}], "]"}], "]"}]}], ",", 
         RowBox[{"backSurfaceShapeFunction", "\[Rule]", 
          RowBox[{"Interpolation", "[", 
           RowBox[{"mirroredData", "[", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"#", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"dc", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"1", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "^", "2"}]}], "+", 
                    RowBox[{"beta", "^", "2"}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{"1", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "^", "2"}]}], "+", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc", "^", "2"}]}]}], "]"}]}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"m2", "-", 
                    RowBox[{"x2", "[", "#", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "^", "2"}]}], "+", 
                    RowBox[{"beta", "^", "2"}]}], "]"}]}]}], ")"}]}], ",", 
                 RowBox[{"d", "+", 
                  RowBox[{"x2", "[", "#", "]"}]}]}], "}"}], "&"}], ",", 
              "secpnts"}], "]"}], "]"}], "]"}]}], ",", 
         RowBox[{"numericalAperture", "\[Rule]", "ana"}], ",", "parameters"}],
         "}"}], "]"}]}]}], "]"}]}], "\n", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"biasphericAplanatSolveFiniteWithObjectCoverGlass", "[", 
    RowBox[{"parameters", ":", 
     RowBox[{"{", "__Rule", "}"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "x1", ",", "x2", ",", "mr", ",", "na", ",", "n", ",", "d", ",", "m1", 
       ",", "m2", ",", "oi", ",", "beta", ",", "mc", ",", "dc", ",", "nc", 
       ",", "shps", ",", "secpnts", ",", "ana"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"mr", ",", "na", ",", "n", ",", "d", ",", "m2"}], "}"}], "=", 
       
       RowBox[{"commonParameters", "[", "parameters", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"oi", "=", 
       RowBox[{"mechanicalObjectImageDistance", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"m1", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"NumericQ", "[", "oi", "]"}], ",", 
         RowBox[{"oi", "-", "m2", "-", "d"}], ",", 
         RowBox[{"mechanicalObjectDistance", "/.", "parameters"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"beta", "=", 
       RowBox[{
        RowBox[{"-", "lateralMagnification"}], "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dc", "=", 
       RowBox[{"objectSideCoverGlassThickness", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mc", "=", 
       RowBox[{"objectSideCoverGlassMediumSymbol", "/.", "parameters"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"nc", "=", 
       RowBox[{"refractiveIndexValue", "[", 
        RowBox[{"mc", ",", 
         RowBox[{"designWavelength", "/.", "parameters"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x1", ",", "x2"}], "}"}], "=", 
       RowBox[{"SolveFiniteWithObjectSpaceCoverGlass", "[", 
        RowBox[{
         RowBox[{"mr", "*", "na", "*", "beta"}], ",", "n", ",", "d", ",", 
         "m1", ",", "m2", ",", "beta", ",", "dc", ",", "nc", ",", 
         RowBox[{"filterNDSolveOptions", "[", "parameters", "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"secpnts", "=", 
       RowBox[{"interpolationSectionPoints", "[", "x1", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ana", "=", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Last", "[", "secpnts", "]"}], "/", "mr"}], "/", "beta"}], "/.",
         "parameters"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"frontSurfaceShapeFunction", "\[Rule]", 
          RowBox[{"Interpolation", "[", 
           RowBox[{"mirroredData", "[", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"#", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"1", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"#", "^", "2"}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{"1", "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"nc", "^", "2"}], "-", 
                    RowBox[{"#", "^", "2"}]}], "]"}]}]}], ")"}], "*", "dc"}], 
                    "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"m1", "+", 
                    RowBox[{"x1", "[", "#", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"#", "^", "2"}]}], "]"}]}]}], ")"}]}], ",", 
                 RowBox[{"x1", "[", "#", "]"}]}], "}"}], "&"}], ",", 
              "secpnts"}], "]"}], "]"}], "]"}]}], ",", 
         RowBox[{"backSurfaceShapeFunction", "\[Rule]", 
          RowBox[{"Interpolation", "[", 
           RowBox[{"mirroredData", "[", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"#", "*", 
                    RowBox[{"(", 
                    RowBox[{"m2", "-", 
                    RowBox[{"x2", "[", "#", "]"}]}], ")"}]}], ")"}], "/", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{"beta", "^", "2"}], "-", 
                    RowBox[{"#", "^", "2"}]}], "]"}]}], ",", 
                 RowBox[{"d", "+", 
                  RowBox[{"x2", "[", "#", "]"}]}]}], "}"}], "&"}], ",", 
              "secpnts"}], "]"}], "]"}], "]"}]}], ",", 
         RowBox[{"numericalAperture", "\[Rule]", "ana"}], ",", "parameters"}],
         "}"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "biasphericAplanatSolveFiniteWithBothImageAndObjectCoverGlass", "[", 
    RowBox[{"parameters", ":", 
     RowBox[{"{", "__Rule", "}"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "x1", ",", "x2", ",", "mr", ",", "na", ",", "n", ",", "d", ",", "m1", 
       ",", "m2", ",", "oi", ",", "beta", ",", "mc1", ",", "dc1", ",", "nc1", 
       ",", "mc2", ",", "nc2", ",", "dc2", ",", "shps", ",", "secpnts", ",", 
       "ana"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"mr", ",", "na", ",", "n", ",", "d", ",", "m2"}], "}"}], "=", 
       
       RowBox[{"commonParameters", "[", "parameters", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"oi", "=", 
       RowBox[{"mechanicalObjectImageDistance", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"m1", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"NumericQ", "[", "oi", "]"}], ",", 
         RowBox[{"oi", "-", "m2", "-", "d"}], ",", 
         RowBox[{"mechanicalObjectDistance", "/.", "parameters"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"beta", "=", 
       RowBox[{
        RowBox[{"-", "lateralMagnification"}], "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dc2", "=", 
       RowBox[{"coverGlassThickness", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mc2", "=", 
       RowBox[{"coverGlassMediumSymbol", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"nc2", "=", 
       RowBox[{"refractiveIndexValue", "[", 
        RowBox[{"mc2", ",", 
         RowBox[{"designWavelength", "/.", "parameters"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dc1", "=", 
       RowBox[{"objectSideCoverGlassThickness", "/.", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mc1", "=", 
       RowBox[{"objectSideCoverGlassMediumSymbol", "/.", "parameters"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"nc1", "=", 
       RowBox[{"refractiveIndexValue", "[", 
        RowBox[{"mc1", ",", 
         RowBox[{"designWavelength", "/.", "parameters"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x1", ",", "x2"}], "}"}], "=", 
       RowBox[{"SolveFiniteWithBothSpaceCoverGlass", "[", 
        RowBox[{
         RowBox[{"mr", "*", "na", "*", "beta"}], ",", "n", ",", "d", ",", 
         "m1", ",", "m2", ",", "beta", ",", "dc1", ",", "nc1", ",", "dc2", 
         ",", "nc2", ",", 
         RowBox[{"filterNDSolveOptions", "[", "parameters", "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"secpnts", "=", 
       RowBox[{"interpolationSectionPoints", "[", "x1", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ana", "=", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Last", "[", "secpnts", "]"}], "/", "mr"}], "/", "beta"}], "/.",
         "parameters"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"frontSurfaceShapeFunction", "\[Rule]", 
          RowBox[{"Interpolation", "[", 
           RowBox[{"mirroredData", "[", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"#", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"dc1", "/", 
                    RowBox[{"(", 
                    RowBox[{"nc1", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"#", "^", "2"}], "/", 
                    RowBox[{"nc1", "^", "2"}]}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc1"}], "+", "m1"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"#", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"x1", "[", "#", "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"#", "^", "2"}]}], "]"}]}]}], ")"}]}], ",", 
                 RowBox[{"x1", "[", "#", "]"}]}], "}"}], "&"}], ",", 
              "secpnts"}], "]"}], "]"}], "]"}]}], ",", 
         RowBox[{"backSurfaceShapeFunction", "\[Rule]", 
          RowBox[{"Interpolation", "[", 
           RowBox[{"mirroredData", "[", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"#", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"dc2", "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", "nc2", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"#", "^", "2"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc2", "^", "2"}]}], ")"}]}]}], "]"}]}], ")"}]}], 
                    "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc2"}], "+", "m2"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "-", 
                    RowBox[{"#", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"x2", "[", "#", "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "-", 
                    RowBox[{"#", "^", "2"}]}], "]"}]}]}], ")"}]}], ",", 
                 RowBox[{"d", "+", 
                  RowBox[{"x2", "[", "#", "]"}]}]}], "}"}], "&"}], ",", 
              "secpnts"}], "]"}], "]"}], "]"}]}], ",", 
         RowBox[{"numericalAperture", "\[Rule]", "ana"}], ",", "parameters"}],
         "}"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SolveInfinite", "[", 
    RowBox[{
    "na_", ",", "n_", ",", "d_", ",", "m_", ",", "f_", ",", "opt___"}], "]"}],
    ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"fn", ",", "x1", ",", "x2", ",", "t", ",", "sols"}], "}"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"fn", "=", 
       RowBox[{"f", "*", "n"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"sols", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"NDSolve", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"x1", "'"}], "[", "t", "]"}], "==", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"fn", "*", "t", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "m"}], "+", 
                    RowBox[{"f", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Sqrt", "[", 
                   RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"d", "*", "n"}], ")"}]}], "+", 
                    RowBox[{"n", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], "-", 
                    RowBox[{"n", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], "+", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "*", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "m"}], "+", 
                    RowBox[{"f", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}]}], 
                    ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"t", "^", "2"}]}], ")"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}], ")"}]}], ")"}]}], ")"}]}]}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"x2", "'"}], "[", "t", "]"}], "\[Equal]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"t", "*", 
                RowBox[{"(", 
                 RowBox[{"m", "-", 
                  RowBox[{"x2", "[", "t", "]"}]}], ")"}], "*", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"n", 
                   RowBox[{"(", 
                    RowBox[{"m", "-", 
                    RowBox[{"f", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}]}], "+", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}], "*", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "*", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "m"}], "+", 
                    RowBox[{"f", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}]}], 
                    ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"t", "^", "2"}]}], ")"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}]}], ")"}]}], ")"}], "/", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"-", "1"}], "+", 
                  RowBox[{"t", "^", "2"}]}], ")"}], "*", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"n", "*", 
                   RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"d", "*", 
                    RowBox[{"t", "^", "2"}]}], "-", 
                    RowBox[{"m", "*", 
                    RowBox[{"t", "^", "2"}]}], "+", 
                    RowBox[{"f", "*", 
                    RowBox[{"t", "^", "2"}], "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"t", "^", "2"}]}], ")"}], "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}]}], "-", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}], "*", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "*", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "m"}], "+", 
                    RowBox[{"f", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}]}], 
                    ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"t", "^", "2"}]}], ")"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}]}], 
                    "]"}]}]}], ")"}]}], ")"}]}]}], ",", 
            RowBox[{
             RowBox[{"x1", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
            RowBox[{
             RowBox[{"x2", "[", "0", "]"}], "\[Equal]", "0"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"x1", ",", "x2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"t", ",", "0", ",", "na"}], "}"}], ",", "opt"}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x1", "/.", "sols"}], ",", 
        RowBox[{"x2", "/.", "sols"}]}], "}"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SolveInfiniteWithCoverGlass", "[", 
    RowBox[{
    "na_", ",", "n_", ",", "d_", ",", "m_", ",", "f_", ",", "dc_", ",", "nc_",
      ",", "opt___"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x1", ",", "x2", ",", "t", ",", "sols"}], "}"}], ",", 
     RowBox[{
      RowBox[{"sols", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"NDSolve", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"x1", "'"}], "[", "t", "]"}], "\[Equal]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"f", "*", "n", "*", "t", "*", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"-", "f"}], "+", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"m", "-", "dc"}], ")"}], "/", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                  RowBox[{"dc", "/", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc", "^", "2"}]}]}], "]"}], "*", "nc"}], ")"}]}],
                   "-", 
                  RowBox[{
                   RowBox[{"x2", "[", "t", "]"}], "/", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}]}], ")"}]}], ")"}], "/", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"-", 
                 RowBox[{"(", 
                  RowBox[{"n", "*", 
                   RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}]}], ")"}]}], "+", 
                RowBox[{"Sqrt", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}], "+", 
                  RowBox[{
                   RowBox[{"t", "^", "2"}], "*", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"f", "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "m"}], "+", "dc"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{"dc", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc", "^", "2"}]}]}], "]"}], "*", "nc"}], ")"}]}],
                     "+", 
                    RowBox[{
                    RowBox[{"x2", "[", "t", "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}]}], ")"}], "^", 
                    "2"}]}]}], "]"}]}], ")"}]}]}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"x2", "'"}], "[", "t", "]"}], "\[Equal]", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"t", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"m", "-", "dc"}], ")"}], "/", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"3", "/", "2"}], ")"}]}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "*", "dc"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc", "^", "2"}]}]}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"3", "/", "2"}], ")"}]}], "*", 
                    RowBox[{"nc", "^", "3"}]}], ")"}]}], "+", 
                    RowBox[{"dc", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc", "^", "2"}]}]}], "]"}], "*", "nc"}], ")"}]}],
                     "-", 
                    RowBox[{
                    RowBox[{"x2", "[", "t", "]"}], "/", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"3", "/", "2"}], ")"}]}]}]}], ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"f", "*", "n"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "m"}], "+", "dc"}], ")"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "dc"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc", "^", "2"}]}]}], "]"}], "*", "nc"}], ")"}]}],
                     "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "*", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"f", "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "m"}], "+", "dc"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{"dc", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc", "^", "2"}]}]}], "]"}], "*", "nc"}], ")"}]}],
                     "+", 
                    RowBox[{
                    RowBox[{"x2", "[", "t", "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}]}], ")"}], "^", 
                    "2"}]}]}], "]"}]}], ")"}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"(", 
                    RowBox[{"n", "*", 
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}]}], ")"}]}], "+", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"n", "*", 
                    RowBox[{"t", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "f"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"m", "-", "dc"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{"dc", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc", "^", "2"}]}]}], "]"}], "*", "nc"}], ")"}]}],
                     "-", 
                    RowBox[{
                    RowBox[{"x2", "[", "t", "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}]}], ")"}]}], ")"}], "/", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "*", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"f", "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "m"}], "+", "dc"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{"dc", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc", "^", "2"}]}]}], "]"}], "*", "nc"}], ")"}]}],
                     "+", 
                    RowBox[{
                    RowBox[{"x2", "[", "t", "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}]}], ")"}], "^", 
                    "2"}]}]}], "]"}], "/", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}]}], ")"}]}], ")"}]}]}], 
            ",", 
            RowBox[{
             RowBox[{"x1", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
            RowBox[{
             RowBox[{"x2", "[", "0", "]"}], "\[Equal]", "0"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"x1", ",", "x2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"t", ",", "0", ",", "na"}], "}"}], ",", "opt"}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x1", "/.", "sols"}], ",", 
        RowBox[{"x2", "/.", "sols"}]}], "}"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SolveFinite", "[", 
    RowBox[{
    "na_", ",", "n_", ",", "d_", ",", "m1_", ",", "m2_", ",", "beta_", ",", 
     "opt___"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x1", ",", "x2", ",", "t", ",", "sols"}], "}"}], ",", 
     RowBox[{
      RowBox[{"sols", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"NDSolve", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"x1", "'"}], "[", "t", "]"}], "\[Equal]", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"m1", "+", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"n", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m1"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m2"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}]}], ")"}]}], ")"}]}], "+", 
                    RowBox[{"t", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m1"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m2"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}]}], ")"}], "^", "2"}]}], "]"}]}]}], ")"}]}], ")"}],
                 "/", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], ")"}], "^", 
                   RowBox[{"(", 
                    RowBox[{"3", "/", "2"}], ")"}]}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"n", "*", 
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}]}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m1"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m2"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}]}], ")"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m1"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m2"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}]}], ")"}], "^", "2"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}]}], ")"}]}], ")"}]}], 
               ")"}]}]}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"x2", "'"}], "[", "t", "]"}], "\[Equal]", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"beta", "^", "2"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"m2", "-", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"n", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m1"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m2"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}]}], ")"}]}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m1"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m2"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}]}], ")"}], "^", "2"}]}], "]"}]}], ")"}], "/", 
                    "beta"}]}], ")"}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"t", "^", "2"}]}], "+", 
                    RowBox[{"beta", "^", "2"}]}], ")"}], "^", 
                   RowBox[{"(", 
                    RowBox[{"3", "/", "2"}], ")"}]}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"n", "*", 
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", 
                    RowBox[{"t", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta", "*", 
                    "m1"}], "-", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}], "*", "m2"}], "+", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}], "*", 
                    RowBox[{"x2", "[", "t", "]"}]}]}], ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "-", 
                    RowBox[{"beta", "^", "2"}]}], ")"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m1"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m2"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}]}], ")"}], "^", "2"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}]}], ")"}]}], 
                 ")"}]}], ")"}]}]}], ",", 
            RowBox[{
             RowBox[{"x1", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
            RowBox[{
             RowBox[{"x2", "[", "0", "]"}], "\[Equal]", "0"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"x1", ",", "x2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"t", ",", "0", ",", "na"}], "}"}], ",", "opt"}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x1", "/.", "sols"}], ",", 
        RowBox[{"x2", "/.", "sols"}]}], "}"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SolveFiniteWithCoverGlass", "[", 
    RowBox[{
    "na_", ",", "n_", ",", "d_", ",", "m1_", ",", "m2_", ",", "beta_", ",", 
     "dc_", ",", "nc_", ",", "opt___"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x1", ",", "x2", ",", "t", ",", "sols"}], "}"}], ",", 
     RowBox[{
      RowBox[{"sols", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"NDSolve", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"x1", "'"}], "[", "t", "]"}], "\[Equal]", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"m1", "+", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", "m1"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"(", 
                    RowBox[{"dc", "-", "m2"}], ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", "dc"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc", "^", "2"}]}], ")"}]}]}], "]"}], "*", "nc"}],
                     ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "+", 
                    RowBox[{"t", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m1"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"(", 
                    RowBox[{"dc", "-", "m2"}], ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "dc"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc", "^", "2"}]}], ")"}]}]}], "]"}], "*", "nc"}],
                     ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}]}], ")"}], "^", "2"}]}], "]"}]}]}], ")"}]}], ")"}],
                 "/", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], ")"}], "^", 
                   RowBox[{"(", 
                    RowBox[{"3", "/", "2"}], ")"}]}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"n", "*", 
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}]}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m1"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc"}], "+", "m2"}], ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "dc"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc", "^", "2"}]}], ")"}]}]}], "]"}], "*", "nc"}],
                     ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}]}], ")"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m1"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"(", 
                    RowBox[{"dc", "-", "m2"}], ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "dc"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc", "^", "2"}]}], ")"}]}]}], "]"}], "*", "nc"}],
                     ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}]}], ")"}], "^", "2"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}]}], ")"}]}], ")"}]}], 
               ")"}]}]}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"x2", "'"}], "[", "t", "]"}], "\[Equal]", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"beta", "^", "2"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"m2", "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"dc", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"t", "^", "4"}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"t", "^", "2"}], "*", 
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc", "^", "2"}]}], "+", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", 
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "-", 
                    RowBox[{"beta", "^", "2"}]}], ")"}], "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc", "^", "2"}]}], ")"}]}]}], "]"}], "*", 
                    RowBox[{"nc", "^", "3"}]}], "+", 
                    RowBox[{
                    RowBox[{"beta", "^", "4"}], "*", 
                    RowBox[{"nc", "^", "4"}]}]}], ")"}]}], ")"}], "/", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc", "^", "2"}]}]}], ")"}], "^", "2"}]}], "-", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", "m1"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"(", 
                    RowBox[{"dc", "-", "m2"}], ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", "dc"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc", "^", "2"}]}], ")"}]}]}], "]"}], "*", "nc"}],
                     ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m1"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"(", 
                    RowBox[{"dc", "-", "m2"}], ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "dc"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc", "^", "2"}]}], ")"}]}]}], "]"}], "*", "nc"}],
                     ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}]}], ")"}], "^", "2"}]}], "]"}]}], ")"}], "/", 
                    "beta"}]}], ")"}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"t", "^", "2"}]}], "+", 
                    RowBox[{"beta", "^", "2"}]}], ")"}], "^", 
                   RowBox[{"(", 
                    RowBox[{"3", "/", "2"}], ")"}]}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"n", "*", 
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m1"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc"}], "+", "m2"}], ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "dc"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc", "^", "2"}]}], ")"}]}]}], "]"}], "*", "nc"}],
                     ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}]}], ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "m1"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"(", 
                    RowBox[{"dc", "-", "m2"}], ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "dc"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc", "^", "2"}]}], ")"}]}]}], "]"}], "*", "nc"}],
                     ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}]}], ")"}], "^", "2"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}]}], ")"}]}], 
                 ")"}]}], ")"}]}]}], ",", 
            RowBox[{
             RowBox[{"x1", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
            RowBox[{
             RowBox[{"x2", "[", "0", "]"}], "\[Equal]", "0"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"x1", ",", "x2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"t", ",", "0", ",", "na"}], "}"}], ",", "opt"}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x1", "/.", "sols"}], ",", 
        RowBox[{"x2", "/.", "sols"}]}], "}"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SolveFiniteWithObjectSpaceCoverGlass", "[", 
    RowBox[{
    "na_", ",", "n_", ",", "d_", ",", "m1_", ",", "m2_", ",", "beta_", ",", 
     "dc_", ",", "nc_", ",", "opt___"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x1", ",", "x2", ",", "t", ",", "sols"}], "}"}], ",", 
     RowBox[{
      RowBox[{"sols", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"NDSolve", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"x1", "'"}], "[", "t", "]"}], "\[Equal]", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc"}], "+", "m1"}], ")"}], "/", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"3", "/", "2"}], ")"}]}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"dc", "*", 
                    RowBox[{"t", "^", "2"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"nc", "^", "3"}], "*", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc", "^", "2"}]}]}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"3", "/", "2"}], ")"}]}]}], ")"}]}], "+", 
                    RowBox[{"dc", "/", 
                    RowBox[{"(", 
                    RowBox[{"nc", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc", "^", "2"}]}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"x1", "[", "t", "]"}], "/", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"3", "/", "2"}], ")"}]}]}]}], ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc"}], "+", "m1"}], ")"}], "*", "n", "*", 
                    "t"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"m2", "*", "n", "*", "t"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"dc", "*", "n", "*", "t"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"nc", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc", "^", "2"}]}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{"t", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc"}], "+", "m1"}], ")"}], "*", "t"}], 
                    ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"m2", "*", "t"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"dc", "*", "t"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"nc", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc", "^", "2"}]}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}], ")"}]}]}], ")"}],
                     "^", "2"}]}], "]"}]}]}], ")"}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"(", 
                    RowBox[{"n", "*", 
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}]}], ")"}]}], "-", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"dc", "-", "m1"}], ")"}], "*", "t"}], ")"}], "/", 
                    
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"m2", "*", "t"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"dc", "*", "t"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"nc", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc", "^", "2"}]}]}], "]"}]}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}], ")"}]}]}], 
                    ")"}]}], ")"}], "/", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc"}], "+", "m1"}], ")"}], "*", "t"}], 
                    ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"m2", "*", "t"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"dc", "*", "t"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"nc", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc", "^", "2"}]}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}], ")"}]}]}], ")"}],
                     "^", "2"}]}], "]"}], "/", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}]}], ")"}]}], ")"}]}]}], 
            ",", 
            RowBox[{
             RowBox[{
              RowBox[{"x2", "'"}], "[", "t", "]"}], "\[Equal]", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"beta", "^", "2"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"m2", "-", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc"}], "+", "m1"}], ")"}], "*", "n", "*", 
                    "t"}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"m2", "*", "n", "*", "t"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"dc", "*", "n", "*", "t"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"nc", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc", "^", "2"}]}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc"}], "+", "m1"}], ")"}], "*", "t"}], 
                    ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"m2", "*", "t"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"dc", "*", "t"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"nc", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc", "^", "2"}]}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}], ")"}]}]}], ")"}],
                     "^", "2"}]}], "]"}]}], ")"}], "/", "beta"}]}], ")"}]}], 
                 ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "-", 
                    RowBox[{"t", "^", "2"}]}], ")"}], "^", 
                   RowBox[{"(", 
                    RowBox[{"3", "/", "2"}], ")"}]}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"n", "*", 
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"dc", "-", "m1"}], ")"}], "*", "t"}], ")"}], "/", 
                    
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"m2", "*", "t"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"dc", "*", "t"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"nc", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc", "^", "2"}]}]}], "]"}]}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}], ")"}]}]}], 
                    ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc"}], "+", "m1"}], ")"}], "*", "t"}], 
                    ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"m2", "*", "t"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"dc", "*", "t"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"nc", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc", "^", "2"}]}]}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}], ")"}]}]}], ")"}],
                     "^", "2"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}]}], ")"}]}], 
                 ")"}]}], ")"}]}]}], ",", 
            RowBox[{
             RowBox[{"x1", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
            RowBox[{
             RowBox[{"x2", "[", "0", "]"}], "\[Equal]", "0"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"x1", ",", "x2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"t", ",", "0", ",", "na"}], "}"}], ",", "opt"}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x1", "/.", "sols"}], ",", 
        RowBox[{"x2", "/.", "sols"}]}], "}"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SolveFiniteWithBothSpaceCoverGlass", "[", 
    RowBox[{
    "na_", ",", "n_", ",", "d_", ",", "m1_", ",", "m2_", ",", "beta_", ",", 
     "dc1_", ",", "nc1_", ",", "dc2_", ",", "nc2_", ",", "opt___"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x1", ",", "x2", ",", "t", ",", "sols"}], "}"}], ",", 
     RowBox[{
      RowBox[{"sols", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"NDSolve", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"x1", "'"}], "[", "t", "]"}], "\[Equal]", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc1"}], "+", "m1"}], ")"}], "/", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"3", "/", "2"}], ")"}]}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "*", "dc1"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc1", "^", "2"}]}]}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"3", "/", "2"}], ")"}]}], "*", 
                    RowBox[{"nc1", "^", "3"}]}], ")"}]}], "+", 
                    RowBox[{"dc1", "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc1", "^", "2"}]}]}], "]"}], "*", "nc1"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"x1", "[", "t", "]"}], "/", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"3", "/", "2"}], ")"}]}]}]}], ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc1"}], "+", "m1"}], ")"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"(", 
                    RowBox[{"dc2", "-", "m2"}], ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", "dc1"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc1", "^", "2"}]}]}], "]"}], "*", "nc1"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", "dc2"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc2", "^", "2"}]}], ")"}]}]}], "]"}], "*", 
                    "nc2"}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "+", 
                    RowBox[{"t", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"(", 
                    RowBox[{"dc1", "-", "m1"}], ")"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc2"}], "+", "m2"}], ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "dc1"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc1", "^", "2"}]}]}], "]"}], "*", "nc1"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "dc2"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc2", "^", "2"}]}], ")"}]}]}], "]"}], "*", 
                    "nc2"}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}]}], ")"}], "^", "2"}]}], "]"}]}]}], ")"}]}], ")"}],
                 "/", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"(", 
                    RowBox[{"n", "*", 
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}]}], ")"}]}], "-", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"(", 
                    RowBox[{"dc1", "-", "m1"}], ")"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc2"}], "+", "m2"}], ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "dc1"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc1", "^", "2"}]}]}], "]"}], "*", "nc1"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "dc2"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc2", "^", "2"}]}], ")"}]}]}], "]"}], "*", 
                    "nc2"}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}]}], ")"}]}], ")"}], "/", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                  RowBox[{
                   RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"(", 
                    RowBox[{"dc1", "-", "m1"}], ")"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc2"}], "+", "m2"}], ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "dc1"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc1", "^", "2"}]}]}], "]"}], "*", "nc1"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "dc2"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc2", "^", "2"}]}], ")"}]}]}], "]"}], "*", 
                    "nc2"}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}]}], ")"}], "^", "2"}]}], "]"}], "/", 
                   RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}]}], ")"}]}], ")"}]}]}], 
            ",", 
            RowBox[{
             RowBox[{
              RowBox[{"x2", "'"}], "[", "t", "]"}], "\[Equal]", 
             RowBox[{"-", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"beta", "^", "2"}], "*", 
                  RowBox[{"(", 
                   RowBox[{"m2", "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"dc2", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"t", "^", "4"}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"t", "^", "2"}], "*", 
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc2", "^", "2"}]}], "+", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", 
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "-", 
                    RowBox[{"beta", "^", "2"}]}], ")"}], "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc2", "^", "2"}]}], ")"}]}]}], "]"}], "*", 
                    RowBox[{"nc2", "^", "3"}]}], "+", 
                    RowBox[{
                    RowBox[{"beta", "^", "4"}], "*", 
                    RowBox[{"nc2", "^", "4"}]}]}], ")"}]}], ")"}], "/", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "-", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc2", "^", "2"}]}]}], ")"}], "^", "2"}]}], "-", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc1"}], "+", "m1"}], ")"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"(", 
                    RowBox[{"dc2", "-", "m2"}], ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", "dc1"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc1", "^", "2"}]}]}], "]"}], "*", "nc1"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", "dc2"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc2", "^", "2"}]}], ")"}]}]}], "]"}], "*", 
                    "nc2"}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"(", 
                    RowBox[{"dc1", "-", "m1"}], ")"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc2"}], "+", "m2"}], ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "dc1"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc1", "^", "2"}]}]}], "]"}], "*", "nc1"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "dc2"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc2", "^", "2"}]}], ")"}]}]}], "]"}], "*", 
                    "nc2"}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}]}], ")"}], "^", "2"}]}], "]"}]}], ")"}], "/", 
                    "beta"}]}], ")"}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"t", "^", "2"}]}], "+", 
                    RowBox[{"beta", "^", "2"}]}], ")"}], "^", 
                   RowBox[{"(", 
                    RowBox[{"3", "/", "2"}], ")"}]}], "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"n", "*", 
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "*", "t", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"(", 
                    RowBox[{"dc1", "-", "m1"}], ")"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc2"}], "+", "m2"}], ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "dc1"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc1", "^", "2"}]}]}], "]"}], "*", "nc1"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "dc2"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc2", "^", "2"}]}], ")"}]}]}], "]"}], "*", 
                    "nc2"}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}]}], ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"x1", "[", "t", "]"}], "+", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "^", "2"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"(", 
                    RowBox[{"dc1", "-", "m1"}], ")"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "dc2"}], "+", "m2"}], ")"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "dc1"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"nc1", "^", "2"}]}]}], "]"}], "*", "nc1"}], 
                    ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", "dc2"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"beta", "*", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"beta", "^", "2"}], "*", 
                    RowBox[{"nc2", "^", "2"}]}], ")"}]}]}], "]"}], "*", 
                    "nc2"}], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x1", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"t", "^", "2"}]}], "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", "*", 
                    RowBox[{"x2", "[", "t", "]"}]}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}], "*", "beta"}], 
                    ")"}]}]}], ")"}], "^", "2"}]}], "]"}], "/", 
                    RowBox[{"Sqrt", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"t", "^", "2"}], "/", 
                    RowBox[{"beta", "^", "2"}]}]}], "]"}]}]}], ")"}]}], 
                 ")"}]}], ")"}]}]}], ",", 
            RowBox[{
             RowBox[{"x1", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
            RowBox[{
             RowBox[{"x2", "[", "0", "]"}], "\[Equal]", "0"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"x1", ",", "x2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"t", ",", "0", ",", "na"}], "}"}], ",", "opt"}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x1", "/.", "sols"}], ",", 
        RowBox[{"x2", "/.", "sols"}]}], "}"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"mirroredData", "[", 
    RowBox[{"l", ":", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"_", ",", "_"}], "}"}], "..."}], "}"}]}], "]"}], ":=", 
   RowBox[{"Union", "[", 
    RowBox[{
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ",", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], ",", "l"}], 
        "]"}], ",", "l"}], "]"}], ",", 
     RowBox[{"SameTest", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"Abs", "[", 
          RowBox[{
           RowBox[{"#1", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "-", 
           RowBox[{"#2", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "<", 
         RowBox[{"10", "^", 
          RowBox[{"-", "10"}]}]}], "&"}], ")"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "setOpticsFor2DRayTrace", "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"tracingWavelength", "\[Rule]", "designWavelength"}], ",", 
      RowBox[{"decenterBetweenAspherics", "\[Rule]", "0"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"setOpticsFor2DRayTrace", "[", 
    RowBox[{"op_Symbol", ",", 
     RowBox[{"solverResult", ":", 
      RowBox[{"{", "__Rule", "}"}]}], ",", "opt___Rule"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"conjugateInfiniteness", "/.", "solverResult"}], ",", 
     RowBox[{"setOpticsFor2DRayTraceInfinite", "[", 
      RowBox[{"op", ",", "solverResult", ",", "opt"}], "]"}], ",", 
     RowBox[{"setOpticsFor2DRayTraceFinite", "[", 
      RowBox[{"op", ",", "solverResult", ",", "opt"}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"setOpticsFor2DRayTraceInfinite", "[", 
    RowBox[{"op_Symbol", ",", 
     RowBox[{"solverResult", ":", 
      RowBox[{"{", "__Rule", "}"}]}], ",", "opt___Rule"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "wl", ",", "s1", ",", "pup", ",", "s2", ",", "img", ",", "ref", ",", 
       "cgi", ",", "cgo", ",", "bod", ",", "ncg", ",", "dec", ",", "mrg"}], 
      "}"}], ",", 
     RowBox[{
      RowBox[{"wl", "=", 
       RowBox[{
        RowBox[{"tracingWavelength", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"{", 
         RowBox[{"tracingWavelength", "\[Rule]", 
          RowBox[{"(", 
           RowBox[{"designWavelength", "/.", "solverResult"}], ")"}]}], 
         "}"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"dec", "=", 
       RowBox[{
        RowBox[{"decenterBetweenAspherics", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "setOpticsFor2DRayTrace", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"createSurface", "[", 
       RowBox[{"s1", ",", 
        RowBox[{"parametricShape", "[", 
         RowBox[{"frontSurfaceShapeFunction", "/.", "solverResult"}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"attachAttributeToSurface", "[", 
       RowBox[{
       "s1", ",", "solverAsphericalSurface", ",", 
        "frontSolverAsphericalSurface"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"createSurface", "[", 
       RowBox[{"pup", ",", 
        RowBox[{"planeShape", "[", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{
           RowBox[{"marginalPositionOfSurface", "[", "s1", "]"}], "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "1"}], "]"}], "]"}]}], "}"}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"createSurface", "[", 
       RowBox[{"s2", ",", 
        RowBox[{"parametricShape", "[", 
         RowBox[{"backSurfaceShapeFunction", "/.", "solverResult"}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"dec", ",", "0"}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"attachAttributeToSurface", "[", 
       RowBox[{
       "s2", ",", "solverAsphericalSurface", ",", 
        "backSolverAsphericalSurface"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"createSurface", "[", 
       RowBox[{"img", ",", 
        RowBox[{"planeShape", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "2"}], ",", "2"}], "}"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{
           RowBox[{"lensMediumThickness", "+", "mechanicalImageDistance"}], "/.",
            "solverResult"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"createSurface", "[", 
       RowBox[{"ref", ",", 
        RowBox[{"sphericalShape", "[", 
         RowBox[{
          RowBox[{"1", "/", "focalLength"}], "/.", "solverResult"}], "]"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{
           RowBox[{
           "lensMediumThickness", "+", "mechanicalImageDistance", "-", 
            "focalLength"}], "/.", "solverResult"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"bod", "=", 
       RowBox[{"lensMediumSymbol", "/.", "solverResult"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Clear", "[", "op", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"coverGlassExistence", "/.", "solverResult"}], ",", 
        RowBox[{
         RowBox[{"createSurface", "[", 
          RowBox[{"cgi", ",", 
           RowBox[{"planeShape", "[", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"lensMediumThickness", "+", 
                RowBox[{"mechanicalImageDistance", "/", "2"}], "-", 
                RowBox[{"coverGlassThickness", "/", "2"}]}], ")"}], "/.", 
              "solverResult"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
         
         RowBox[{"createSurface", "[", 
          RowBox[{"cgo", ",", 
           RowBox[{"planeShape", "[", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"lensMediumThickness", "+", 
                RowBox[{"mechanicalImageDistance", "/", "2"}], "+", 
                RowBox[{"coverGlassThickness", "/", "2"}]}], ")"}], "/.", 
              "solverResult"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
         
         RowBox[{"ncg", "=", 
          RowBox[{"coverGlassMediumSymbol", "/.", "solverResult"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"createOptics", "[", 
          RowBox[{"op", ",", 
           RowBox[{"{", 
            RowBox[{
            "atmosphere", ",", "s1", ",", "bod", ",", "pup", ",", "bod", ",", 
             "s2", ",", "atmosphere", ",", "cgi", ",", "ncg", ",", "cgo", ",",
              "atmosphere", ",", "img", ",", "atmosphere", ",", "ref", ",", 
             "atmosphere"}], "}"}]}], "]"}]}], ",", 
        RowBox[{"createOptics", "[", 
         RowBox[{"op", ",", 
          RowBox[{"{", 
           RowBox[{
           "atmosphere", ",", "s1", ",", "bod", ",", "pup", ",", "bod", ",", 
            "s2", ",", "atmosphere", ",", "img", ",", "atmosphere", ",", 
            "ref", ",", "atmosphere"}], "}"}]}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mrg", "=", 
       RowBox[{
        RowBox[{"numericalAperture", "*", "focalLength"}], "/.", 
        "solverResult"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"traceRay", "[", "op", "]"}], "[", 
       RowBox[{
        RowBox[{"markRayAsDomainDefinedMarginal", "[", 
         RowBox[{"raySet", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"mrg", ",", 
             RowBox[{"-", "0.3"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "]"}], "]"}], ",", "wl"}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"setPupil", "[", 
       RowBox[{"op", ",", "pup"}], "]"}], ";", "\[IndentingNewLine]", 
      "op"}]}], "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"setOpticsFor2DRayTraceFinite", "[", 
   RowBox[{"op_Symbol", ",", 
    RowBox[{"solverResult", ":", 
     RowBox[{"{", "__Rule", "}"}]}], ",", "opt___Rule"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "wl", ",", "s1", ",", "pup", ",", "s2", ",", "img", ",", "ref", ",", 
      "cg1i", ",", "cg1o", ",", "cg2i", ",", "cg2o", ",", "bod", ",", "ncg1", 
      ",", "ncg2", ",", "do", ",", "oplis", ",", "dec", ",", "mrg"}], "}"}], 
    ",", 
    RowBox[{
     RowBox[{"wl", "=", 
      RowBox[{
       RowBox[{"tracingWavelength", "/.", 
        RowBox[{"{", "opt", "}"}]}], "/.", 
       RowBox[{"{", 
        RowBox[{"tracingWavelength", "\[Rule]", 
         RowBox[{"(", 
          RowBox[{"designWavelength", "/.", "solverResult"}], ")"}]}], 
        "}"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dec", "=", 
      RowBox[{
       RowBox[{"decenterBetweenAspherics", "/.", 
        RowBox[{"{", "opt", "}"}]}], "/.", 
       RowBox[{"Options", "[", "setOpticsFor2DRayTrace", "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"oplis", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"objectSideCoverGlassExistence", "/.", "solverResult"}], ",", 
        
        RowBox[{
         RowBox[{"createSurface", "[", 
          RowBox[{"cg1i", ",", 
           RowBox[{"planeShape", "[", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"-", "mechanicalObjectDistance"}], "/", "2"}], "-", 
                RowBox[{"objectSideCoverGlassThickness", "/", "2"}]}], ")"}], 
              "/.", "solverResult"}]}], "}"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"createSurface", "[", 
          RowBox[{"cg1o", ",", 
           RowBox[{"planeShape", "[", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"-", "mechanicalObjectDistance"}], "/", "2"}], "+", 
                RowBox[{"objectSideCoverGlassThickness", "/", "2"}]}], ")"}], 
              "/.", "solverResult"}]}], "}"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"ncg1", "=", 
          RowBox[{
          "objectSideCoverGlassMediumSymbol", "/.", "solverResult"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
          "atmosphere", ",", "cg1i", ",", "ncg1", ",", "cg1o", ",", 
           "atmosphere"}], "}"}]}], ",", 
        RowBox[{"{", "atmosphere", "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"createSurface", "[", 
      RowBox[{"s1", ",", 
       RowBox[{"parametricShape", "[", 
        RowBox[{"frontSurfaceShapeFunction", "/.", "solverResult"}], "]"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"attachAttributeToSurface", "[", 
      RowBox[{
      "s1", ",", "solverAsphericalSurface", ",", 
       "frontSolverAsphericalSurface"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"createSurface", "[", 
      RowBox[{"pup", ",", 
       RowBox[{"planeShape", "[", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{
          RowBox[{"marginalPositionOfSurface", "[", "s1", "]"}], "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "1"}], "]"}], "]"}]}], "}"}]}], "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"createSurface", "[", 
      RowBox[{"s2", ",", 
       RowBox[{"parametricShape", "[", 
        RowBox[{"backSurfaceShapeFunction", "/.", "solverResult"}], "]"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"dec", ",", "0"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"attachAttributeToSurface", "[", 
      RowBox[{
      "s2", ",", "solverAsphericalSurface", ",", 
       "backSolverAsphericalSurface"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"createSurface", "[", 
      RowBox[{"img", ",", 
       RowBox[{"planeShape", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "2"}], ",", "2"}], "}"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{
          RowBox[{"lensMediumThickness", "+", "mechanicalImageDistance"}], "/.",
           "solverResult"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"createSurface", "[", 
      RowBox[{"ref", ",", 
       RowBox[{"sphericalShape", "[", 
        RowBox[{
         RowBox[{"1", "/", "focalLength"}], "/.", "solverResult"}], "]"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{
          RowBox[{
          "lensMediumThickness", "+", "mechanicalImageDistance", "-", 
           "focalLength"}], "/.", "solverResult"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"bod", "=", 
      RowBox[{"lensMediumSymbol", "/.", "solverResult"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"oplis", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
        "oplis", ",", "s1", ",", "bod", ",", "pup", ",", "bod", ",", "s2", 
         ",", "atmosphere"}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"coverGlassExistence", "/.", "solverResult"}], ",", 
       RowBox[{
        RowBox[{"createSurface", "[", 
         RowBox[{"cg2i", ",", 
          RowBox[{"planeShape", "[", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"lensMediumThickness", "+", 
               RowBox[{"mechanicalImageDistance", "/", "2"}], "-", 
               RowBox[{"coverGlassThickness", "/", "2"}]}], ")"}], "/.", 
             "solverResult"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"createSurface", "[", 
         RowBox[{"cg2o", ",", 
          RowBox[{"planeShape", "[", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"lensMediumThickness", "+", 
               RowBox[{"mechanicalImageDistance", "/", "2"}], "+", 
               RowBox[{"coverGlassThickness", "/", "2"}]}], ")"}], "/.", 
             "solverResult"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"ncg2", "=", 
         RowBox[{"coverGlassMediumSymbol", "/.", "solverResult"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"oplis", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
           "oplis", ",", "cg2i", ",", "ncg2", ",", "cg2o", ",", 
            "atmosphere"}], "}"}], "]"}]}], ";"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"createSurface", "[", 
      RowBox[{"img", ",", 
       RowBox[{"planeShape", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "2"}], ",", "2"}], "}"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{
          RowBox[{"lensMediumThickness", "+", "mechanicalImageDistance"}], "/.",
           "solverResult"}]}], "}"}]}], "]"}], ";", 
     RowBox[{"oplis", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
        "oplis", ",", "img", ",", "atmosphere", ",", "ref", ",", 
         "atmosphere"}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Clear", "[", "op", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"createOptics", "[", 
      RowBox[{"op", ",", "oplis"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"mrg", "=", 
      RowBox[{"ArcSin", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "numericalAperture"}], "*", "lateralMagnification"}], "/.",
         "solverResult"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"do", "=", 
      RowBox[{"mechanicalObjectDistance", "/.", "solverResult"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"traceRay", "[", "op", "]"}], "[", 
      RowBox[{
       RowBox[{"markRayAsDomainDefinedMarginal", "[", 
        RowBox[{"raySet", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "do"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Sin", "[", "mrg", "]"}], ",", 
            RowBox[{"Cos", "[", "mrg", "]"}]}], "}"}]}], "]"}], "]"}], ",", 
       "wl"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"setPupil", "[", 
      RowBox[{"op", ",", "pup"}], "]"}], ";", "\[IndentingNewLine]", "op"}]}],
    "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"frontAsphericalSurfacePosition", "[", 
    RowBox[{"op_", "?", "opticsQ"}], "]"}], ":=", 
   RowBox[{"positionOfAttributedSurface", "[", 
    RowBox[{
    "op", ",", "solverAsphericalSurface", ",", 
     "frontSolverAsphericalSurface"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"backAsphericalSurfacePosition", "[", 
     RowBox[{"op_", "?", "opticsQ"}], "]"}], ":=", 
    RowBox[{"positionOfAttributedSurface", "[", 
     RowBox[{
     "op", ",", "solverAsphericalSurface", ",", 
      "backSolverAsphericalSurface"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"biasphericAplanatSolve", "::", "usesetup"}], "=", 
   "\"\<use 'setupBiasphericAplanatParameters' function to set parameter \
arguments.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"setupBiasphericAplanatParameters", "::", "needslambda"}], "=", 
   "\"\<design wavelength should be specified by 'designWavelength->x' with \
unit in milli meters.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"setupBiasphericAplanatParameters", "::", "notmedium"}], "=", 
    "\"\<`1` symbol for `2` is not a medium symbol.\>\""}], ";"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}], 
  RowBox[{
   RowBox[{"singletParaxialParameterSymbols", "=", 
    RowBox[{"{", 
     RowBox[{
     "focalLength", ",", "lensMediumRefractiveIndex", ",", 
      "lensMediumThickness", ",", "coddingtonShapeFactor", ",", 
      "paraxialWorkingDistance", ",", "paraxialObjectDistance", ",", 
      "paraxialObjectImageDistance", ",", "lateralMagnification", ",", 
      "conjugateInfiniteness"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"paraxialThickessDifferenceFromMechanical", "[", 
    RowBox[{"ncg_", ",", "dcg_"}], "]"}], "=", 
   RowBox[{"dcg", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"1.0", "/", "ncg"}], "-", "1.0"}], ")"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"paraxialDistanceFromMechanical", "[", 
    RowBox[{"ncg_", ",", "dcg_"}], "]"}], "=", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", "m", "}"}], ",", 
     RowBox[{"m", "-", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"ncg", "-", "1.0"}], ")"}], "/", "ncg"}], "*", "dcg"}]}]}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"paraxialThicknessDifferenceToMechanical", "[", 
    RowBox[{"ncg_", ",", "dcg_"}], "]"}], "=", 
   RowBox[{"ncg", "*", 
    RowBox[{"dcg", "/", 
     RowBox[{"(", 
      RowBox[{"ncg", "-", "1.0"}], ")"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"paraxialDistanceToMechanical", "[", 
     RowBox[{"ncg_", ",", "dcg_"}], "]"}], "=", 
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", "mp", "}"}], ",", 
      RowBox[{"mp", "+", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"ncg", "-", "1.0"}], ")"}], "/", "ncg"}], "*", "dcg"}]}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"setEqualQ", "[", 
    RowBox[{"a_List", ",", "b_List"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sort", "[", "a", "]"}], "===", 
     RowBox[{"Sort", "[", "b", "]"}]}], ")"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{
   "fParm", ",", "nParm", ",", "dParm", ",", "cParm", ",", "iParm", ",", 
    "oParm", ",", "oiParm", ",", "bParm"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "settleRemainedParaxialParameters", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"focalLength", "\[Rule]", "fParm"}], ",", 
     RowBox[{"lensMediumRefractiveIndex", "\[Rule]", "nParm"}], ",", 
     RowBox[{"lensMediumThickness", "\[Rule]", "dParm"}], ",", 
     RowBox[{"coddingtonShapeFactor", "\[Rule]", "cParm"}], ",", 
     RowBox[{"paraxialWorkingDistance", "\[Rule]", "iParm"}], ",", 
     RowBox[{"paraxialObjectDistance", "\[Rule]", "oParm"}], ",", 
     RowBox[{"paraxialObjectImageDistance", "\[Rule]", "oiParm"}], ",", 
     RowBox[{"lateralMagnification", "\[Rule]", "bParm"}]}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
  "settleRemainedParaxialParameters", "[", "parameterSet__Rule", "]"}], ":=", 
  
  RowBox[{"settleRemainedParaxialParameters", "[", 
   RowBox[{"{", "parameterSet", "}"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParameters", "[", 
    RowBox[{"parameterSet", ":", 
     RowBox[{"{", "__Rule", "}"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "f", ",", "n", ",", "d", ",", "c", ",", "i", ",", "o", ",", "oi", ",", 
       "\[Beta]", ",", "ret"}], "}"}], ",", 
     RowBox[{
      RowBox[{"f", "=", 
       RowBox[{
        RowBox[{"focalLength", "/.", "parameterSet"}], "/.", 
        RowBox[{"Options", "[", "settleRemainedParaxialParameters", "]"}]}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"n", "=", 
       RowBox[{
        RowBox[{"lensMediumRefractiveIndex", "/.", "parameterSet"}], "/.", 
        RowBox[{"Options", "[", "settleRemainedParaxialParameters", "]"}]}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"d", "=", 
       RowBox[{
        RowBox[{"lensMediumThickness", "/.", "parameterSet"}], "/.", 
        RowBox[{"Options", "[", "settleRemainedParaxialParameters", "]"}]}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"c", "=", 
       RowBox[{
        RowBox[{"coddingtonShapeFactor", "/.", "parameterSet"}], "/.", 
        RowBox[{"Options", "[", "settleRemainedParaxialParameters", "]"}]}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"i", "=", 
       RowBox[{
        RowBox[{"paraxialWorkingDistance", "/.", "parameterSet"}], "/.", 
        RowBox[{"Options", "[", "settleRemainedParaxialParameters", "]"}]}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"o", "=", 
       RowBox[{
        RowBox[{"paraxialObjectDistance", "/.", "parameterSet"}], "/.", 
        RowBox[{"Options", "[", "settleRemainedParaxialParameters", "]"}]}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"oi", "=", 
       RowBox[{
        RowBox[{"paraxialObjectImageDistance", "/.", "parameterSet"}], "/.", 
        RowBox[{"Options", "[", "settleRemainedParaxialParameters", "]"}]}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"\[Beta]", "=", 
       RowBox[{
        RowBox[{"lateralMagnification", "/.", "parameterSet"}], "/.", 
        RowBox[{"Options", "[", "settleRemainedParaxialParameters", "]"}]}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"infiniteParameterSetQ", "[", 
         RowBox[{
         "f", ",", "n", ",", "d", ",", "c", ",", "i", ",", "o", ",", "oi", 
          ",", "\[Beta]"}], "]"}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"settleRemainedParaxialParametersInfinite", "[", 
          RowBox[{"d", ",", "n", ",", "f", ",", "i", ",", "c"}], "]"}], 
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Check", "[", 
       RowBox[{
        RowBox[{"ret", "=", 
         RowBox[{"tautologyCheck", "[", 
          RowBox[{"d", ",", "i", ",", "o", ",", "oi"}], "]"}]}], ",", 
        RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"NumericQ", "[", "i", "]"}]}], ",", 
        RowBox[{"i", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"paraxialWorkingDistance", "/.", "ret"}], "/.", 
           "parameterSet"}], "/.", 
          RowBox[{
          "Options", "[", "settleRemainedParaxialParameters", "]"}]}]}]}], 
       "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"NumericQ", "[", "o", "]"}]}], ",", 
        RowBox[{"o", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"paraxialObjectDistance", "/.", "ret"}], "/.", 
           "parameterSet"}], "/.", 
          RowBox[{
          "Options", "[", "settleRemainedParaxialParameters", "]"}]}]}]}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{"ret", ",", 
         RowBox[{"settleRemainedParaxialParametersFinite", "[", 
          RowBox[{
          "d", ",", "n", ",", "f", ",", "i", ",", "c", ",", "o", ",", 
           "\[Beta]"}], "]"}]}], "}"}], "]"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "checkNumeric", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Attributes", "[", "checkNumeric", "]"}], "=", 
   RowBox[{"{", "Listable", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"checkNumeric", "[", 
   RowBox[{
    RowBox[{"n_", "?", "NumericQ"}], ",", "_"}], "]"}], ":=", 
  "Nothing"}], "\n", 
 RowBox[{
  RowBox[{"checkNumeric", "[", 
   RowBox[{"n_", ",", "ret_"}], "]"}], ":=", "ret"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"absentParameter", "[", 
    RowBox[{"d_", ",", "n_", ",", "f_", ",", "m_", ",", "cod_"}], "]"}], ":=", 
   RowBox[{"checkNumeric", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"d", ",", "n", ",", "f", ",", "m", ",", "cod"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "lensMediumThickness", ",", "lensMediumSymbol", ",", "focalLength", ",",
        "paraxialWorkingDistance", ",", "coddingtonShapeFactor"}], "}"}]}], 
    "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"for", " ", "finite", " ", "conjugate", " ", "case"}], 
   "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"absentParameter", "[", 
    RowBox[{
    "d_", ",", "n_", ",", "f_", ",", "mid_", ",", "cod_", ",", "mod_", ",", 
     "oid_", ",", "beta_"}], "]"}], ":=", 
   RowBox[{"checkNumeric", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "d", ",", "n", ",", "f", ",", "mid", ",", "cod", ",", "mod", ",", "oid",
        ",", "beta"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "lensMediumThickness", ",", "lensMediumSymbol", ",", "focalLength", ",",
        "paraxialWorkingDistance", ",", "coddingtonShapeFactor", ",", 
       "paraxialObjectDistance", ",", "paraxialObjectImageDistance", ",", 
       "lateralMagnification"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"infiniteParameterSetQ", "[", 
    RowBox[{
    "d_", ",", "n_", ",", "f_", ",", "mid_", ",", "cod_", ",", "mod_", ",", 
     "oid_", ",", "beta_"}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"absents", "=", 
       RowBox[{"absentParameter", "[", 
        RowBox[{
        "d", ",", "n", ",", "f", ",", "mid", ",", "cod", ",", "mod", ",", 
         "oid", ",", "beta"}], "]"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"SubsetQ", "[", 
       RowBox[{"absents", ",", 
        RowBox[{"{", 
         RowBox[{"oiParm", ",", "bParm"}], "}"}]}], "]"}], "||", 
      RowBox[{"SubsetQ", "[", 
       RowBox[{"absents", ",", 
        RowBox[{"{", 
         RowBox[{"oParm", ",", "bParm"}], "}"}]}], "]"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"CSF", "[", 
    RowBox[{"c1_", ",", "c2_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"c1", "+", "c2"}], ")"}], "/", 
    RowBox[{"(", 
     RowBox[{"c1", "-", "c2"}], ")"}]}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"frontParaxialCurvature", "[", 
   RowBox[{
    RowBox[{"d_", "?", "NumericQ"}], ",", 
    RowBox[{"n_", "?", "NumericQ"}], ",", 
    RowBox[{"f_", "?", "NumericQ"}], ",", 
    RowBox[{"m_", "?", "NumericQ"}]}], "]"}], ":=", 
  RowBox[{"n", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"f", "-", "m"}], ")"}], "/", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"n", "-", "1"}], ")"}], "d", "*", "f"}], ")"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"backParaxialCurvature", "[", 
   RowBox[{
    RowBox[{"d_", "?", "NumericQ"}], ",", 
    RowBox[{"n_", "?", "NumericQ"}], ",", 
    RowBox[{"f_", "?", "NumericQ"}], ",", 
    RowBox[{"m_", "?", "NumericQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"n", 
      RowBox[{"(", 
       RowBox[{"f", "-", "m"}], ")"}]}], "-", "d"}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"n", "-", "1"}], ")"}], "d", "*", "m"}], ")"}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"paraxialWorkingDistance", "[", 
    RowBox[{
     RowBox[{"d_", "?", "NumericQ"}], ",", 
     RowBox[{"n_", "?", "NumericQ"}], ",", 
     RowBox[{"f_", "?", "NumericQ"}], ",", 
     RowBox[{"cod_", "?", "NumericQ"}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"smsq", "=", 
       RowBox[{"n", "*", "f", "*", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"n", "*", "f"}], "+", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"cod", "^", "2"}], "-", "1"}], ")"}], "d"}]}], ")"}]}]}],
       "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"smsq", "<", "0.0"}], ",", 
       RowBox[{"Message", "[", 
        RowBox[{"setupBiasphericAplanatParameters", "::", "inconsistent"}], 
        "]"}], ",", "0.0"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"Clear", "[", "checkNumeric", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Attributes", "[", "checkNumeric", "]"}], "=", 
   RowBox[{"{", "Listable", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"checkNumeric", "[", 
   RowBox[{
    RowBox[{"n_", "?", "NumericQ"}], ",", "_"}], "]"}], ":=", 
  "Nothing"}], "\n", 
 RowBox[{
  RowBox[{"checkNumeric", "[", 
   RowBox[{"n_", ",", "ret_"}], "]"}], ":=", "ret"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"absentParameter", "[", 
    RowBox[{"d_", ",", "n_", ",", "f_", ",", "m_", ",", "cod_"}], "]"}], ":=", 
   RowBox[{"checkNumeric", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"d", ",", "n", ",", "f", ",", "m", ",", "cod"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "dParm", ",", "nParm", ",", "fParm", ",", "iParm", ",", "cParm"}], 
      "}"}]}], "]"}]}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"for", " ", "finite", " ", "conjugate", " ", "case"}], 
   "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"allParametersForFinite", "=", 
   RowBox[{"{", 
    RowBox[{
    "dParm", ",", "nParm", ",", "fParm", ",", "iParm", ",", "cParm", ",", 
     "oParm", ",", "oiParm", ",", "bParm"}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"absentParameter", "[", 
   RowBox[{
   "d_", ",", "n_", ",", "f_", ",", "mid_", ",", "cod_", ",", "mod_", ",", 
    "oid_", ",", "beta_"}], "]"}], ":=", 
  RowBox[{"checkNumeric", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "d", ",", "n", ",", "f", ",", "mid", ",", "cod", ",", "mod", ",", "oid", 
      ",", "beta"}], "}"}], ",", "allParametersForFinite"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"containedParameter", "[", 
    RowBox[{
    "d_", ",", "n_", ",", "f_", ",", "mid_", ",", "cod_", ",", "mod_", ",", 
     "oid_", ",", "beta_"}], "]"}], ":=", 
   RowBox[{"Complement", "[", 
    RowBox[{"allParametersForFinite", ",", 
     RowBox[{"absentParameter", "[", 
      RowBox[{
      "d", ",", "n", ",", "f", ",", "mid", ",", "cod", ",", "mod", ",", "oid",
        ",", "beta"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"Clear", "[", "curvaturesInfinite", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"curvaturesInfinite", "[", 
   RowBox[{
    RowBox[{"_", "?", "NumericQ"}], ",", 
    RowBox[{"n_", "?", "NumericQ"}], ",", 
    RowBox[{"f_", "?", "NumericQ"}], ",", 
    RowBox[{"m_", "?", "NumericQ"}], ",", 
    RowBox[{"cod_", "?", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"N", "[", "#", "]"}], "===", 
        RowBox[{"-", "1.0"}]}], "&"}], ")"}]}]}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"frontSurfaceCurvature", "\[Rule]", "0"}], ",", 
    RowBox[{"backSurfaceCurvature", "\[Rule]", 
     RowBox[{
      RowBox[{"-", "1.0"}], "/", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"n", "-", "1"}], ")"}], "f"}], ")"}]}]}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"curvaturesInfinite", "[", 
   RowBox[{
    RowBox[{"_", "?", "NumericQ"}], ",", 
    RowBox[{"n_", "?", "NumericQ"}], ",", 
    RowBox[{"f_", "?", "NumericQ"}], ",", 
    RowBox[{"m_", "?", "NumericQ"}], ",", 
    RowBox[{"cod_", "?", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"N", "[", "#", "]"}], "===", "1.0"}], "&"}], ")"}]}]}], "]"}],
   ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"frontSurfaceCurvature", "\[Rule]", 
     RowBox[{"1.0", "/", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"n", "-", "1"}], ")"}], "f"}], ")"}]}]}], ",", 
    RowBox[{"backSurfaceCurvature", "\[Rule]", "0"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"curvaturesInfinite", "[", 
    RowBox[{
     RowBox[{"d_", "?", "NumericQ"}], ",", 
     RowBox[{"n_", "?", "NumericQ"}], ",", 
     RowBox[{"f_", "?", "NumericQ"}], ",", 
     RowBox[{"m_", "?", "NumericQ"}], ",", "_"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"frontSurfaceCurvature", "\[Rule]", 
      RowBox[{"n", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"f", "-", "m"}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"n", "-", "1"}], ")"}], "d", "*", "f"}], ")"}]}]}]}], ",", 
     
     RowBox[{"backSurfaceCurvature", "\[Rule]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"n", 
          RowBox[{"(", 
           RowBox[{"f", "-", "m"}], ")"}]}], "-", "d"}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"n", "-", "1"}], ")"}], "d", "*", "m"}], ")"}]}]}], ",", 
     RowBox[{"conjugateInfiniteness", "\[Rule]", "True"}]}], "}"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", "settleRemainedParaxialParametersInfinite", "]"}], 
   ";", 
   RowBox[{
    RowBox[{"settleRemainedParaxialParametersInfinite", "[", 
     RowBox[{"d_", ",", "n_", ",", "f_", ",", "m_", ",", "cod_"}], "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"cod", "=!=", 
       RowBox[{"-", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"d", "*", "f"}], "-", 
          RowBox[{"n", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"f", "^", "2"}], "-", 
              RowBox[{"m", "^", "2"}]}], ")"}], "/", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"n", "-", "1.0"}], ")"}], "d", "*", "f"}], ")"}]}]}]}],
          ")"}]}]}], ",", 
      RowBox[{
       RowBox[{"Message", "[", 
        RowBox[{"settleRemainedParaxialParameters", "::", "inconsistent"}], 
        "]"}], ";", "$Failed"}], ",", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"curvaturesInfinite", "[", 
          RowBox[{"d", ",", "n", ",", "f", ",", "m", ",", "cod"}], "]"}], ",", 
         RowBox[{"paraxialWorkingDistance", "\[Rule]", "m"}]}], "}"}], 
       "]"}]}], "]"}]}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParametersInfinite", "[", 
    RowBox[{"d_", ",", "n_", ",", "f_", ",", "m_", ",", "cod_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Message", "[", 
       RowBox[{"settleRemainedParaxialParameters", "::", "notenough"}], "]"}],
       ";", "$Failed"}], ")"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"absentParameter", "[", 
       RowBox[{"d", ",", "n", ",", "f", ",", "m", ",", "cod"}], "]"}], "]"}], 
     "\[GreaterEqual]", "2"}]}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParametersInfinite", "[", 
    RowBox[{"d_", ",", "n_", ",", "f_", ",", "m_", ",", "cod_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Message", "[", 
       RowBox[{
        RowBox[{"settleRemainedParaxialParameters", "::", "compalsory"}], ",",
         "lensMediumSymbol"}], "]"}], ";", "$Failed"}], ")"}], "/;", 
    RowBox[{
     RowBox[{"absentParameter", "[", 
      RowBox[{"d", ",", "n", ",", "f", ",", "m", ",", "cod"}], "]"}], "===", 
     RowBox[{"{", "nParm", "}"}]}]}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParametersInfinite", "[", 
    RowBox[{"d_", ",", "n_", ",", "f_", ",", "m_", ",", "cod_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Message", "[", 
       RowBox[{"settleRemainedParaxialParameters", "::", "notenough"}], "]"}],
       ";", "$Failed"}], ")"}], "/;", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"absentParameter", "[", 
        RowBox[{"d", ",", "n", ",", "f", ",", "m", ",", "cod"}], "]"}], "===", 
       RowBox[{"{", "dParm", "}"}]}], ")"}], "&&", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Abs", "[", 
        RowBox[{"N", "[", "cod", "]"}], "]"}], "===", "1.0"}], ")"}]}]}]}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParametersInfinite", "[", 
    RowBox[{"d_", ",", "n_", ",", "f_", ",", "m_", ",", "cod_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"sd", ",", "ddep"}], "}"}], ",", 
      RowBox[{
       RowBox[{"sd", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"cod", "+", "1.0"}], ")"}], "f"}], "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"cod", "-", "1.0"}], ")"}], "m"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"ddep", "=", 
        RowBox[{"n", "*", "sd", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"f", "-", "m"}], ")"}], "/", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"cod", "+", "1.0"}], ")"}], "f"}], ")"}]}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"curvaturesInfinite", "[", 
           RowBox[{"ddep", ",", "n", ",", "f", ",", "m", ",", "cod"}], "]"}], 
          ",", 
          RowBox[{"paraxialWorkingDistance", "\[Rule]", "m"}], ",", 
          RowBox[{"lensMediumThickness", "\[Rule]", "ddep"}]}], "}"}], 
        "]"}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"absentParameter", "[", 
        RowBox[{"d", ",", "n", ",", "f", ",", "m", ",", "cod"}], "]"}], "===", 
       RowBox[{"{", "dParm", "}"}]}], ")"}], "&&", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Abs", "[", 
        RowBox[{"N", "[", "cod", "]"}], "]"}], "=!=", "1.0"}], ")"}]}]}]}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParametersInfinite", "[", 
    RowBox[{"d_", ",", "n_", ",", "f_", ",", "m_", ",", "cod_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"sd", ",", "fdep"}], "}"}], ",", 
      RowBox[{
       RowBox[{"sd", "=", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"cod", "+", "1.0"}], ")"}], "^", "2"}], 
          RowBox[{"d", "^", "2"}]}], "+", 
         RowBox[{"4", "n", "*", "m", "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"cod", 
             RowBox[{"(", 
              RowBox[{"cod", "+", "1.0"}], ")"}], "d"}], "+", 
            RowBox[{"n", "*", "m"}]}], ")"}]}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"sd", "<", "0.0"}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"settleRemainedParaxialParameters", "::", "inconsistent"}],
            "]"}], ";", 
          RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"fdep", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"N", "[", "cod", "]"}], "=!=", 
           RowBox[{"-", "1.0"}]}], ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Sqrt", "[", "sd", "]"}], "+", 
             RowBox[{"2.0", "n", "*", "cod", "*", "m"}], "+", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"cod", "+", "1.0"}], ")"}], "d"}]}], ")"}], "/", 
           RowBox[{"(", 
            RowBox[{"2", "n", 
             RowBox[{"(", 
              RowBox[{"cod", "+", "1.0"}], ")"}]}], ")"}]}], ",", 
          RowBox[{
           RowBox[{"d", "/", "n"}], "+", "m"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"curvaturesInfinite", "[", 
           RowBox[{"d", ",", "n", ",", "fdep", ",", "m", ",", "cod"}], "]"}], 
          ",", 
          RowBox[{"paraxialWorkingDistance", "\[Rule]", "m"}], ",", 
          RowBox[{"focalLength", "\[Rule]", "fdep"}]}], "}"}], "]"}]}]}], 
     "]"}], "/;", 
    RowBox[{
     RowBox[{"absentParameter", "[", 
      RowBox[{"d", ",", "n", ",", "f", ",", "m", ",", "cod"}], "]"}], "===", 
     RowBox[{"{", "fParm", "}"}]}]}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParametersInfinite", "[", 
    RowBox[{"d_", ",", "n_", ",", "f_", ",", "m_", ",", "cod_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"sm", ",", "mdep"}], "}"}], ",", 
      RowBox[{
       RowBox[{"sm", "=", 
        RowBox[{"n", "*", "f", "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"n", "*", "f"}], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"cod", "^", "2"}], "-", "1.0"}], ")"}], "d"}]}], 
          ")"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"sm", "<", "0.0"}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"settleRemainedParaxialParameters", "::", "inconsistent"}],
            "]"}], ";", 
          RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"mdep", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"N", "[", "cod", "]"}], "=!=", "1.0"}], ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"n", "*", "cod", "*", "f"}], "-", 
             RowBox[{"Sqrt", "[", "sm", "]"}]}], ")"}], "/", 
           RowBox[{"(", 
            RowBox[{"n", 
             RowBox[{"(", 
              RowBox[{"cod", "-", "1.0"}], ")"}]}], ")"}]}], ",", 
          RowBox[{"f", "-", 
           RowBox[{"d", "/", "n"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"curvaturesInfinite", "[", 
           RowBox[{"d", ",", "n", ",", "f", ",", "mdep", ",", "cod"}], "]"}], 
          ",", 
          RowBox[{"paraxialWorkingDistance", "\[Rule]", "mdep"}]}], "}"}], 
        "]"}]}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"absentParameter", "[", 
      RowBox[{"d", ",", "n", ",", "f", ",", "m", ",", "cod"}], "]"}], "===", 
     RowBox[{"{", "iParm", "}"}]}]}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParametersInfinite", "[", 
    RowBox[{"d_", ",", "n_", ",", "f_", ",", "m_", ",", "cod_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"curvs", "=", 
        RowBox[{"curvaturesInfinite", "[", 
         RowBox[{"d", ",", "n", ",", "f", ",", "m", ",", "cod"}], "]"}]}], 
       "}"}], ",", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{"curvs", ",", 
         RowBox[{"paraxialWorkingDistance", "\[Rule]", "m"}], ",", 
         RowBox[{"coddingtonShapeFactor", "\[Rule]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"CSF", "[", 
             RowBox[{"frontSurfaceCurvature", ",", "backSurfaceCurvature"}], 
             "]"}], "/.", "curvs"}], ")"}]}]}], "}"}], "]"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"absentParameter", "[", 
      RowBox[{"d", ",", "n", ",", "f", ",", "m", ",", "cod"}], "]"}], "===", 
     RowBox[{"{", "cParm", "}"}]}]}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "numericCount", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Attributes", "[", "numericCount", "]"}], "=", 
   RowBox[{"{", "Listable", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"numericCount", "[", "c_", "]"}], ":=", 
  RowBox[{"1", "/;", 
   RowBox[{"NumericQ", "[", "c", "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"numericCount", "[", "c_", "]"}], ":=", 
  RowBox[{"0", "/;", 
   RowBox[{"(", 
    RowBox[{"!", 
     RowBox[{"NumericQ", "[", "c", "]"}]}], ")"}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"boundingConditionCount", "[", 
    RowBox[{"params", ":", 
     RowBox[{"{", "__", "}"}]}], "]"}], ":=", 
   RowBox[{"Apply", "[", 
    RowBox[{"Plus", ",", 
     RowBox[{"numericCount", "[", "params", "]"}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"additionalTermsOfPricipals", "[", 
    RowBox[{
    "d_", ",", "n_", ",", "c1_", ",", "c2_", ",", "mid_", ",", "mod_"}], 
    "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"paraxialDistanceBetweenObjectAndPrincipal", "\[Rule]", 
      RowBox[{"mod", "-", 
       RowBox[{"objectPrincipalPlanePosition", "[", 
        RowBox[{"c1", ",", "c2", ",", "n", ",", "d"}], "]"}]}]}], ",", 
     RowBox[{"paraxialDistanceBetweenPrincipalAndImage", "\[Rule]", 
      RowBox[{"mid", "-", 
       RowBox[{"imagePrincipalPlanePosition", "[", 
        RowBox[{"c1", ",", "c2", ",", "n", ",", "d"}], "]"}]}]}]}], "}"}]}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParametersFinite", "[", 
    RowBox[{
    "d_", ",", "n_", ",", "f_", ",", "mid_", ",", "cod_", ",", "mod_", ",", 
     "beta_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "nc", ",", "da", ",", "na", ",", "fa", ",", "ia", ",", "ca", ",", "oa", 
       ",", "ba"}], "}"}], ",", 
     RowBox[{
      RowBox[{"nc", "=", 
       RowBox[{"boundingConditionCount", "[", 
        RowBox[{"{", 
         RowBox[{"f", ",", "mid", ",", "cod", ",", "mod", ",", "beta"}], 
         "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"nc", "\[LessEqual]", "2"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"settleRemainedParaxialParameters", "::", "notenough"}], 
          "]"}], ";", 
         RowBox[{"Return", "[", "$Failed", "]"}]}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"nc", "\[GreaterEqual]", "4"}], ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{"settleRemainedParaxialParameters", "::", "toomuch"}], 
            "]"}], ";", 
           RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"conjugateInfiniteness", "\[Rule]", "False"}], ",", 
         RowBox[{"fixRemainedParaxialParametersFinite", "[", 
          RowBox[{
          "d", ",", "n", ",", "f", ",", "mid", ",", "cod", ",", "mod", ",", 
           "beta"}], "]"}]}], "}"}], "]"}]}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"fixRemainedParaxialParametersFinite", "[", 
    RowBox[{"d_", ",", "n_", ",", "_", ",", 
     RowBox[{"mid_", "?", "NumericQ"}], ",", "_", ",", 
     RowBox[{"mod_", "?", "NumericQ"}], ",", 
     RowBox[{"beta_", "?", "NumericQ"}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"c1", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"beta", 
            RowBox[{"(", 
             RowBox[{"d", "+", 
              RowBox[{"n", "*", "mod"}]}], ")"}]}], "+", 
           RowBox[{"n", " ", "mid"}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"beta", 
           RowBox[{"(", 
            RowBox[{"n", "-", "1.0"}], ")"}], "d", " ", "mod"}], ")"}]}]}], 
       ",", 
       RowBox[{"c2", "=", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"(", 
           RowBox[{"d", "+", 
            RowBox[{"beta", " ", "n", " ", "mod"}], "+", 
            RowBox[{"n", " ", "mid"}]}], ")"}]}], "/", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"n", "-", "1.0"}], ")"}], "d", " ", "mid"}], ")"}]}]}]}], 
      "}"}], ",", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"frontSurfaceCurvature", "\[Rule]", "c1"}], ",", 
        RowBox[{"backSurfaceCurvature", "\[Rule]", "c2"}], ",", 
        RowBox[{"focalLength", "\[Rule]", 
         RowBox[{
          RowBox[{"-", "beta"}], " ", "n", " ", "mid", " ", 
          RowBox[{"mod", "/", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"beta", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"beta", " ", "n", " ", "mod"}], "+", "d"}], ")"}]}], 
             "+", 
             RowBox[{"n", " ", "mid"}]}], ")"}]}]}]}], ",", 
        RowBox[{"coddingtonShapeFactor", "\[Rule]", 
         RowBox[{"CSF", "[", 
          RowBox[{"c1", ",", "c2"}], "]"}]}], ",", 
        RowBox[{"additionalTermsOfPricipals", "[", 
         RowBox[{
         "d", ",", "n", ",", "c1", ",", "c2", ",", "mid", ",", "mod"}], 
         "]"}]}], "}"}], "]"}]}], "]"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"fixRemainedParaxialParametersFinite", "[", 
    RowBox[{"d_", ",", "n_", ",", 
     RowBox[{"f_", "?", "NumericQ"}], ",", 
     RowBox[{"mid_", "?", "NumericQ"}], ",", "_", ",", "_", ",", 
     RowBox[{"beta_", "?", "NumericQ"}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"c1", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1.0", "-", "beta"}], ")"}], "f", " ", "n"}], "-", 
           RowBox[{"n", " ", "mid"}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"n", "-", "1.0"}], ")"}], "d", " ", "f"}], ")"}]}]}], ",", 
       RowBox[{"c2", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1.0", "-", "beta"}], ")"}], "f", " ", "n"}], "-", 
           RowBox[{"n", " ", "mid"}], "-", "d"}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"n", "-", "1.0"}], ")"}], 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"beta", " ", "f"}], "+", "mid"}], ")"}], "d"}], 
          ")"}]}]}], ",", 
       RowBox[{"mod", "=", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"beta", " ", "d", " ", "f"}], "+", 
            RowBox[{"f", " ", "n", " ", "mid"}]}], ")"}]}], "/", 
         RowBox[{"(", 
          RowBox[{"beta", " ", "n", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"beta", " ", "f"}], "+", "mid"}], ")"}]}], ")"}]}]}]}], 
      "}"}], ",", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"frontSurfaceCurvature", "\[Rule]", "c1"}], ",", 
        RowBox[{"backSurfaceCurvature", "\[Rule]", "c2"}], ",", 
        RowBox[{"paraxialObjectDistance", "\[Rule]", "mod"}], ",", 
        RowBox[{"coddingtonShapeFactor", "\[Rule]", 
         RowBox[{"CSF", "[", 
          RowBox[{"c1", ",", "c2"}], "]"}]}], ",", 
        RowBox[{"additionalTermsOfPricipals", "[", 
         RowBox[{
         "d", ",", "n", ",", "c1", ",", "c2", ",", "mid", ",", "mod"}], 
         "]"}]}], "}"}], "]"}]}], "]"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"fixRemainedParaxialParametersFinite", "[", 
    RowBox[{"d_", ",", "n_", ",", 
     RowBox[{"f_", "?", "NumericQ"}], ",", "_", ",", "_", ",", 
     RowBox[{"mod_", "?", "NumericQ"}], ",", 
     RowBox[{"beta_", "?", "NumericQ"}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"c1", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"beta", " ", "d"}], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1.0", "-", "beta"}], ")"}], "n", " ", "f"}], "+", 
           RowBox[{"beta", " ", "n", " ", "mod"}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"d", 
           RowBox[{"(", 
            RowBox[{"n", "-", "1.0"}], ")"}], 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"beta", " ", "f"}], "+", "mod"}], ")"}], "d"}], 
          ")"}]}]}], ",", 
       RowBox[{"c2", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1.0", "-", "beta"}], ")"}], "f", " ", "n"}], "-", 
           RowBox[{"n", " ", "mod"}], "-", "d"}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"n", "-", "1.0"}], ")"}], 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"beta", " ", "f"}], "+", "mod"}], ")"}], "d"}], 
          ")"}]}]}], ",", 
       RowBox[{"mid", "=", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"(", 
           RowBox[{"beta", " ", "f", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"beta", " ", "n", " ", "mod"}], "+", "d"}], ")"}]}], 
           ")"}]}], "/", 
         RowBox[{"(", 
          RowBox[{"n", 
           RowBox[{"(", 
            RowBox[{"f", "+", 
             RowBox[{"beta", " ", "mod"}]}], ")"}]}], ")"}]}]}]}], "}"}], ",", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"frontSurfaceCurvature", "\[Rule]", "c1"}], ",", 
        RowBox[{"backSurfaceCurvature", "\[Rule]", "c2"}], ",", 
        RowBox[{"paraxialWorkingDistance", "\[Rule]", "mid"}], ",", 
        RowBox[{"coddingtonShapeFactor", "\[Rule]", 
         RowBox[{"CSF", "[", 
          RowBox[{"c1", ",", "c2"}], "]"}]}], ",", 
        RowBox[{"additionalTermsOfPricipals", "[", 
         RowBox[{
         "d", ",", "n", ",", "c1", ",", "c2", ",", "mid", ",", "mod"}], 
         "]"}]}], "}"}], "]"}]}], "]"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"fixRemainedParaxialParametersFinite", "[", 
    RowBox[{"d_", ",", "n_", ",", 
     RowBox[{"f_", "?", "NumericQ"}], ",", "_", ",", 
     RowBox[{"cod_", "?", "NumericQ"}], ",", "_", ",", 
     RowBox[{"beta_", "?", "NumericQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", ",", "sq", ",", "c1", ",", "c2", ",", "mid", ",", "mod"}], 
      "}"}], ",", 
     RowBox[{
      RowBox[{"s", "=", 
       RowBox[{"n", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"cod", "^", "2"}], "-", "1.0"}], ")"}], "d"}], "+", 
          RowBox[{"n", " ", "f"}]}], ")"}], "f"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"s", "<", "0.0"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"settleRemainedParaxialParameters", "::", "inconsistent"}], 
          "]"}], ";", 
         RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sq", "=", 
       RowBox[{"Sqrt", "[", "s", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"c1", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"sq", "-", 
          RowBox[{"n", " ", "f"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"cod", "-", "1.0"}], ")"}], 
          RowBox[{"(", 
           RowBox[{"n", "-", "1.0"}], ")"}], "d", " ", "f"}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"c2", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"sq", "-", 
          RowBox[{"n", " ", "f"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"cod", "+", "1.0"}], ")"}], 
          RowBox[{"(", 
           RowBox[{"n", "-", "1.0"}], ")"}], "d", " ", "f"}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mod", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"beta", " ", "sq"}], "+", 
          RowBox[{"f", " ", "n", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"beta", "-", "1.0"}], ")"}], "cod"}], "-", "1.0"}], 
            ")"}]}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"beta", 
          RowBox[{"(", 
           RowBox[{"cod", "+", "1.0"}], ")"}], "n"}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mid", "=", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{"sq", "+", 
           RowBox[{"n", " ", "f", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"beta", "-", "1.0"}], ")"}], "cod"}], "-", "beta"}], 
             ")"}]}]}], ")"}]}], "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"cod", "-", "1.0"}], ")"}], "n"}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"frontSurfaceCurvature", "\[Rule]", "c1"}], ",", 
         RowBox[{"backSurfaceCurvature", "\[Rule]", "c2"}], ",", 
         RowBox[{"paraxialObjectDistance", "\[Rule]", "mod"}], ",", 
         RowBox[{"paraxialWorkingDistance", "\[Rule]", "mid"}], ",", 
         RowBox[{"additionalTermsOfPricipals", "[", 
          RowBox[{
          "d", ",", "n", ",", "c1", ",", "c2", ",", "mid", ",", "mod"}], 
          "]"}]}], "}"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"fixRemainedParaxialParametersFinite", "[", 
    RowBox[{"d_", ",", "n_", ",", 
     RowBox[{"f_", "?", "NumericQ"}], ",", 
     RowBox[{"mid_", "?", "NumericQ"}], ",", 
     RowBox[{"cod_", "?", "NumericQ"}], ",", "_", ",", "_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", ",", "sq", ",", "c1", ",", "c2", ",", "mod"}], "}"}], ",", 
     
     RowBox[{
      RowBox[{"s", "=", 
       RowBox[{"n", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"cod", "^", "2"}], "-", "1.0"}], ")"}], "d"}], "+", 
          RowBox[{"n", " ", "f"}]}], ")"}], "n", " ", "f"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"s", "<", "0.0"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"settleRemainedParaxialParameters", "::", "inconsistent"}], 
          "]"}], ";", 
         RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sq", "=", 
       RowBox[{"Sqrt", "[", "s", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"c1", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"sq", "-", 
          RowBox[{"n", " ", "f"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"cod", "-", "1.0"}], ")"}], 
          RowBox[{"(", 
           RowBox[{"n", "-", "1.0"}], ")"}], "d", " ", "f"}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"c2", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"sq", "-", 
          RowBox[{"n", " ", "f"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"cod", "+", "1.0"}], ")"}], 
          RowBox[{"(", 
           RowBox[{"n", "-", "1.0"}], ")"}], "d", " ", "f"}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mod", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"c2", "*", "d", 
           RowBox[{"(", 
            RowBox[{"n", "-", "1.0"}], ")"}], "mid"}], "+", "d", "+", 
          RowBox[{"n", " ", "mid"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"n", "-", "1.0"}], ")"}], 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"c1", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"c2", " ", "d", 
                 RowBox[{"(", 
                  RowBox[{"n", "-", "1.0"}], ")"}], "mid"}], "+", "d", "+", 
                RowBox[{"n", " ", "mid"}]}], ")"}]}], "-", 
             RowBox[{"c2", " ", "n", " ", "mid"}]}], ")"}]}], "-", "n"}], 
         ")"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"frontSurfaceCurvature", "\[Rule]", "c1"}], ",", 
         RowBox[{"backSurfaceCurvature", "\[Rule]", "c2"}], ",", 
         RowBox[{"paraxialObjectDistance", "\[Rule]", "mod"}], ",", 
         RowBox[{"lateralMagnification", "\[Rule]", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"cod", " ", "n", " ", 
              RowBox[{"(", 
               RowBox[{"f", "-", "mid"}], ")"}]}], "+", 
             RowBox[{"n", " ", "mid"}], "-", "sq"}], ")"}], "/", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"cod", "-", "1.0"}], ")"}], "n", " ", "f"}], ")"}]}]}], 
         ",", 
         RowBox[{"additionalTermsOfPricipals", "[", 
          RowBox[{
          "d", ",", "n", ",", "c1", ",", "c2", ",", "mid", ",", "mod"}], 
          "]"}]}], "}"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"fixRemainedParaxialParametersFinite", "[", 
    RowBox[{"d_", ",", "n_", ",", 
     RowBox[{"f_", "?", "NumericQ"}], ",", 
     RowBox[{"mid_", "?", "NumericQ"}], ",", "_", ",", 
     RowBox[{"mod_", "?", "NumericQ"}], ",", "_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", ",", "sq", ",", "c1", ",", "c2"}], "}"}], ",", 
     RowBox[{
      RowBox[{"s", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"d", " ", "f"}], ")"}], "^", "2"}], "+", 
        RowBox[{"2.0", "d", " ", "f", " ", "n", " ", "mid", " ", "mod"}], "+", 
        RowBox[{
         RowBox[{"n", "^", "2"}], "mid", " ", "mod", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"mid", " ", "mod"}], "-", 
           RowBox[{"4.0", 
            RowBox[{"f", "^", "2"}]}]}], ")"}]}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"s", "<", "0.0"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"settleRemainedParaxialParameters", "::", "inconsistent"}], 
          "]"}], ";", 
         RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sq", "=", 
       RowBox[{"Sqrt", "[", "s", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"c1", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"sq", "-", 
          RowBox[{"d", " ", "f"}], "+", 
          RowBox[{"n", " ", "mod", 
           RowBox[{"(", 
            RowBox[{"mid", "-", 
             RowBox[{"2.0", "f"}]}], ")"}]}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"2.0", "d", " ", "f", " ", 
          RowBox[{"(", 
           RowBox[{"n", "-", "1.0"}], ")"}], "mod"}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"c2", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"sq", "+", 
          RowBox[{"d", " ", "f"}], "+", 
          RowBox[{"2.0", " ", "f", " ", "n", " ", "mid"}], "-", 
          RowBox[{"n", " ", "mod", " ", "mid"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"2.0", "d", " ", "f", " ", "mid", 
          RowBox[{"(", 
           RowBox[{"1.0", "-", "n"}], ")"}]}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"frontSurfaceCurvature", "\[Rule]", "c1"}], ",", 
         RowBox[{"backSurfaceCurvature", "\[Rule]", "c2"}], ",", 
         RowBox[{"lateralMagnification", "\[Rule]", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"sq", "-", 
             RowBox[{"f", " ", "d", " ", "f"}], "-", 
             RowBox[{"n", " ", "mid", " ", "mod"}]}], ")"}], "/", 
           RowBox[{"(", 
            RowBox[{"2.0", " ", "f", " ", "n", " ", "mod"}], ")"}]}]}], ",", 
         RowBox[{"coddingtonShapeFactor", "\[Rule]", 
          RowBox[{"CSF", "[", 
           RowBox[{"c1", ",", "c2"}], "]"}]}], ",", 
         RowBox[{"additionalTermsOfPricipals", "[", 
          RowBox[{
          "d", ",", "n", ",", "c1", ",", "c2", ",", "mid", ",", "mod"}], 
          "]"}]}], "}"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"fixRemainedParaxialParametersFinite", "[", 
    RowBox[{"d_", ",", "n_", ",", 
     RowBox[{"f_", "?", "NumericQ"}], ",", "_", ",", 
     RowBox[{"cod_", "?", "NumericQ"}], ",", "_", ",", 
     RowBox[{"beta_", "?", "NumericQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "s", ",", "sq", ",", "rc", ",", "rm", ",", "c1", ",", "c2", ",", "mod", 
       ",", "mid"}], "}"}], ",", 
     RowBox[{
      RowBox[{"s", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"cod", "^", "2"}], "-", "1.0"}], ")"}], "d"}], "+", 
          RowBox[{"n", " ", "f"}]}], ")"}], "n", " ", "f"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"s", "<", "0.0"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"settleRemainedParaxialParameters", "::", "inconsistent"}], 
          "]"}], ";", 
         RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sq", "=", 
       RowBox[{"Sqrt", "[", "s", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"rc", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"sq", "-", 
          RowBox[{"n", " ", "f"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"n", "-", "1.0"}], ")"}], "d", " ", "f"}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"rm", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"cod", 
              RowBox[{"(", 
               RowBox[{"beta", "-", "1.0"}], ")"}]}], "-", "1.0"}], ")"}], 
           "n", " ", "f"}], "+", 
          RowBox[{"beta", "*", "sq"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"beta", " ", "n"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"c1", "=", 
       RowBox[{"rc", "/", 
        RowBox[{"(", 
         RowBox[{"cod", "-", "1.0"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"c2", "=", 
       RowBox[{"rc", "/", 
        RowBox[{"(", 
         RowBox[{"cod", "+", "1.0"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"mod", "=", 
       RowBox[{"rm", "/", 
        RowBox[{"(", 
         RowBox[{"cod", "+", "1.0"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"mid", "=", 
       RowBox[{"rm", "/", 
        RowBox[{"(", 
         RowBox[{"cod", "-", "1.0"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"frontSurfaceCurvature", "\[Rule]", "c1"}], ",", 
         RowBox[{"backSurfaceCurvature", "\[Rule]", "c2"}], ",", 
         RowBox[{"paraxialObjectDistance", "\[Rule]", "mod"}], ",", 
         RowBox[{"paraxialWorkingDistance", "\[Rule]", "mid"}], ",", 
         RowBox[{"additionalTermsOfPricipals", "[", 
          RowBox[{
          "d", ",", "n", ",", "c1", ",", "c2", ",", "mid", ",", "mod"}], 
          "]"}]}], "}"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"fixRemainedParaxialParametersFinite", "[", "__", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{"settleRemainedParaxialParameters", "::", "notimplemented"}], 
      "]"}], ";", "$Failed"}], ")"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"objectPrincipalPlanePosition", "[", 
   RowBox[{"c1_", ",", "c2_", ",", "n_", ",", "d_"}], "]"}], ":=", 
  RowBox[{"c2", "*", 
   RowBox[{"d", "/", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"c1", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"c2", "*", "d", 
          RowBox[{"(", 
           RowBox[{"n", "-", "1"}], ")"}]}], "+", "n"}], ")"}]}], "-", 
      RowBox[{"n", "*", "c2"}]}], ")"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"imagePrincipalPlanePosition", "[", 
    RowBox[{"c1_", ",", "c2_", ",", "n_", ",", "d_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"-", "c1"}], "*", 
    RowBox[{"d", "/", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"c1", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"c2", "*", "d", 
           RowBox[{"(", 
            RowBox[{"n", "-", "1"}], ")"}]}], "+", "n"}], ")"}]}], "-", 
       RowBox[{"n", "*", "c2"}]}], ")"}]}]}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"tautologyCheck", "[", 
   RowBox[{
    RowBox[{"d_", "?", "NumericQ"}], ",", 
    RowBox[{"mid_", "?", "NumericQ"}], ",", 
    RowBox[{"mod_", "?", "NumericQ"}], ",", 
    RowBox[{"oid_", "?", "NumericQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"{", "}"}], "/;", 
   RowBox[{"oid", "\[Equal]", 
    RowBox[{"d", "+", "mid", "+", "mod"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"tautologyCheck", "[", 
   RowBox[{
    RowBox[{"d_", "?", "NumericQ"}], ",", 
    RowBox[{"mid_", "?", "NumericQ"}], ",", 
    RowBox[{"mod_", "?", "NumericQ"}], ",", 
    RowBox[{"oid_", "?", "NumericQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{"settleRemainedParaxialParameters", "::", "tautology"}], "]"}], 
     ";", "$Failed"}], ")"}], "/;", 
   RowBox[{"oid", "=!=", 
    RowBox[{"d", "+", "mid", "+", "mod"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"tautologyCheck", "[", 
   RowBox[{
    RowBox[{"_", "?", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"NumericQ", "[", "#", "]"}]}], "&"}], ")"}]}], ",", 
    RowBox[{"mid_", "?", "NumericQ"}], ",", 
    RowBox[{"mod_", "?", "NumericQ"}], ",", 
    RowBox[{"oid_", "?", "NumericQ"}]}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"lensMediumThickness", "\[Rule]", 
    RowBox[{"oid", "-", "mid", "-", "mod"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"tautologyCheck", "[", 
   RowBox[{
    RowBox[{"d_", "?", "NumericQ"}], ",", 
    RowBox[{"_", "?", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"NumericQ", "[", "#", "]"}]}], "&"}], ")"}]}], ",", 
    RowBox[{"mod_", "?", "NumericQ"}], ",", 
    RowBox[{"oid_", "?", "NumericQ"}]}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"paraxialWorkingDistance", "\[Rule]", 
    RowBox[{"oid", "-", "d", "-", "mod"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"tautologyCheck", "[", 
   RowBox[{
    RowBox[{"d_", "?", "NumericQ"}], ",", 
    RowBox[{"mid_", "?", "NumericQ"}], ",", 
    RowBox[{"_", "?", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"NumericQ", "[", "#", "]"}]}], "&"}], ")"}]}], ",", 
    RowBox[{"oid_", "?", "NumericQ"}]}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"paraxialObjectDistance", "\[Rule]", 
    RowBox[{"oid", "-", "d", "-", "mid"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{"tautologyCheck", "[", 
   RowBox[{
    RowBox[{"d_", "?", "NumericQ"}], ",", 
    RowBox[{"mid_", "?", "NumericQ"}], ",", 
    RowBox[{"mod_", "?", "NumericQ"}], ",", 
    RowBox[{"_", "?", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"NumericQ", "[", "#", "]"}]}], "&"}], ")"}]}]}], "]"}], ":=", 
  
  RowBox[{"{", 
   RowBox[{"paraxialObjectImageDistance", "\[Rule]", 
    RowBox[{"mid", "+", "d", "+", "mod"}]}], "}"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"tautologyCheck", "[", "__", "]"}], ":=", 
   RowBox[{"Sequence", "[", "]"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"tautologyParameterList", "=", 
   RowBox[{"{", 
    RowBox[{"dParm", ",", "iParm", ",", "oParm", ",", "oiParm"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"tautologyParametersMatchQ", "[", 
    RowBox[{
    "d_", ",", "n_", ",", "f_", ",", "mid_", ",", "cod_", ",", "mod_", ",", 
     "oid_", ",", "beta_"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Intersection", "[", 
      RowBox[{
       RowBox[{"absentParameter", "[", 
        RowBox[{
        "d", ",", "n", ",", "f", ",", "mid", ",", "cod", ",", "mod", ",", 
         "oid", ",", "beta"}], "]"}], ",", "tautologyParameterList"}], "]"}], 
     "===", 
     RowBox[{"{", "}"}]}], ")"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"tooMuchConstraintsQ", "[", 
    RowBox[{
    "d_", ",", "n_", ",", "f_", ",", "mid_", ",", "cod_", ",", "mod_", ",", 
     "oid_", ",", "beta_"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"!", 
      RowBox[{"tautologyParametersMatchQ", "[", 
       RowBox[{
       "d", ",", "n", ",", "f", ",", "mid", ",", "cod", ",", "mod", ",", 
        "oid", ",", "beta"}], "]"}]}], "&&", 
     RowBox[{"(", "False", ")"}]}], ")"}]}], 
  RowBox[{"(*", "testing", "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"mostProbableParameterList", "=", 
   RowBox[{"{", 
    RowBox[{
    "nParm", ",", "dParm", ",", "iParm", ",", "bParm", ",", "oiParm"}], 
    "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialForMostProbableParameters", "[", 
    RowBox[{"d_", ",", "n_", ",", "mid_", ",", "oid_", ",", "beta_"}], "]"}], 
   ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"c1", ",", "c2", ",", "mod", ",", "f", ",", "cod"}], "}"}], ",", 
     RowBox[{
      RowBox[{"mod", "=", 
       RowBox[{"oid", "-", "d", "-", "mid"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"mod", "<", "0.0"}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"settleRemainedParaxialParameters", "::", "meybepositive"}],
           ",", "paraxialObjectDistance"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"c1", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"beta", "*", "d"}], "+", 
          RowBox[{"n", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"beta", "*", "mod"}], "+", "mid"}], ")"}]}]}], ")"}], 
        "/", 
        RowBox[{"(", 
         RowBox[{"beta", 
          RowBox[{"(", 
           RowBox[{"n", "-", "1.0"}], ")"}], "d", "*", "mod"}], ")"}]}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"c2", "=", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{"d", "+", 
           RowBox[{"n", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"beta", "*", "mod"}], "+", "mid"}], ")"}]}]}], ")"}]}], 
        "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"n", "-", "1.0"}], ")"}], "d", "*", "mid"}], ")"}]}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"f", "=", 
       RowBox[{
        RowBox[{"-", "beta"}], "*", "n", "*", "mid", "*", 
        RowBox[{"mod", "/", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"n", "*", "mid"}], "+", 
           RowBox[{"beta", 
            RowBox[{"(", 
             RowBox[{"d", "+", 
              RowBox[{"beta", "*", "n", "*", "mod"}]}], ")"}]}]}], 
          ")"}]}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"mod", "<", "0.0"}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"settleRemainedParaxialParameters", "::", "meybepositive"}],
           ",", "focalLength"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"cod", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"c1", "+", "c2"}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"c1", "-", "c2"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"frontSurfaceCurvature", "\[Rule]", "c1"}], ",", 
        RowBox[{"backSurfaceCurvature", "\[Rule]", "c2"}], ",", 
        RowBox[{"focalLength", "\[Rule]", "f"}], ",", 
        RowBox[{"paraxialObjectDistance", "\[Rule]", "mod"}], ",", 
        RowBox[{"coddingtonShapeFactor", "\[Rule]", "cod"}], ",", 
        RowBox[{"paraxialDistanceBetweenObjectAndPrincipal", "\[Rule]", 
         RowBox[{"mod", "-", 
          RowBox[{"objectPrincipalPlanePosition", "[", 
           RowBox[{"c1", ",", "c2", ",", "n", ",", "d"}], "]"}]}]}], ",", 
        RowBox[{"paraxialDistanceBetweenPrincipalAndImage", "\[Rule]", 
         RowBox[{"mid", "-", 
          RowBox[{"imagePrincipalPlanePosition", "[", 
           RowBox[{"c1", ",", "c2", ",", "n", ",", "d"}], "]"}]}]}], ",", 
        RowBox[{"conjugateInfiniteness", "\[Rule]", "False"}]}], "}"}]}]}], 
    "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"fixedFocalLengthParameterList", "=", 
   RowBox[{"{", 
    RowBox[{
    "nParm", ",", "dParm", ",", "fParm", ",", "bParm", ",", "oiParm"}], 
    "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialForFixedFocalLength", "[", 
    RowBox[{"d_", ",", "n_", ",", "f_", ",", "oid_", ",", "beta_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sq", ",", "mid"}], "}"}], ",", 
     RowBox[{
      RowBox[{"sq", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"oid", "-", "d"}], ")"}], "beta"}], ")"}], "^", "2"}], 
        "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"beta", "^", "2"}], "-", "1.0"}], ")"}], "f"}], ")"}], 
         "^", "2"}], "+", 
        RowBox[{"2", "beta", "*", "f", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"oid", "-", "d"}], ")"}], 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"beta", "^", "2"}], "+", "1.0"}], ")"}]}], "+", 
           RowBox[{"2.0", "beta", "*", 
            RowBox[{"d", "/", "n"}]}]}], ")"}]}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"sq", "<", "0.0"}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"settleRemainedParaxialParameters", "::", "inconsistent"}], 
          ",", 
          RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mid", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{"beta", "^", "2"}]}], ")"}], "f"}], "+", 
          RowBox[{"beta", 
           RowBox[{"(", 
            RowBox[{"oid", "-", "d"}], ")"}]}], "+", 
          RowBox[{"Sqrt", "[", "sq", "]"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"2", "beta"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"mid", "<", "0.0"}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"settleRemainedParaxialParameters", "::", "meybepositive"}],
           ",", "paraxialWorkingDistance"}], "]"}]}], "]"}], ";", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"paraxialWorkingDistance", "\[Rule]", "mid"}], ",", 
         RowBox[{"settleRemainedParaxialForMostProbableParameters", "[", 
          RowBox[{"d", ",", "n", ",", "mid", ",", "oid", ",", "beta"}], 
          "]"}]}], "}"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"lackOfOIAndWDParameterList", "=", 
   RowBox[{"{", 
    RowBox[{"nParm", ",", "dParm", ",", "fParm", ",", "bParm", ",", "oParm"}],
     "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialForlackOfOIAndWD", "[", 
    RowBox[{"d_", ",", "n_", ",", "f_", ",", "mod_", ",", "beta_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mid", ",", "oid"}], "}"}], ",", 
     RowBox[{
      RowBox[{"mid", "=", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{"beta", "*", "f", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"beta", "*", "n", "*", "mod"}], "+", "d"}], ")"}]}], 
          ")"}]}], "/", 
        RowBox[{"(", 
         RowBox[{"n", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"beta", "*", "mod"}], "+", "f"}], ")"}]}], ")"}]}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"mid", "<", "0.0"}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"settleRemainedParaxialParameters", "::", "meybepositive"}],
           ",", "paraxialWorkingDistance"}], "]"}]}], "]"}], ";", 
      RowBox[{"oid", "=", 
       RowBox[{"d", "+", "mod", "+", "mid"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"paraxialWorkingDistance", "\[Rule]", "mid"}], ",", 
         RowBox[{"paraxialObjectImageDistance", "\[Rule]", "oid"}], ",", 
         RowBox[{"settleRemainedParaxialForMostProbableParameters", "[", 
          RowBox[{"d", ",", "n", ",", "mid", ",", "oid", ",", "beta"}], 
          "]"}]}], "}"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"lackOfOIAndODParameterList", "=", 
   RowBox[{"{", 
    RowBox[{"nParm", ",", "dParm", ",", "fParm", ",", "bParm", ",", "iParm"}],
     "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialForlackOfOIAndOD", "[", 
    RowBox[{"d_", ",", "n_", ",", "f_", ",", "mid_", ",", "beta_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mod", ",", "oid"}], "}"}], ",", 
     RowBox[{
      RowBox[{"mod", "=", 
       RowBox[{
        RowBox[{"-", "f"}], 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"n", "*", "mid"}], "+", 
           RowBox[{"beta", "*", "d"}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"beta", "*", "n", 
           RowBox[{"(", 
            RowBox[{"mid", "+", 
             RowBox[{"beta", "*", "f"}]}], ")"}]}], ")"}]}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"mod", "<", "0.0"}], ",", 
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"settleRemainedParaxialParameters", "::", "meybepositive"}],
           ",", "paraxialObjectDistance"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"oid", "=", 
       RowBox[{"d", "+", "mod", "+", "mid"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"paraxialWorkingDistance", "\[Rule]", "mid"}], ",", 
         RowBox[{"paraxialObjectImageDistance", "\[Rule]", "oid"}], ",", 
         RowBox[{"settleRemainedParaxialForMostProbableParameters", "[", 
          RowBox[{"d", ",", "n", ",", "mid", ",", "oid", ",", "beta"}], 
          "]"}]}], "}"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParametersFinite", "[", 
    RowBox[{
    "d_", ",", "n_", ",", "f_", ",", "mid_", ",", "cod_", ",", "mod_", ",", 
     "oid_", ",", "beta_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"oid", "===", 
       RowBox[{"mod", "+", "d", "+", "mid"}]}], ",", 
      RowBox[{"settleRemainedParaxialParametersFinite", "[", 
       RowBox[{
       "d", ",", "n", ",", "f", ",", "mid", ",", "cod", ",", "oParm", ",", 
        "oid", ",", "beta"}], "]"}], ",", 
      RowBox[{
       RowBox[{"Message", "[", 
        RowBox[{"settleRemainedParaxialParameters", "::", "tautoloy"}], "]"}],
        ";", "$Failed"}]}], "]"}], "/;", 
    RowBox[{"tautologyParametersMatchQ", "[", 
     RowBox[{
     "d", ",", "n", ",", "f", ",", "mid", ",", "cod", ",", "mod", ",", "oid", 
      ",", "beta"}], "]"}]}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParametersFinite", "[", 
    RowBox[{"d_", ",", "n_", ",", "f_", ",", "m_", ",", "cod_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Message", "[", 
       RowBox[{
        RowBox[{"settleRemainedParaxialParameters", "::", "compalsory"}], ",",
         "lensMediumSymbol"}], "]"}], ";", "$Failed"}], ")"}], "/;", 
    RowBox[{
     RowBox[{"absentParameter", "[", 
      RowBox[{"d", ",", "n", ",", "f", ",", "m", ",", "cod"}], "]"}], "===", 
     RowBox[{"{", "nParm", "}"}]}]}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParametersFinite", "[", 
    RowBox[{
    "d_", ",", "n_", ",", "f_", ",", "mid_", ",", "cod_", ",", "mod_", ",", 
     "oid_", ",", "beta_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"settleRemainedParaxialForMostProbableParameters", "[", 
     RowBox[{"d", ",", "n", ",", "mid", ",", "oid", ",", "beta"}], "]"}], "/;", 
    RowBox[{"setEqualQ", "[", 
     RowBox[{
      RowBox[{"containedParameter", "[", 
       RowBox[{
       "d", ",", "n", ",", "f", ",", "mid", ",", "cod", ",", "mod", ",", 
        "oid", ",", "beta"}], "]"}], ",", "mostProbableParameterList"}], 
     "]"}]}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParametersFinite", "[", 
    RowBox[{
    "d_", ",", "n_", ",", "f_", ",", "mid_", ",", "cod_", ",", "mod_", ",", 
     "oid_", ",", "beta_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"settleRemainedParaxialForFixedFocalLength", "[", 
     RowBox[{"d", ",", "n", ",", "f", ",", "oid", ",", "beta"}], "]"}], "/;", 
    
    RowBox[{"setEqualQ", "[", 
     RowBox[{
      RowBox[{"containedParameter", "[", 
       RowBox[{
       "d", ",", "n", ",", "f", ",", "mid", ",", "cod", ",", "mod", ",", 
        "oid", ",", "beta"}], "]"}], ",", "fixedFocalLengthParameterList"}], 
     "]"}]}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParametersFinite", "[", 
    RowBox[{
    "d_", ",", "n_", ",", "f_", ",", "mid_", ",", "cod_", ",", "mod_", ",", 
     "oid_", ",", "beta_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"settleRemainedParaxialForlackOfOIAndWD", "[", 
     RowBox[{"d", ",", "n", ",", "f", ",", "mod", ",", "beta"}], "]"}], "/;", 
    
    RowBox[{"setEqualQ", "[", 
     RowBox[{
      RowBox[{"containedParameter", "[", 
       RowBox[{
       "d", ",", "n", ",", "f", ",", "mid", ",", "cod", ",", "mod", ",", 
        "oid", ",", "beta"}], "]"}], ",", "lackOfOIAndWDParameterList"}], 
     "]"}]}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParametersFinite", "[", 
    RowBox[{
    "d_", ",", "n_", ",", "f_", ",", "mid_", ",", "cod_", ",", "mod_", ",", 
     "oid_", ",", "beta_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"settleRemainedParaxialForlackOfOIAndOD", "[", 
     RowBox[{"d", ",", "n", ",", "f", ",", "mod", ",", "beta"}], "]"}], "/;", 
    
    RowBox[{"setEqualQ", "[", 
     RowBox[{
      RowBox[{"containedParameter", "[", 
       RowBox[{
       "d", ",", "n", ",", "f", ",", "mid", ",", "cod", ",", "mod", ",", 
        "oid", ",", "beta"}], "]"}], ",", "lackOfOIAndODParameterList"}], 
     "]"}]}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParametersFinite", "[", "__", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{"settleRemainedParaxialParameters", "::", "notimplemented"}], 
      "]"}], ";", "$Failed"}], ")"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParameters", "::", "tautology"}], "=", 
   "\"\<distances are not consistent each other.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParameters", "::", "meybepositive"}], "=", 
   "\"\<a paraxial parameter `1` may be positive.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParameters", "::", "inconsistent"}], "=", 
   "\"\<paraxial parameter set is inconsistent.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParameters", "::", "notenough"}], "=", 
   "\"\<paraxial parameter set is insufficient to fix paraxial \
condition.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParameters", "::", "toomuch"}], "=", 
   "\"\<paraxial parameter set is excessive and no solution.\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParameters", "::", "compalsory"}], "=", 
   "\"\<numerical rule for `1` is needed for consistency between \
parameters.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"settleRemainedParaxialParameters", "::", "tautoloy"}], "=", 
   "\"\<parameter set includes tautology.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"settleRemainedParaxialParameters", "::", "notimplemented"}], 
    "=", "\"\<sorry, a result for the parameter set is currently not \
implemented.\>\""}], ";"}], "\[IndentingNewLine]", 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], "*)"}], 
  RowBox[{
   RowBox[{
   "AsphericalFittingForInterpolatedVersion", "=", 
    "\"\<AsphericalFittingForInterpolated 0.1A by Takatoshi Yamada, Ayase \
corp.\>\""}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "AsphericalFittingForInterpolatedDescrciption", "=", 
    "\"\<AsphericalFittingForInterpolatedVersion package for converting a \
lens shape expressed by interpolation function into a function in aspherical \
formula.\>\""}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "AsphericalFittingForInterpolatedVersion", "=", "\"\<version0.1A\>\""}], 
   ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "AsphericalFittingForInterpolatedUsage", "=", 
    "\"\<type '?fitAsphericalFomura' and '?elliminateConstantOffset' to show \
usage texts.\>\""}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"fitAsphericalFormula", "::", "usage"}], "=", 
    "\"\<fitAsphericalFormula[if_InterpolatingFunction,explicitCurvature_?\
NumericQ,heighestOrder_,opt___] returns coefficients of aspherical formura \
from InterpolationFunction. This call needs to specify paraxial curvature of \
the function.\nfitAsphericalFormula[\\\"output\\\"] returns tag symbols of \
fitted coefficients.\nfitAsphericalFormula[fittedResult:{_Rule...}][y_] \
returns a Mathematica function for variable 'y' to give a result of fitted \
coefficients.\nfitAsphericalFormula[\\\"formula\\\"][y_] returns aspherical \
formula for variable y.\>\""}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"forceParabolic", "::", "usage"}], "=", 
    "\"\<forceParabolic is an option of fitAsphericalFormula. Fitting will be \
tried using conic constant = -1.\>\""}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"conicSuggestion", "::", "usage"}], "=", 
    "\"\<conicSuggestion is an option of fitAsphericalFormula. It specifies \
initial value for conic constant. The default value is 0.0.\>\""}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"outputMathematicaFunction", "::", "usage"}], "=", 
    "\"\<outputMathematicaFunction is an option of fitAsphericalFormula. If \
it is specified True, fitAsphericalFormula returns Mathematica \
Function.\>\""}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"elliminateConstantOffset", "::", "usage"}], "=", 
    "\"\<fitAsphericalFomura[elliminateConstantOffset[fittedResult]][y_] \
returns a Mathematica function without constant offset value.\>\""}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"asphericalFormulaFitting", "::", "usage"}], "=", 
    "\"\<asphericalFormulaFitting is a tag for surface attribute.\>\""}], 
   ";"}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "constantOffset", ",", "curvature", ",", "conicConstant", ",", 
     "powerSeriesCoefficients", ",", "normalizationRadius"}], "}"}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"minimize2ndCoefficient", "[", 
    RowBox[{
     RowBox[{"pnts", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"_", ",", "_"}], "}"}], "..."}], "}"}]}], ",", "func_", ",", 
     
     RowBox[{"{", 
      RowBox[{"coef_Symbol", "\[Rule]", 
       RowBox[{"ival_", "?", "NumberQ"}]}], "}"}], ",", "v_Symbol"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "fv"}], "}"}], ",", 
     RowBox[{"FindMinimum", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"fv", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Fit", "[", 
             RowBox[{
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "-", 
                    RowBox[{"(", 
                    RowBox[{"func", "/.", 
                    RowBox[{"v", "\[Rule]", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], ")"}]}]}], "}"}], 
                 "&"}], ",", "pnts"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"x", "^", "2"}], "}"}], ",", "x"}], "]"}], "/.", 
            RowBox[{"x", "\[Rule]", "1"}]}], ")"}], "^", "2"}]}], ")"}], ",", 
       
       RowBox[{"{", 
        RowBox[{"coef", ",", "ival"}], "}"}]}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "fitAsphericalFormula", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"fitAsphericalFormula", "[", "\"\<formula\>\"", "]"}], "[", "y_", 
    "]"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"curvature", "*", 
       RowBox[{"y", "^", "2"}]}], ")"}], "/", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"1", "-", 
         RowBox[{
          RowBox[{"curvature", "^", "2"}], "*", 
          RowBox[{"(", 
           RowBox[{"1", "+", "conicConstant"}], ")"}], "*", 
          RowBox[{"y", "^", "2"}]}]}], "]"}]}], ")"}]}], "+", 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"powerSeriesCoefficients", "[", "i", "]"}], 
       RowBox[{"y", "^", "i"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "4", ",", "10", ",", "2"}], "}"}]}], "]"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"fitAsphericalFormula", "[", "\"\<output\>\"", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
    "constantOffset", ",", "curvature", ",", "conicConstant", ",", 
     "powerSeriesCoefficients"}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"fitAsphericalFormula", "::", "cantfindk"}], "=", 
    "\"\<can not find proper conic constant value. Try to specify \
suggestions.\>\""}], ";"}], "\[IndentingNewLine]", "\n", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "fitAsphericalFormula", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"forceParabolic", "\[Rule]", "False"}], ",", 
     RowBox[{"conicSuggestion", "\[Rule]", "0"}], ",", 
     RowBox[{"outputMathematicaFunction", "\[Rule]", "False"}]}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"fitAsphericalFormula", "[", 
    RowBox[{"fittedResult", ":", 
     RowBox[{"{", 
      RowBox[{"_Rule", "..."}], "}"}]}], "]"}], "[", "y_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"orders", ",", "quad", ",", "pw"}], "}"}], ",", 
     RowBox[{
      RowBox[{"quad", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"curvature", "*", 
           RowBox[{"y", "^", "2"}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"Sqrt", "[", 
            RowBox[{"1", "-", 
             RowBox[{
              RowBox[{"curvature", "^", "2"}], "*", 
              RowBox[{"(", 
               RowBox[{"1", "+", "conicConstant"}], ")"}], "*", 
              RowBox[{"y", "^", "2"}]}]}], "]"}]}], ")"}]}], "/.", 
        "fittedResult"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"orders", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{"First", ",", "fittedResult"}], "]"}], ",", 
         RowBox[{
          RowBox[{"powerSeriesCoefficients", "[", "i_", "]"}], "\[Rule]", 
          "i"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"pw", "=", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"powerSeriesCoefficients", "[", "#", "]"}], 
             RowBox[{"y", "^", "#"}]}], ")"}], "&"}], ",", "orders"}], "]"}], 
        "/.", "fittedResult"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"quad", "+", 
       RowBox[{"Apply", "[", 
        RowBox[{"Plus", ",", "pw"}], "]"}], "+", 
       RowBox[{"(", 
        RowBox[{"constantOffset", "/.", "fittedResult"}], ")"}]}]}]}], "]"}], 
   "/;", 
   RowBox[{"(", 
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{"First", ",", "fittedResult"}], "]"}], ",", 
       "normalizationRadius"}], "]"}]}], ")"}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"fitAsphericalFormula", "[", 
     RowBox[{"fittedResult", ":", 
      RowBox[{"{", 
       RowBox[{"_Rule", "..."}], "}"}]}], "]"}], "[", "y_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"orders", ",", "quad", ",", "pw", ",", "rad"}], "}"}], ",", 
      RowBox[{
       RowBox[{"rad", "=", 
        RowBox[{"normalizationRadius", "/.", "fittedResult"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"quad", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"curvature", "*", 
            RowBox[{"y", "^", "2"}]}], ")"}], "/", 
          RowBox[{"(", 
           RowBox[{"1", "+", 
            RowBox[{"Sqrt", "[", 
             RowBox[{"1", "-", 
              RowBox[{
               RowBox[{"curvature", "^", "2"}], "*", 
               RowBox[{"(", 
                RowBox[{"1", "+", "conicConstant"}], ")"}], "*", 
               RowBox[{"y", "^", "2"}]}]}], "]"}]}], ")"}]}], "/.", 
         "fittedResult"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"orders", "=", 
        RowBox[{"Cases", "[", 
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{"First", ",", "fittedResult"}], "]"}], ",", 
          RowBox[{
           RowBox[{"powerSeriesCoefficients", "[", "i_", "]"}], "\[Rule]", 
           "i"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"pw", "=", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"powerSeriesCoefficients", "[", "#", "]"}], 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"y", "/", "rad"}], ")"}], "^", "#"}]}], ")"}], "&"}], 
           ",", "orders"}], "]"}], "/.", "fittedResult"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"quad", "+", 
        RowBox[{"Apply", "[", 
         RowBox[{"Plus", ",", "pw"}], "]"}], "+", 
        RowBox[{"(", 
         RowBox[{"constantOffset", "/.", "fittedResult"}], ")"}]}]}]}], "]"}],
     "/;", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{"First", ",", "fittedResult"}], "]"}], ",", 
      "normalizationRadius"}], "]"}]}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"fitAsphericalFormula", "[", 
    RowBox[{"if_InterpolatingFunction", ",", 
     RowBox[{"explicitCurvature_", "?", "NumericQ"}], ",", 
     RowBox[{"heighestOrder_", "?", "IntegerQ"}], ",", "opt___Rule"}], "]"}], 
   ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "orgv", ",", "quad", ",", "quadk", ",", "y", ",", "surfpnts", ",", "k", 
       ",", "kini", ",", "ksol", ",", "fk", ",", "ppnt", ",", "spow", ",", 
       "kval", ",", "csug", ",", "para", ",", "normr", ",", "ret"}], "}"}], 
     ",", 
     RowBox[{
      RowBox[{"csug", "=", 
       RowBox[{
        RowBox[{"conicSuggestion", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "fitAsphericalFormula", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"para", "=", 
       RowBox[{
        RowBox[{"forceParabolic", "/.", 
         RowBox[{"{", "opt", "}"}]}], "/.", 
        RowBox[{"Options", "[", "fitAsphericalFormula", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"quad", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"explicitCurvature", "*", 
          RowBox[{"y", "^", "2"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"Sqrt", "[", 
           RowBox[{"1", "-", 
            RowBox[{
             RowBox[{"explicitCurvature", "^", "2"}], "*", 
             RowBox[{"(", 
              RowBox[{"1", "+", "k"}], ")"}], "*", 
             RowBox[{"y", "^", "2"}]}]}], "]"}]}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"orgv", "=", 
       RowBox[{"if", "[", "0", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"surfpnts", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#", ",", 
            RowBox[{
             RowBox[{"if", "[", "#", "]"}], "-", "orgv"}]}], "}"}], "&"}], 
         ",", 
         RowBox[{"interpolationSectionPoints", "[", "if", "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"ksol", "=", 
       RowBox[{"If", "[", 
        RowBox[{"para", ",", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"k", "\[Rule]", 
            RowBox[{"-", "1"}]}], "}"}], "}"}], ",", 
         RowBox[{
          RowBox[{"kini", "=", 
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"FindFit", "[", 
              RowBox[{"surfpnts", ",", "quad", ",", 
               RowBox[{"{", 
                RowBox[{"{", 
                 RowBox[{"k", ",", "csug"}], "}"}], "}"}], ",", "y"}], "]"}], 
             ",", 
             RowBox[{
              RowBox[{"Message", "[", 
               RowBox[{"fitAsphericalFormula", "::", "cantfindk"}], "]"}], 
              ";", 
              RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"minimize2ndCoefficient", "[", 
           RowBox[{"surfpnts", ",", "quad", ",", "kini", ",", "y"}], 
           "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"quadk", "=", 
       RowBox[{"quad", "/.", 
        RowBox[{"ksol", "[", 
         RowBox[{"[", 
          RowBox[{"-", "1"}], "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"kval", "=", 
       RowBox[{"k", "/.", 
        RowBox[{"ksol", "[", 
         RowBox[{"[", 
          RowBox[{"-", "1"}], "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ppnt", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "-", "quadk"}], "/.", 
             RowBox[{"y", "\[Rule]", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}]}]}], "}"}], "&"}], ",", 
         "surfpnts"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"spow", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"heighestOrder", "<", "4"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"heighestOrder", "\[LessEqual]", "16"}], ",", 
           RowBox[{"CoefficientList", "[", 
            RowBox[{
             RowBox[{"Fit", "[", 
              RowBox[{"ppnt", ",", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"y", "^", "n"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"n", ",", "4", ",", "heighestOrder", ",", "2"}], 
                  "}"}]}], "]"}], ",", "y"}], "]"}], ",", "y"}], "]"}], ",", 
           RowBox[{
            RowBox[{"normr", "=", 
             RowBox[{"Max", "[", 
              RowBox[{"Abs", "[", 
               RowBox[{"interpolationDomain", "[", "if", "]"}], "]"}], 
              "]"}]}], ";", 
            RowBox[{"CoefficientList", "[", 
             RowBox[{
              RowBox[{"Fit", "[", 
               RowBox[{
                RowBox[{"normalizeRadius", "[", 
                 RowBox[{"ppnt", ",", "normr"}], "]"}], ",", 
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"y", "^", "n"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"n", ",", "4", ",", "heighestOrder", ",", "2"}], 
                   "}"}]}], "]"}], ",", "y"}], "]"}], ",", "y"}], "]"}]}]}], 
          "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ret", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"constantOffset", "\[Rule]", "orgv"}], ",", 
          RowBox[{"curvature", "\[Rule]", "explicitCurvature"}], ",", 
          RowBox[{"conicConstant", "\[Rule]", "kval"}], ",", 
          RowBox[{"Select", "[", 
           RowBox[{
            RowBox[{"MapIndexed", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"powerSeriesCoefficients", "[", 
                 RowBox[{
                  RowBox[{"#2", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], "]"}], 
                "\[Rule]", "#1"}], "&"}], ",", "spow"}], "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", 
                RowBox[{"-", "1"}], "]"}], "]"}], "=!=", "0"}], "&"}]}], 
           "]"}]}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"NumericQ", "[", "normr", "]"}], ",", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"ret", ",", 
          RowBox[{"normalizationRadius", "\[Rule]", "normr"}]}], "]"}], ",", 
        "ret"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"outputMathematicaFunction", "/.", 
           RowBox[{"{", "opt", "}"}]}], "/.", 
          RowBox[{"Options", "[", "fitAsphericalFormula", "]"}]}], ")"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"fitAsphericalFormula", "[", "ret", "]"}], "[", "#", "]"}], 
         "&"}], ",", "ret"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", "\n",
   "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"normalizeRadius", "[", 
    RowBox[{
     RowBox[{"pnts", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"_", ",", "_"}], "}"}], "..."}], "}"}]}], ",", "rad_"}], 
    "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "/", "rad"}], ",", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], ",", "pnts"}], 
    "]"}]}], "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"::", "Input", "::", "Initialization", "::"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"elliminateConstantOffset", "[", 
    RowBox[{"result", ":", 
     RowBox[{"{", 
      RowBox[{"_Rule", "..."}], "}"}]}], "]"}], ":=", 
   RowBox[{"Prepend", "[", 
    RowBox[{"result", ",", 
     RowBox[{"constantOffset", "\[Rule]", "0"}]}], "]"}]}], 
  "\[IndentingNewLine]", "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "SCHOTTOExtracted", "=", 
   "\"\<CC SCHOTTextracted.preferred.inquiry and obsolete data since 2006. \
status as of 18. June 2014+Grp glass dec 2011\nNM N-BK7 2 517642.251 1.5168 \
64.17 0 1\nGC step 0.5 available\nED 7.100000 8.300000 2.510000-0.000900 0\n\
CD 1.039612120E+00 6.000698670E-03 2.317923440E-01 2.001791440E-02 \
1.010469450E+00 1.035606530E+02 0.000000000E+00 0.000000000E+00\nTD \
1.860000E-06 1.310000E-08-1.370000E-11 4.340000E-07 6.270000E-10 1.700000E-01 \
2.000000E+01\nOD 1.0000 1.0000 0.0000 1.0000 2.3000 2.3000\nLD 3.00000E-01 \
2.50000E+00\nIT 3.00000E-01 5.00000E-02 2.50000E+01\nIT 3.10000E-01 \
2.50000E-01 2.50000E+01\nIT 3.20000E-01 5.20000E-01 2.50000E+01\nIT \
3.34000E-01 7.80000E-01 2.50000E+01\nIT 3.50000E-01 9.20000E-01 2.50000E+01\n\
IT 3.65000E-01 9.71000E-01 2.50000E+01\nIT 3.70000E-01 9.77000E-01 \
2.50000E+01\nIT 3.80000E-01 9.83000E-01 2.50000E+01\nIT 3.90000E-01 \
9.89000E-01 2.50000E+01\nIT 4.00000E-01 9.92000E-01 2.50000E+01\nIT \
4.05000E-01 9.93000E-01 2.50000E+01\nIT 4.20000E-01 9.93000E-01 2.50000E+01\n\
IT 4.36000E-01 9.92000E-01 2.50000E+01\nIT 4.60000E-01 9.93000E-01 \
2.50000E+01\nIT 5.00000E-01 9.94000E-01 2.50000E+01\nIT 5.46000E-01 \
9.96000E-01 2.50000E+01\nIT 5.80000E-01 9.95000E-01 2.50000E+01\nIT \
6.20000E-01 9.94000E-01 2.50000E+01\nIT 6.60000E-01 9.94000E-01 2.50000E+01\n\
IT 7.00000E-01 9.96000E-01 2.50000E+01\nIT 1.06000E+00 9.97000E-01 \
2.50000E+01\nIT 1.53000E+00 9.80000E-01 2.50000E+01\nIT 1.97000E+00 \
8.40000E-01 2.50000E+01\nIT 2.32500E+00 5.60000E-01 2.50000E+01\nIT \
2.50000E+00 3.60000E-01 2.50000E+01\nNM N-K5 2 522595.259 1.52249 59.48 0 1\n\
GC\nED 8.200000 9.600000 2.590000 0.000000 0\nCD 1.085118330E+00 \
6.610995030E-03 1.995620050E-01 2.411086600E-02 9.305116630E-01 \
1.119827770E+02 0.000000000E+00 0.000000000E+00\nTD-4.130000E-07 \
1.030000E-08-3.400000E-11 4.730000E-07 5.190000E-10 2.130000E-01 2.000000E+01\
\nOD 2.0000 1.0000 0.0000 1.0000 1.0000 1.0000\nLD 3.10000E-01 2.50000E+00\n\
IT 3.10000E-01 2.00000E-02 2.50000E+01\nIT 3.20000E-01 2.10000E-01 \
2.50000E+01\nIT 3.34000E-01 6.30000E-01 2.50000E+01\nIT 3.50000E-01 \
8.80000E-01 2.50000E+01\nIT 3.65000E-01 9.56000E-01 2.50000E+01\nIT \
3.70000E-01 9.62000E-01 2.50000E+01\nIT 3.80000E-01 9.77000E-01 2.50000E+01\n\
IT 3.90000E-01 9.84000E-01 2.50000E+01\nIT 4.00000E-01 9.88000E-01 \
2.50000E+01\nIT 4.05000E-01 9.89000E-01 2.50000E+01\nIT 4.20000E-01 \
9.91000E-01 2.50000E+01\nIT 4.36000E-01 9.91000E-01 2.50000E+01\nIT \
4.60000E-01 9.91000E-01 2.50000E+01\nIT 5.00000E-01 9.93000E-01 2.50000E+01\n\
IT 5.46000E-01 9.95000E-01 2.50000E+01\nIT 5.80000E-01 9.95000E-01 \
2.50000E+01\nIT 6.20000E-01 9.93000E-01 2.50000E+01\nIT 6.60000E-01 \
9.92000E-01 2.50000E+01\nIT 7.00000E-01 9.94000E-01 2.50000E+01\nIT \
1.06000E+00 9.95000E-01 2.50000E+01\nIT 1.53000E+00 9.86000E-01 2.50000E+01\n\
IT 1.97000E+00 8.70000E-01 2.50000E+01\nIT 2.32500E+00 6.60000E-01 \
2.50000E+01\nIT 2.50000E+00 5.30000E-01 2.50000E+01\nNM N-SK2 2 607567.355 \
1.60738 56.65 0 1\nGC step 0.5 available\nED 6.000000 7.100000 \
3.550000-0.000800 0\nCD 1.281890120E+00 7.271916400E-03 2.577382580E-01 \
2.428235270E-02 9.681860400E-01 1.103777730E+02 0.000000000E+00 \
0.000000000E+00\nTD 3.800000E-06 1.410000E-08 2.280000E-11 6.440000E-07 \
8.030000E-11 1.080000E-01 2.000000E+01\nOD 2.0000 2.0000 0.0000 2.2000 1.0000 \
2.3000\nLD 3.10000E-01 2.50000E+00\nIT 3.10000E-01 4.00000E-02 2.50000E+01\n\
IT 3.20000E-01 1.80000E-01 2.50000E+01\nIT 3.34000E-01 4.90000E-01 \
2.50000E+01\nIT 3.50000E-01 7.80000E-01 2.50000E+01\nIT 3.65000E-01 \
9.20000E-01 2.50000E+01\nIT 3.70000E-01 9.40000E-01 2.50000E+01\nIT \
3.80000E-01 9.70000E-01 2.50000E+01\nIT 3.90000E-01 9.79000E-01 2.50000E+01\n\
IT 4.00000E-01 9.84000E-01 2.50000E+01\nIT 4.05000E-01 9.85000E-01 \
2.50000E+01\nIT 4.20000E-01 9.84000E-01 2.50000E+01\nIT 4.36000E-01 \
9.82000E-01 2.50000E+01\nIT 4.60000E-01 9.83000E-01 2.50000E+01\nIT \
5.00000E-01 9.90000E-01 2.50000E+01\nIT 5.46000E-01 9.95000E-01 2.50000E+01\n\
IT 5.80000E-01 9.95000E-01 2.50000E+01\nIT 6.20000E-01 9.94000E-01 \
2.50000E+01\nIT 6.60000E-01 9.94000E-01 2.50000E+01\nIT 7.00000E-01 \
9.95000E-01 2.50000E+01\nIT 1.06000E+00 9.95000E-01 2.50000E+01\nIT \
1.53000E+00 9.88000E-01 2.50000E+01\nIT 1.97000E+00 9.30000E-01 2.50000E+01\n\
IT 2.32500E+00 7.60000E-01 2.50000E+01\nIT 2.50000E+00 6.00000E-01 \
2.50000E+01\nNM N-SF15 2 699302.292 1.69892 30.2 0 1\nGC\nED 8.040000 \
9.280000 2.921000 0.010800 0\nCD 1.570556340E+00 1.165070140E-02 \
2.189870940E-01 5.978568970E-02 1.508240170E+00 1.327093390E+02 \
0.000000000E+00 0.000000000E+00\nTD-7.150000E-07 1.040000E-08-2.620000E-11 \
8.560000E-07 1.290000E-09 2.810000E-01 2.000000E+01\nOD 3.5000 1.0000 0.0000 \
1.0000 1.0000 1.0000\nLD 3.70000E-01 2.50000E+00\nIT 3.70000E-01 1.00000E-02 \
2.50000E+01\nIT 3.80000E-01 2.00000E-01 2.50000E+01\nIT 3.90000E-01 \
4.80000E-01 2.50000E+01\nIT 4.00000E-01 6.80000E-01 2.50000E+01\nIT \
4.05000E-01 7.40000E-01 2.50000E+01\nIT 4.20000E-01 8.60000E-01 2.50000E+01\n\
IT 4.36000E-01 9.12000E-01 2.50000E+01\nIT 4.60000E-01 9.43000E-01 \
2.50000E+01\nIT 5.00000E-01 9.70000E-01 2.50000E+01\nIT 5.46000E-01 \
9.85000E-01 2.50000E+01\nIT 5.80000E-01 9.86000E-01 2.50000E+01\nIT \
6.20000E-01 9.84000E-01 2.50000E+01\nIT 6.60000E-01 9.83000E-01 2.50000E+01\n\
IT 7.00000E-01 9.88000E-01 2.50000E+01\nIT 1.06000E+00 9.96000E-01 \
2.50000E+01\nIT 1.53000E+00 9.76000E-01 2.50000E+01\nIT 1.97000E+00 \
8.90000E-01 2.50000E+01\nIT 2.32500E+00 6.40000E-01 2.50000E+01\nIT \
2.50000E+00 5.10000E-01 2.50000E+01\nNM N-LASF9 2 850322.441 1.85025 32.17 0 \
1\nGC\nED 7.370000 8.380000 4.410000 0.003700 0\nCD 2.000295470E+00 \
1.214260170E-02 2.989268860E-01 5.387362360E-02 1.806918430E+00 \
1.565308290E+02 0.000000000E+00 0.000000000E+00\nTD 1.050000E-06 \
1.020000E-08-2.380000E-11 9.190000E-07 1.180000E-09 2.570000E-01 2.000000E+01\
\nOD 7.0000 1.0000 0.0000 2.0000 1.0000 1.0000\nLD 3.65000E-01 2.50000E+00\n\
IT 3.65000E-01 2.50000E+01\nIT 3.70000E-01 4.00000E-02 2.50000E+01\nIT \
3.80000E-01 2.00000E-01 2.50000E+01\nIT 3.90000E-01 4.00000E-01 2.50000E+01\n\
IT 4.00000E-01 5.70000E-01 2.50000E+01\nIT 4.05000E-01 6.30000E-01 \
2.50000E+01\nIT 4.20000E-01 7.70000E-01 2.50000E+01\nIT 4.36000E-01 \
8.40000E-01 2.50000E+01\nIT 4.60000E-01 8.98000E-01 2.50000E+01\nIT \
5.00000E-01 9.45000E-01 2.50000E+01\nIT 5.46000E-01 9.72000E-01 2.50000E+01\n\
IT 5.80000E-01 9.78000E-01 2.50000E+01\nIT 6.20000E-01 9.79000E-01 \
2.50000E+01\nIT 6.60000E-01 9.81000E-01 2.50000E+01\nIT 7.00000E-01 \
9.86000E-01 2.50000E+01\nIT 1.06000E+00 9.94000E-01 2.50000E+01\nIT \
1.53000E+00 9.86000E-01 2.50000E+01\nIT 1.97000E+00 9.19000E-01 2.50000E+01\n\
IT 2.32500E+00 7.12000E-01 2.50000E+01\nIT 2.50000E+00 5.98000E-01 \
2.50000E+01\nNM N-SF11 2 785257.322 1.78472 25.68 0 1\nGC\nED 8.520000 \
9.850000 3.224000 0.015000 0\nCD 1.737596950E+00 1.318870700E-02 \
3.137473460E-01 6.230681420E-02 1.898781010E+00 1.552362900E+02 \
0.000000000E+00 0.000000000E+00\nTD-3.560000E-06 9.200000E-09-2.100000E-11 \
9.650000E-07 1.440000E-09 2.940000E-01 2.000000E+01\nOD 3.5000 1.0000 0.0000 \
1.0000 1.0000 1.0000\nLD 3.70000E-01 2.50000E+00\nIT 3.70000E-01 2.00000E-03 \
2.50000E+01\nIT 3.80000E-01 1.20000E-01 2.50000E+01\nIT 3.90000E-01 \
3.90000E-01 2.50000E+01\nIT 4.00000E-01 6.00000E-01 2.50000E+01\nIT \
4.05000E-01 6.70000E-01 2.50000E+01\nIT 4.20000E-01 8.10000E-01 2.50000E+01\n\
IT 4.36000E-01 8.70000E-01 2.50000E+01\nIT 4.60000E-01 9.20000E-01 \
2.50000E+01\nIT 5.00000E-01 9.53000E-01 2.50000E+01\nIT 5.46000E-01 \
9.78000E-01 2.50000E+01\nIT 5.80000E-01 9.84000E-01 2.50000E+01\nIT \
6.20000E-01 9.81000E-01 2.50000E+01\nIT 6.60000E-01 9.81000E-01 2.50000E+01\n\
IT 7.00000E-01 9.85000E-01 2.50000E+01\nIT 1.06000E+00 9.98000E-01 \
2.50000E+01\nIT 1.53000E+00 9.85000E-01 2.50000E+01\nIT 1.97000E+00 \
9.15000E-01 2.50000E+01\nIT 2.32500E+00 7.00000E-01 2.50000E+01\nIT \
2.50000E+00 6.20000E-01 2.50000E+01\nNM N-SF5 2 673323.286 1.67271 32.25 0 1\n\
GC step 0.5 available\nED 7.940000 9.210000 2.858000 0.008800 0\nCD \
1.524818890E+00 1.125475600E-02 1.870855270E-01 5.889953920E-02 \
1.427290150E+00 1.291416750E+02 0.000000000E+00 0.000000000E+00\n\
TD-2.510000E-07 1.070000E-08-2.400000E-11 7.850000E-07 1.150000E-09 \
2.780000E-01 2.000000E+01\nOD 3.5000 1.0000 0.0000 1.0000 1.0000 1.0000\nLD \
3.70000E-01 2.50000E+00\nIT 3.70000E-01 4.00000E-02 2.50000E+01\nIT \
3.80000E-01 3.30000E-01 2.50000E+01\nIT 3.90000E-01 6.20000E-01 2.50000E+01\n\
IT 4.00000E-01 7.80000E-01 2.50000E+01\nIT 4.05000E-01 8.30000E-01 \
2.50000E+01\nIT 4.20000E-01 9.10000E-01 2.50000E+01\nIT 4.36000E-01 \
9.35000E-01 2.50000E+01\nIT 4.60000E-01 9.56000E-01 2.50000E+01\nIT \
5.00000E-01 9.76000E-01 2.50000E+01\nIT 5.46000E-01 9.88000E-01 2.50000E+01\n\
IT 5.80000E-01 9.91000E-01 2.50000E+01\nIT 6.20000E-01 9.88000E-01 \
2.50000E+01\nIT 6.60000E-01 9.87000E-01 2.50000E+01\nIT 7.00000E-01 \
9.89000E-01 2.50000E+01\nIT 1.06000E+00 9.94000E-01 2.50000E+01\nIT \
1.53000E+00 9.75000E-01 2.50000E+01\nIT 1.97000E+00 8.80000E-01 2.50000E+01\n\
IT 2.32500E+00 6.30000E-01 2.50000E+01\nIT 2.50000E+00 5.00000E-01 \
2.50000E+01\nNM N-SF10 2 728285.305 1.72828 28.53 0 1\nGC\nED 9.400000 \
10.800000 3.050000 0.010800 0\nCD 1.621539020E+00 1.222414570E-02 \
2.562878420E-01 5.957367750E-02 1.644475520E+00 1.474687930E+02 \
0.000000000E+00 0.000000000E+00\nTD-4.680000E-06 7.410000E-09-1.890000E-11 \
9.490000E-07 1.420000E-09 2.790000E-01 2.000000E+01\nOD 4.0000 1.0000 0.0000 \
1.0000 1.0000 1.0000\nLD 3.80000E-01 2.50000E+00\nIT 3.80000E-01 2.00000E-01 \
2.50000E+01\nIT 3.90000E-01 4.50000E-01 2.50000E+01\nIT 4.00000E-01 \
6.40000E-01 2.50000E+01\nIT 4.05000E-01 7.00000E-01 2.50000E+01\nIT \
4.20000E-01 8.20000E-01 2.50000E+01\nIT 4.36000E-01 8.70000E-01 2.50000E+01\n\
IT 4.60000E-01 9.10000E-01 2.50000E+01\nIT 5.00000E-01 9.45000E-01 \
2.50000E+01\nIT 5.46000E-01 9.73000E-01 2.50000E+01\nIT 5.80000E-01 \
9.78000E-01 2.50000E+01\nIT 6.20000E-01 9.77000E-01 2.50000E+01\nIT \
6.60000E-01 9.76000E-01 2.50000E+01\nIT 7.00000E-01 9.83000E-01 2.50000E+01\n\
IT 1.06000E+00 9.90000E-01 2.50000E+01\nIT 1.53000E+00 9.85000E-01 \
2.50000E+01\nIT 1.97000E+00 9.30000E-01 2.50000E+01\nIT 2.32500E+00 \
7.60000E-01 2.50000E+01\nIT 2.50000E+00 6.60000E-01 2.50000E+01\nNM N-BAK4 2 \
569560.305 1.56883 55.98 0 1\nGC\nED 6.990000 7.930000 3.046000-0.001000 0\n\
CD 1.288346420E+00 7.799806260E-03 1.328177240E-01 3.156311770E-02 \
9.453953730E-01 1.059658750E+02 0.000000000E+00 0.000000000E+00\nTD \
3.060000E-06 1.440000E-08-2.230000E-11 5.460000E-07 6.050000E-10 1.890000E-01 \
2.000000E+01\nOD 1.5000 1.0000 0.0000 1.2000 1.0000 1.0000\nLD 3.34000E-01 \
2.50000E+00\nIT 3.34000E-01 7.00000E-02 2.50000E+01\nIT 3.50000E-01 \
5.50000E-01 2.50000E+01\nIT 3.65000E-01 8.40000E-01 2.50000E+01\nIT \
3.70000E-01 8.90000E-01 2.50000E+01\nIT 3.80000E-01 9.40000E-01 2.50000E+01\n\
IT 3.90000E-01 9.67000E-01 2.50000E+01\nIT 4.00000E-01 9.80000E-01 \
2.50000E+01\nIT 4.05000E-01 9.83000E-01 2.50000E+01\nIT 4.20000E-01 \
9.87000E-01 2.50000E+01\nIT 4.36000E-01 9.88000E-01 2.50000E+01\nIT \
4.60000E-01 9.89000E-01 2.50000E+01\nIT 5.00000E-01 9.94000E-01 2.50000E+01\n\
IT 5.46000E-01 9.96000E-01 2.50000E+01\nIT 5.80000E-01 9.96000E-01 \
2.50000E+01\nIT 6.20000E-01 9.95000E-01 2.50000E+01\nIT 6.60000E-01 \
9.95000E-01 2.50000E+01\nIT 7.00000E-01 9.97000E-01 2.50000E+01\nIT \
1.06000E+00 9.95000E-01 2.50000E+01\nIT 1.53000E+00 9.82000E-01 2.50000E+01\n\
IT 1.97000E+00 9.00000E-01 2.50000E+01\nIT 2.32500E+00 7.10000E-01 \
2.50000E+01\nIT 2.50000E+00 5.40000E-01 2.50000E+01\nNM BAFN10 2 670471 \
1.670031 47.108735 0 2 0\nGC\nED 6.800000000E+000 7.900000000E+000 \
3.760000000E+000-1.000000000E-004 0 0\nCD 1.604772890E+000 9.470216170E-003 \
1.237624680E-001 4.516397920E-002 1.072705200E+000 1.085394270E+002 \
0.000000000E+000 0.000000000E+000 0.000000000E+000 0.000000000E+000\nTD \
2.570000000E-006 9.790000000E-009-4.070000000E-011 5.540000000E-007 \
6.690000000E-010 2.480000000E-001 2.000000000E+001\nOD 3.03000 2.00000 \
3.00000 52.30000 1.20000 2.00000\nLD 3.34000000E-001 2.32500000E+000\nIT \
3.34000E-001 0.00000E+000 2.50000E+001\nIT 3.50000E-001 0.00000E+000 \
2.50000E+001\nIT 3.65000E-001 2.50000E-001 2.50000E+001\nIT 3.70000E-001 \
4.00000E-001 2.50000E+001\nIT 3.80000E-001 6.30000E-001 2.50000E+001\nIT \
3.90000E-001 7.70000E-001 2.50000E+001\nIT 4.00000E-001 8.40000E-001 \
2.50000E+001\nIT 4.20000E-001 9.10000E-001 2.50000E+001\nIT 4.60000E-001 \
9.50000E-001 2.50000E+001\nIT 5.00000E-001 9.65000E-001 2.50000E+001\nIT \
6.60000E-001 9.92000E-001 2.50000E+001\nIT 1.06000E+000 9.95000E-001 \
2.50000E+001\nIT 1.52900E+000 9.85000E-001 2.50000E+001\nIT 1.97010E+000 \
9.10000E-001 2.50000E+001\nIT 2.32500E+000 7.00000E-001 2.50000E+001\nNM \
N-SF5 2 673323.286 1.67271 32.25 0 1\nGC step 0.5 available\nED 7.940000 \
9.210000 2.858000 0.008800 0\nCD 1.524818890E+00 1.125475600E-02 \
1.870855270E-01 5.889953920E-02 1.427290150E+00 1.291416750E+02 \
0.000000000E+00 0.000000000E+00\nTD-2.510000E-07 1.070000E-08-2.400000E-11 \
7.850000E-07 1.150000E-09 2.780000E-01 2.000000E+01\nOD 3.5000 1.0000 0.0000 \
1.0000 1.0000 1.0000\nLD 3.70000E-01 2.50000E+00\nIT 3.70000E-01 4.00000E-02 \
2.50000E+01\nIT 3.80000E-01 3.30000E-01 2.50000E+01\nIT 3.90000E-01 \
6.20000E-01 2.50000E+01\nIT 4.00000E-01 7.80000E-01 2.50000E+01\nIT \
4.05000E-01 8.30000E-01 2.50000E+01\nIT 4.20000E-01 9.10000E-01 2.50000E+01\n\
IT 4.36000E-01 9.35000E-01 2.50000E+01\nIT 4.60000E-01 9.56000E-01 \
2.50000E+01\nIT 5.00000E-01 9.76000E-01 2.50000E+01\nIT 5.46000E-01 \
9.88000E-01 2.50000E+01\nIT 5.80000E-01 9.91000E-01 2.50000E+01\nIT \
6.20000E-01 9.88000E-01 2.50000E+01\nIT 6.60000E-01 9.87000E-01 2.50000E+01\n\
IT 7.00000E-01 9.89000E-01 2.50000E+01\nIT 1.06000E+00 9.94000E-01 \
2.50000E+01\nIT 1.53000E+00 9.75000E-01 2.50000E+01\nIT 1.97000E+00 \
8.80000E-01 2.50000E+01\nIT 2.32500E+00 6.30000E-01 2.50000E+01\nIT \
2.50000E+00 5.00000E-01 2.50000E+01\n\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"createMediumsFromAGFString", "[", 
   RowBox[{
    RowBox[{"StringSplit", "[", 
     RowBox[{"SCHOTTOExtracted", ",", "\"\<\\n\>\""}], "]"}], ",", 
    "\"\<SCHOTTOExtracted\>\""}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"glassNames", "=", 
    RowBox[{"mediumCatalog", "[", "\"\<SCHOTTOExtracted\>\"", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"showCoefficients", "[", "result_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"fit1", ",", "fit2"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"fit1", "=", 
      RowBox[{"fitAsphericalFormula", "[", 
       RowBox[{
        RowBox[{"frontSurfaceShapeFunction", "/.", "result"}], ",", 
        RowBox[{"frontSurfaceCurvature", "/.", "result"}], ",", "10", ",", 
        RowBox[{"conicSuggestion", "\[Rule]", 
         RowBox[{"-", "1."}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"fit1", "\[Equal]", "$Failed"}], ",", 
       RowBox[{
        RowBox[{
        "MessageDialog", "[", "\"\<Sorry fitting procedure failed.\>\"", 
         "]"}], ";", 
        RowBox[{"Return", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"fit2", "=", 
      RowBox[{"fitAsphericalFormula", "[", 
       RowBox[{
        RowBox[{"backSurfaceShapeFunction", "/.", "result"}], ",", 
        RowBox[{"backSurfaceCurvature", "/.", "result"}], ",", "10", ",", 
        RowBox[{"conicSuggestion", "\[Rule]", "1."}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"fit2", "\[Equal]", "$Failed"}], ",", 
       RowBox[{
        RowBox[{
        "MessageDialog", "[", "\"\<Sorry fitting procedure failed.\>\"", 
         "]"}], ";", 
        RowBox[{"Return", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"MessageDialog", "[", 
      RowBox[{"Grid", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<Surface 1\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], 
           "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<curvature\>\"", ",", 
            RowBox[{"curvature", "/.", "fit1"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<conic\>\"", ",", 
            RowBox[{"conicConstant", "/.", "fit1"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<4th\>\"", ",", 
            RowBox[{
             RowBox[{"powerSeriesCoefficients", "[", "4", "]"}], "/.", 
             "fit1"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<6th\>\"", ",", 
            RowBox[{
             RowBox[{"powerSeriesCoefficients", "[", "6", "]"}], "/.", 
             "fit1"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<8th\>\"", ",", 
            RowBox[{
             RowBox[{"powerSeriesCoefficients", "[", "8", "]"}], "/.", 
             "fit1"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<10th\>\"", ",", 
            RowBox[{
             RowBox[{"powerSeriesCoefficients", "[", "10", "]"}], "/.", 
             "fit1"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<Surface 2\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], 
           "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<curvature\>\"", ",", 
            RowBox[{"curvature", "/.", "fit2"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<conic\>\"", ",", 
            RowBox[{"conicConstant", "/.", "fit2"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<4th\>\"", ",", 
            RowBox[{
             RowBox[{"powerSeriesCoefficients", "[", "4", "]"}], "/.", 
             "fit2"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<6th\>\"", ",", 
            RowBox[{
             RowBox[{"powerSeriesCoefficients", "[", "6", "]"}], "/.", 
             "fit2"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<8th\>\"", ",", 
            RowBox[{
             RowBox[{"powerSeriesCoefficients", "[", "8", "]"}], "/.", 
             "fit2"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<10th\>\"", ",", 
            RowBox[{
             RowBox[{"powerSeriesCoefficients", "[", "10", "]"}], "/.", 
             "fit2"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"Alignment", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"Right", ",", "Baseline"}], "}"}]}]}], "]"}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8232270727232523`*^9, 3.823227077052208*^9}, 
   3.823227188113337*^9, {3.823318319587069*^9, 3.823318355300807*^9}, {
   3.8233188547453623`*^9, 3.823318905280279*^9}, {3.823318941271401*^9, 
   3.823319040426442*^9}, {3.823319233365552*^9, 3.8233192812792807`*^9}, {
   3.823319407187911*^9, 3.8233196457836103`*^9}, {3.823319741784446*^9, 
   3.8233197771365547`*^9}, {3.8233198199184732`*^9, 3.823319823159459*^9}, 
   3.823320027387107*^9, {3.823320144037698*^9, 3.8233201781917133`*^9}, {
   3.823320216794468*^9, 3.823320218354973*^9}, 3.8233202584097233`*^9, 
   3.823320322226102*^9, {3.823320370350855*^9, 3.823320450730261*^9}, {
   3.823320495767273*^9, 3.823320510360133*^9}, {3.823320543830731*^9, 
   3.823320546298216*^9}, 3.824777316983597*^9},
 CellLabel->"In[1]:=",
 CellID->2066746197,ExpressionUUID->"1d643925-280d-4678-bc58-4ccd4eb56561"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Manipulate",
 Cell[BoxData[
  TemplateBox[{"Manipulate", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
        TextData[{"This section contains the ", 
          StyleBox["Manipulate", "MRbig"], 
          " input cell and its evaluated output cell. Make all control labels \
or labels in the output as descriptive as possible, with only proper nouns \
and proper adjectives capitalized. More description of the controls can be \
provided in the Details section below, if necessary. If you change this ", 
          StyleBox["Manipulate", "MRbig"], 
          " after creating screenshots and/or thumbnails, use ", 
          StyleBox["Update Thumbnail & Snapshots", FontWeight -> "Bold"], 
          " in the toolbar to update any copies in later sections. You can \
control the Flash preview for the Demonstration with the ", 
          StyleBox["AutorunSequencing", "MRbig"], " option. Use ", 
          StyleBox["SaveDefinitions->True", "MRbig"], 
          " if you provided initialization code in the previous section."}], 
        "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
       FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5]], "MoreInfoText", 
     Deletable -> True, CellTags -> {"SectionMoreInfoDefinition"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "d12d57a6-93e6-4518-8a9c-9df2eb688354"]
}], "ManipulateSection",
 CellTags->
  "Manipulate",ExpressionUUID->"b7acceb9-ca4b-4965-b319-bd8a6214a587"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"result", "=", 
     RowBox[{"Quiet", "[", 
      RowBox[{"biasphericAplanatSolve", "[", 
       RowBox[{"setupBiasphericAplanatParameters", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"designWavelength", "\[Rule]", 
           RowBox[{"wl", "*", "0.000001"}]}], ",", 
          RowBox[{"numericalApertureTarget", "\[Rule]", "nat"}], ",", 
          RowBox[{"lensMediumSymbol", "\[Rule]", 
           RowBox[{"mediumCatalog", "[", "g", "]"}]}], ",", 
          RowBox[{"lensMediumThickness", "\[Rule]", "thk"}], ",", 
          RowBox[{"coddingtonShapeFactor", "\[Rule]", "cod"}], ",", 
          RowBox[{"focalLength", "\[Rule]", "1."}]}], "}"}], "]"}], "]"}], 
      "]"}]}], ";", 
    RowBox[{"setOpticsFor2DRayTrace", "[", 
     RowBox[{"op", ",", "result"}], "]"}], ";", "\n", 
    RowBox[{"rs", "=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"traceRay", "[", "op", "]"}], "[", 
         RowBox[{"#", ",", 
          RowBox[{"designWavelength", "/.", "result"}]}], "]"}], "&"}], ",", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"raySet", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"h", ",", 
             RowBox[{"-", "0.3"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "]"}], ",", 
         RowBox[{"Evaluate", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"h", ",", 
             RowBox[{
              RowBox[{"-", "numericalAperture"}], "*", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"Round", "[", "nrays", "]"}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Round", "[", "nrays", "]"}], "+", "0.5"}], 
                ")"}]}]}], ",", "numericalAperture", ",", 
             RowBox[{"numericalAperture", "/", 
              RowBox[{"Round", "[", "nrays", "]"}]}]}], "}"}], "/.", 
           "result"}], "]"}]}], "]"}]}], "]"}]}], ";", "\n", 
    RowBox[{"Show", "[", 
     RowBox[{
      RowBox[{"Quiet", "[", 
       RowBox[{"rayCongruenceGraphics", "[", 
        RowBox[{"rs", ",", 
         RowBox[{"removeLast", "\[Rule]", "True"}], ",", 
         RowBox[{"rayCount", "\[Rule]", 
          RowBox[{"Round", "[", "nrays", "]"}]}]}], "]"}], "]"}], ",", 
      RowBox[{"opticsGraphics", "[", 
       RowBox[{"op", ",", 
        RowBox[{"hideUselessSurface", "\[Rule]", "True"}]}], "]"}], ",", 
      RowBox[{"Graphics", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Red", ",", 
           RowBox[{"PointSize", "[", "Large", "]"}], ",", 
           RowBox[{"Point", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"thk", "+", "paraxialWorkingDistance"}], "/.", 
               "result"}], ",", "0.0"}], "}"}], "]"}]}], "}"}], ",", 
         RowBox[{"Text", "[", 
          RowBox[{
           RowBox[{"\"\<N.A.= \>\"", "<>", 
            RowBox[{"ToString", "[", 
             RowBox[{"numericalAperture", "/.", "result"}], "]"}], "<>", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"numericalApertureTarget", ">", "numericalAperture"}], 
               "/.", "result"}], ",", "\"\<\\nis maximum\>\"", ",", 
              "\"\<\>\""}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"thk", "+", "0.1"}], ",", 
             RowBox[{
              RowBox[{"numericalAperture", "-", "0.05"}], "/.", "result"}]}], 
            "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "]"}], ",", 
         RowBox[{"Text", "[", 
          RowBox[{
           RowBox[{"\"\<Thickness= \>\"", "<>", 
            RowBox[{"ToString", "[", "thk", "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"thk", "*", "0.5"}], ",", 
             RowBox[{
              RowBox[{"numericalAperture", "+", "0.05"}], "/.", "result"}]}], 
            "}"}]}], "]"}], ",", 
         RowBox[{"Text", "[", 
          RowBox[{
           RowBox[{"\"\< R1= \>\"", "<>", 
            RowBox[{"ToString", "[", 
             RowBox[{
              RowBox[{"NumberForm", "[", 
               RowBox[{
                RowBox[{"1", "/", "frontSurfaceCurvature"}], ",", "3"}], 
               "]"}], "/.", "result"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"0.0", ",", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "numericalAperture"}], "-", "0.05"}], "/.", 
              "result"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "]"}], ",", 
         RowBox[{"Text", "[", 
          RowBox[{
           RowBox[{"\"\< R2= \>\"", "<>", 
            RowBox[{"ToString", "[", 
             RowBox[{
              RowBox[{"NumberForm", "[", 
               RowBox[{
                RowBox[{"1", "/", "backSurfaceCurvature"}], ",", "3"}], "]"}],
               "/.", "result"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"thk", ",", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "numericalAperture"}], "+", "0.05"}], "/.", 
              "result"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "]"}], ",", 
         RowBox[{"Text", "[", 
          RowBox[{
           RowBox[{"\"\<W.D.= \>\"", "<>", 
            RowBox[{"ToString", "[", 
             RowBox[{
              RowBox[{"NumberForm", "[", 
               RowBox[{"paraxialWorkingDistance", ",", "3"}], "]"}], "/.", 
              "result"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"thk", "+", 
               RowBox[{"0.5", "paraxialWorkingDistance"}]}], "/.", "result"}],
              ",", 
             RowBox[{
              RowBox[{"0.5", "numericalAperture"}], "/.", "result"}]}], "}"}],
            ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "]"}]}], "}"}], "]"}], 
      ",", 
      RowBox[{"Axes", "\[Rule]", "True"}], ",", 
      RowBox[{"PlotRange", "\[Rule]", 
       RowBox[{"Evaluate", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "1"}], "/", "5"}], ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                 "lensMediumThickness", "+", "paraxialWorkingDistance"}], "/.",
                  "result"}], ")"}], ">", "1.5"}], ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                 "lensMediumThickness", "+", "paraxialWorkingDistance"}], "/.",
                  "result"}], ")"}], "+", "0.2"}], ",", "1.5"}], "]"}]}], 
           "}"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"numericalAperture", "/.", "result"}], ")"}], ">", 
             "0.4"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"-", 
                RowBox[{"(", 
                 RowBox[{"numericalAperture", "/.", "result"}], ")"}]}], "-", 
               "0.1"}], ",", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"numericalAperture", "/.", "result"}], ")"}], "+", 
               "0.1"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.5"}], ",", "0.5"}], "}"}]}], "]"}]}], "}"}], 
        "]"}]}]}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"nat", ",", "0.3", ",", "\"\<Target N.A.\>\""}], "}"}], ",", 
     "0.1", ",", "0.99"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"thk", ",", "0.3", ",", "\"\<Thickness\>\""}], "}"}], ",", 
     "0.1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cod", ",", "0.3", ",", "\"\<CSF\>\""}], "}"}], ",", 
     RowBox[{"-", "0.95"}], ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"nrays", ",", "9", ",", "\"\<Number of rays\>\""}], "}"}], ",", 
     "3", ",", "61"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"wl", ",", "532.", ",", "\"\<Wavelength\>\""}], "}"}], ",", 
     "405.", ",", "800."}], "}"}], ",", 
   RowBox[{"Evaluate", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"g", ",", "\"\<N-BK7\>\"", ",", "\"\<Glass name\>\""}], "}"}], 
      ",", "glassNames"}], "}"}], "]"}], ",", 
   RowBox[{"Control", "[", 
    RowBox[{"Button", "[", 
     RowBox[{"\"\<Fit aspherical coefficients\>\"", ",", 
      RowBox[{"showCoefficients", "[", "result", "]"}]}], "]"}], "]"}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.823209414675003*^9, 3.823209463799326*^9}, {
   3.823209508425426*^9, 3.8232095704905*^9}, {3.82320993952934*^9, 
   3.823209941556628*^9}, {3.8232099829013977`*^9, 3.82320999796354*^9}, {
   3.823222308287119*^9, 3.823222494631558*^9}, {3.8232225252257757`*^9, 
   3.823222554476877*^9}, {3.823225272338587*^9, 3.8232253536983013`*^9}, {
   3.8232254087011538`*^9, 3.823225435979005*^9}, {3.823225608052017*^9, 
   3.823225635261615*^9}, {3.823225952643238*^9, 3.82322595813864*^9}, {
   3.8232260444540462`*^9, 3.823226136796235*^9}, {3.823227196770248*^9, 
   3.82322722801785*^9}, {3.823227302021492*^9, 3.823227539676564*^9}, {
   3.823227576052247*^9, 3.82322767342848*^9}, {3.8232279436618633`*^9, 
   3.823227950774869*^9}, {3.8232281408092003`*^9, 3.823228155339582*^9}, {
   3.823228194277306*^9, 3.823228196433977*^9}, {3.823228414232066*^9, 
   3.823228415099409*^9}, {3.823228448718637*^9, 3.823228456812042*^9}, {
   3.823228518718573*^9, 3.823228522592683*^9}, {3.8232286449110928`*^9, 
   3.823228651876622*^9}, {3.823228866035836*^9, 3.823228908271008*^9}, {
   3.8232289383173656`*^9, 3.823228939157845*^9}, {3.8232291091858253`*^9, 
   3.823229128761338*^9}, {3.8232291806149807`*^9, 3.823229181568492*^9}, {
   3.823229339658753*^9, 3.823229344709806*^9}, {3.823229570356153*^9, 
   3.823229571040744*^9}, {3.823229622486946*^9, 3.823229678995186*^9}, {
   3.8232297205084343`*^9, 3.823229732322714*^9}, {3.823230273159374*^9, 
   3.823230279342457*^9}, {3.823230362870726*^9, 3.8232304626756687`*^9}, {
   3.8232304942076693`*^9, 3.823230495209332*^9}, {3.8232305283804502`*^9, 
   3.82323054073906*^9}, {3.823230598247726*^9, 3.823230653145977*^9}, {
   3.823230694209284*^9, 3.8232307327395363`*^9}, {3.823230778973447*^9, 
   3.823230781777569*^9}, {3.8232308464989853`*^9, 3.823230850551559*^9}, {
   3.823230886809678*^9, 3.823231019865342*^9}, {3.8232311357097397`*^9, 
   3.823231142981234*^9}, {3.8232311990530357`*^9, 3.823231262874979*^9}, {
   3.823231346742024*^9, 3.8232313984967747`*^9}, 3.823285596596105*^9, {
   3.823285627854672*^9, 3.82328567554889*^9}, 3.823285854213472*^9, {
   3.823286597142124*^9, 3.823286750516581*^9}, {3.823287234275078*^9, 
   3.8232872976629667`*^9}, 3.823288531888136*^9, {3.823289575233028*^9, 
   3.823289602583253*^9}, {3.8232896996898403`*^9, 3.823289758420195*^9}, {
   3.823289789045239*^9, 3.823289789303738*^9}, {3.823289839862656*^9, 
   3.823289841133226*^9}, {3.823289908567259*^9, 3.8232899148986607`*^9}, {
   3.8232900728392487`*^9, 3.8232901202145853`*^9}, {3.8232902095330753`*^9, 
   3.8232902991527433`*^9}, {3.8232903294856033`*^9, 3.823290425279072*^9}, {
   3.823290490231738*^9, 3.823290491904303*^9}, {3.8232905219135303`*^9, 
   3.823290576123316*^9}, {3.823290622435616*^9, 3.823290627025404*^9}, {
   3.823291305558112*^9, 3.823291326699856*^9}, {3.82329138437068*^9, 
   3.8232914055257063`*^9}, {3.823313017942073*^9, 3.8233130823076353`*^9}, {
   3.823318753589858*^9, 3.823318764812604*^9}, {3.82331880346017*^9, 
   3.823318824299745*^9}, {3.823319304100802*^9, 3.823319309685811*^9}, 
   3.8233197817106457`*^9, {3.823320291632431*^9, 3.823320292016986*^9}, {
   3.823320611494605*^9, 3.8233206119617443`*^9}, {3.8247773950213537`*^9, 
   3.8247773954794493`*^9}},
 CellLabel->
  "In[365]:=",ExpressionUUID->"1c8a51fe-61b3-446f-b3f3-b27c622b6763"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`cod$$ = 0.3, $CellContext`g$$ = 
    "N-BK7", $CellContext`nat$$ = 0.3, $CellContext`nrays$$ = 
    9, $CellContext`thk$$ = 0.3, $CellContext`wl$$ = 532., Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"\:540d\:79f0\:672a\:5b9a\:7fa9\"", Typeset`specs$$ = {{{
       Hold[$CellContext`nat$$], 0.3, "Target N.A."}, 0.1, 0.99}, {{
       Hold[$CellContext`thk$$], 0.3, "Thickness"}, 0.1, 2}, {{
       Hold[$CellContext`cod$$], 0.3, "CSF"}, -0.95, 3}, {{
       Hold[$CellContext`nrays$$], 9, "Number of rays"}, 3, 61}, {{
       Hold[$CellContext`wl$$], 532., "Wavelength"}, 405., 800.}, {{
       Hold[$CellContext`g$$], "N-BK7", "Glass name"}, {
      "N-BK7", "N-K5", "N-SK2", "N-SF15", "N-LASF9", "N-SF11", "N-SF5", 
       "N-SF10", "N-BAK4", "BAFN10", "N-SF5"}}, {
      Hold[
       Button["Fit aspherical coefficients", 
        $CellContext`showCoefficients[$CellContext`result]]], 
      Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
    360., {102., 107.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`cod$$ = 0.3, $CellContext`g$$ = 
        "N-BK7", $CellContext`nat$$ = 0.3, $CellContext`nrays$$ = 
        9, $CellContext`thk$$ = 0.3, $CellContext`wl$$ = 532.}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ($CellContext`result = Quiet[
          $CellContext`biasphericAplanatSolve[
           $CellContext`setupBiasphericAplanatParameters[{$CellContext`\
designWavelength -> $CellContext`wl$$ 
              
              1.*^-6, $CellContext`numericalApertureTarget -> \
$CellContext`nat$$, $CellContext`lensMediumSymbol -> \
$CellContext`mediumCatalog[$CellContext`g$$], \
$CellContext`lensMediumThickness -> $CellContext`thk$$, \
$CellContext`coddingtonShapeFactor -> $CellContext`cod$$, \
$CellContext`focalLength -> 
             1.}]]]; $CellContext`setOpticsFor2DRayTrace[$CellContext`op, \
$CellContext`result]; $CellContext`rs = 
        Map[$CellContext`traceRay[$CellContext`op][#, 
           ReplaceAll[$CellContext`designWavelength, $CellContext`result]]& , 
          
          Table[
           $CellContext`raySet[{$CellContext`h, -0.3}, {0, 1}], 
           Evaluate[
            
            ReplaceAll[{$CellContext`h, (-$CellContext`numericalAperture) (
               Round[$CellContext`nrays$$]/(Round[$CellContext`nrays$$] + 
               0.5)), $CellContext`numericalAperture, \
$CellContext`numericalAperture/
              Round[$CellContext`nrays$$]}, $CellContext`result]]]]; Show[
         Quiet[
          $CellContext`rayCongruenceGraphics[$CellContext`rs, \
$CellContext`removeLast -> True, $CellContext`rayCount -> 
           Round[$CellContext`nrays$$]]], 
         $CellContext`opticsGraphics[$CellContext`op, \
$CellContext`hideUselessSurface -> True], 
         Graphics[{{Red, 
            PointSize[Large], 
            Point[{
              
              ReplaceAll[$CellContext`thk$$ + \
$CellContext`paraxialWorkingDistance, $CellContext`result], 0.}]}, 
           Text["N.A.= " <> ToString[
              
              ReplaceAll[$CellContext`numericalAperture, \
$CellContext`result]] <> If[
              
              ReplaceAll[$CellContext`numericalApertureTarget > \
$CellContext`numericalAperture, $CellContext`result], "\nis maximum", 
              ""], {$CellContext`thk$$ + 0.1, 
             
             ReplaceAll[$CellContext`numericalAperture - 
              0.05, $CellContext`result]}, {-1, 0}], 
           Text[
           "Thickness= " <> 
            ToString[$CellContext`thk$$], {$CellContext`thk$$ 0.5, 
             
             ReplaceAll[$CellContext`numericalAperture + 
              0.05, $CellContext`result]}], 
           Text[" R1= " <> ToString[
              ReplaceAll[
               NumberForm[
               1/$CellContext`frontSurfaceCurvature, 
                3], $CellContext`result]], {0., 
             
             ReplaceAll[-$CellContext`numericalAperture - 
              0.05, $CellContext`result]}, {-1, 0}], 
           Text[" R2= " <> ToString[
              ReplaceAll[
               NumberForm[
               1/$CellContext`backSurfaceCurvature, 
                3], $CellContext`result]], {$CellContext`thk$$, 
             
             ReplaceAll[-$CellContext`numericalAperture + 
              0.05, $CellContext`result]}, {-1, 0}], 
           Text["W.D.= " <> ToString[
              ReplaceAll[
               
               NumberForm[$CellContext`paraxialWorkingDistance, 
                3], $CellContext`result]], {
             
             ReplaceAll[$CellContext`thk$$ + 
              0.5 $CellContext`paraxialWorkingDistance, $CellContext`result], 
             
             ReplaceAll[
             0.5 $CellContext`numericalAperture, $CellContext`result]}, {-1, 
            0}]}], Axes -> True, PlotRange -> Evaluate[{{(-1)/5, 
             If[
             ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`paraxialWorkingDistance, $CellContext`result] > 1.5, 
              ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`paraxialWorkingDistance, $CellContext`result] + 0.2, 1.5]}, 
            If[
            ReplaceAll[$CellContext`numericalAperture, $CellContext`result] > 
             0.4, {-ReplaceAll[$CellContext`numericalAperture, \
$CellContext`result] - 0.1, 
              ReplaceAll[$CellContext`numericalAperture, $CellContext`result] + 
              0.1}, {-0.5, 0.5}]}]]), 
      "Specifications" :> {{{$CellContext`nat$$, 0.3, "Target N.A."}, 0.1, 
         0.99}, {{$CellContext`thk$$, 0.3, "Thickness"}, 0.1, 
         2}, {{$CellContext`cod$$, 0.3, "CSF"}, -0.95, 
         3}, {{$CellContext`nrays$$, 9, "Number of rays"}, 3, 
         61}, {{$CellContext`wl$$, 532., "Wavelength"}, 405., 
         800.}, {{$CellContext`g$$, "N-BK7", "Glass name"}, {
         "N-BK7", "N-K5", "N-SK2", "N-SF15", "N-LASF9", "N-SF11", "N-SF5", 
          "N-SF10", "N-BAK4", "BAFN10", "N-SF5"}}, 
        Button["Fit aspherical coefficients", 
         $CellContext`showCoefficients[$CellContext`result]]}, 
      "Options" :> {}, "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{403., {231., 237.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`result = \
{$CellContext`frontSurfaceShapeFunction -> 
         InterpolatingFunction[{{-0.663, 0.663}}, {
           5, 7, 0, {71}, {4}, 0, 0, 0, 0, Automatic, {}, {}, 
            False}, CompressedData["
1:eJwtkl9IE1AUxjcF14Ogg5khiOxBsIXakiYk+UGtFO3BxJeQHloNUVChQBSc
hH9m+FAImeKfYYkk5j/ETAn7GIEkCNNmjCETtUmYpKBkJD7ow3fhcLnce885
3+87VldtqTvGYDAYz6PgPHwH7xeLc3fY3HChIRiO0h1beaW8MUpLXdffJWOU
vvTsq4nVP1ly92ZR6tg2YyqKn9j2tjjT/qAp17ZF90hFj7Nyk+ORRmP/8QZf
Vdm+T6RE+PRf6J0/f51lrW3P1lxhOsw5zl/eEC/5Ni0noz94Ynu5Ex8IMvIp
bzbtaJV07nqvJa/w1lDmZEfdMk0LL0qmvnzjWNZFljkWeX9wKPP/+Fcem+39
A+l+OkyepNYbC3z+u/tw+fIcmxnojHd9ZNtrk/1e7zQTgk2DycOTtHj2N94k
jbLwzx37yOdheh4OtMw/esvHfbsfuhJ6GWeqP72d08Ga1esFGSGrdjMNWjpD
99B76D+UD8oP1YPqQ/1A/UH9Qv1DeiB9kF5IP8QD4gPxgvhBPCG+EG+IP+QH
5A/kF+Qf5CfkL+Q35D80D9B8QPOCM6UKHQk=
           "], {
           Developer`PackedArrayForm, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 
            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 
            28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 
            44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
            60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71}, CompressedData["
1:eJxTTMoPSmVkYGBwB+Kzzz1O1jPfsZ9jPN/8wPVb9v7yXELe227aG0ZcW7/Y
84b9edWdrBuXXLO/J/AnpmjxFfuwuTP6Fxy5ZC959lnwKtaL9oETj29fdeKc
/fEf/R8N+E/b7/xY7H988XH7n8w1uzQbj9hXP7b+fnfRQXv24ov/lbj22Rsc
rbj+x2OnfV3ikoOr/2yx/9OcvT1WYaP9tts76x7Gr7ZPeVtUudN/qX3ValtT
J64F9izP+Br+nZhpvy/ITFLSaIq9cU7KxEez+uyNPrYLfzRss9d01L21y7vO
/pBEgeS2reX2R/20/oS8L7QPXWDievR9pv3+7bWJfXMT7ed8sVycUhxhb2cs
+JzTzd/eQu7M/zWTHO1vOew0SDqkaL8oMKf7xaYIu8uO+9e7ljvYMUABjA+T
h6mH6YeZBzMfZh/Mfph7YO6DuRfmfph/YP6D+Rfmf1h4wMIHFl6w8IOFJyx8
YeENC39YfMDiBxZfsPiDxScsfmHxDYt/WHqApQ9YegEAj3IXFQ==
            "]}, {
           Automatic}], $CellContext`backSurfaceShapeFunction -> 
         InterpolatingFunction[{{-0.5179195719707187, 0.5179195719707187}}, {
           5, 7, 0, {71}, {4}, 0, 0, 0, 0, Automatic, {}, {}, 
            False}, CompressedData["
1:eJwtkl1I02EYxf8zUbFRgbC8MMILIYLC1CRIOghBUMhIUllkRqAXgkpN8QO7
CckagpVagRM/Np10UVui4ApOSDjNiThsE5kfiIQUBQ0yVEy9OC88Fy/vx3PO
7zzp92sKy+MMwzAd1rXDKiuMnQi+XGOq0fP6rnmN4W7fbIVllZdq7zVeDS0z
u6G8Kqs0yidd6wWuV0tMmHEM2X4tMhhKKh4tjdC/v5s3vPGNp9OqG36eX+DW
B8twfUeIWTuDvfPH5vnHa/2fkDfHyuXJnPhHQc7UR0wXotOMjTj+vi8K0O2Y
clu+f2FJ+5WLNscEY+th3zg+85Yv8Lw28RNTX2zvOpPH+cP59HH05Bhv3zzl
2jw3wjK73d5yw8upSDh5b+UtPUfrvP/oYU3VWeuYy81N6/WSpWf9bM7MaDdv
OGn63Rh/5vgb2jqTBrYud7At/05T/kIbP1aYix9uN7Pvnedrrj+FD5paA7n+
IzS0tIfOofvQe+g/6H+oH9Qf0gPpg/RC+iE/kD/IL+Qf4gHxgXhB/CCeEF+I
N8QfygPKB8oLyg/KE8oXyhvKH5oHaD6gecEB/FMsfQ==
           "], {
           Developer`PackedArrayForm, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 
            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 
            28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 
            44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
            60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71}, CompressedData["
1:eJxTTMoPSmVkYGBwB2LvHYd3Gzq9sJ/QWzWHweuFvZrkY+PzgS/sn84S2sYZ
88JecNvuS+kZL+wT845+9al4Yb/gatTKN+0v7GdcEPqqO/2Fff3aZXp/lr6w
11P3/NW+/YW9zt0HLiYngPoCJ0l+uP7C/se36XPXP3thz/XC70LWlxf2GSyC
/TKML+39Vu6+eJDnpb1ho5lIpPhL+x/FAo8fKgD5zOLNMZov7c05y9ecNHhp
n8e86a6d6Ut75cWml80tX9ov0Ih4ssUGqJ5ZK3Wb/Uv7HeF7F9s4vbRf99iO
P9v5pX3JN+fyEpeX9jMe3ngS4frS3q1qb7yE20t7q3tpZVOA9LoTbz//BNJx
u7tuebi/tD88p7dhCpB2do8TXgek3ZhlREC0x8MqEWQ+TB6mHqYfZh7MfJh9
MPth7oG5D+ZemPth/oH5D+ZfmP9h4QEPH2h4wcIPFp6w8IWFNyz8YfEBix9Y
fMHiDxafsPiFxTcs/mHpAZY+YOkFACbKHTM=
            "]}, {
           Automatic}], $CellContext`numericalAperture -> 
         0.65, $CellContext`designWavelength -> 
         0.000532, $CellContext`numericalApertureTarget -> 
         0.65, $CellContext`lensMediumSymbol -> $CellContext`n$bk7, \
$CellContext`lensMediumThickness -> 0.79, $CellContext`coddingtonShapeFactor -> 
         0.545, $CellContext`focalLength -> 
         1., $CellContext`lensMediumRefractiveIndex -> 
         1.5194725830654814`, $CellContext`coverGlassExistence -> 
         False, $CellContext`mechanicalImageDistance -> 
         0.5528837296257438, $CellContext`frontSurfaceCurvature -> 
         1.6554787853885926`, $CellContext`backSurfaceCurvature -> \
-0.4875358235286788, $CellContext`conjugateInfiniteness -> 
         True, $CellContext`paraxialWorkingDistance -> 
         0.5528837296257438, $CellContext`marginRatio -> 1.02}, 
       UpSet[
        $CellContext`mediumQ[$CellContext`n$bk7], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`n$bk7], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            1.01046945/(-103.56065299999999` + 
             1000000 $CellContext`lambda$^2) + 
            0.231792344/(-0.0200179144 + 1000000 $CellContext`lambda$^2) + 
            1.03961212/(-0.00600069867 + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`n$bk7[$CellContext`lambdaDomain] = {0.00030000000000000003`, 
        0.0025}, $CellContext`n$bk7[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           1.01046945/(-103.56065299999999` + 1000000 $CellContext`lambda$^2) + 
           0.231792344/(-0.0200179144 + 1000000 $CellContext`lambda$^2) + 
           1.03961212/(-0.00600069867 + 
            1000000 $CellContext`lambda$^2))], \
$CellContext`n$bk7[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`n$bk7[$CellContext`mediumName] = 
       "N-BK7", $CellContext`n$bk7[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`n$bk7[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (1.03961212/($CellContext`lsq$ - 0.00600069867) + 
             0.231792344/($CellContext`lsq$ - 0.0200179144) + 
             1.01046945/($CellContext`lsq$ - 
              103.56065299999999`)) $CellContext`lsq$]]], $CellContext`mediumQ[
         Blank[]] := False, $CellContext`refractiveIndexValue[
         PatternTest[
          Pattern[$CellContext`medium, 
           Blank[]], $CellContext`mediumQ], 
         PatternTest[
          Pattern[$CellContext`lambda, 
           Blank[]], 
          NumberQ]] := \
$CellContext`refractiveIndexValue[$CellContext`medium][$CellContext`lambda], 
       TagSet[$CellContext`refractiveIndexValue, 
        MessageName[$CellContext`refractiveIndexValue, "outofrange"], 
        "wavelength `1` is not in range `2` to `3`"], 
       Attributes[$CellContext`lambda$] = {Temporary}, 
       Attributes[$CellContext`lsq$] = {
        Temporary}, $CellContext`paraxialWorkingDistance[
         PatternTest[
          Pattern[$CellContext`d, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`n, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`f, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`cod, 
           Blank[]], NumericQ]] := 
       With[{$CellContext`smsq = ($CellContext`n $CellContext`f) \
($CellContext`n $CellContext`f + ($CellContext`cod^2 - 1) $CellContext`d)}, 
         If[$CellContext`smsq < 0., 
          Message[
           
           MessageName[$CellContext`setupBiasphericAplanatParameters, 
            "inconsistent"]], 
          0.]], $CellContext`setupBiasphericAplanatParameters[
         Pattern[$CellContext`parameters, 
          BlankSequence[
          Rule]]] := \
$CellContext`setupBiasphericAplanatParameters[{$CellContext`parameters}], \
$CellContext`setupBiasphericAplanatParameters[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`wl, $CellContext`lm, $CellContext`n, \
$CellContext`icQ, $CellContext`ocQ, $CellContext`difid, $CellContext`difod, \
$CellContext`pwd, $CellContext`pod, $CellContext`poi, $CellContext`paramp, \
$CellContext`paraparm, $CellContext`conj, $CellContext`remp}, $CellContext`wl = 
          ReplaceAll[$CellContext`designWavelength, $CellContext`parameters]; 
         If[
           Not[
            NumericQ[$CellContext`wl]], Message[
             
             MessageName[$CellContext`setupBiasphericAplanatParameters, 
              "needslambda"]]; Return[$CellContext`$Fialed]]; $CellContext`lm = 
          ReplaceAll[$CellContext`lensMediumSymbol, $CellContext`parameters]; 
         If[
           Not[
            $CellContext`mediumQ[$CellContext`lm]], Message[
             
             MessageName[$CellContext`setupBiasphericAplanatParameters, 
              "notmedium"], $CellContext`lm, $CellContext`lensMediumSymbol]; 
           Return[$Failed]]; $CellContext`n = \
$CellContext`refractiveIndexValue[$CellContext`lm, $CellContext`wl]; \
$CellContext`icQ = \
$CellContext`hasImageSpaceCoverGlassPresentQ[$CellContext`parameters]; \
$CellContext`difid = If[$CellContext`icQ, 
            Check[
             $CellContext`differenceToParaxialCoverGlass[$CellContext`wl, \
{$CellContext`coverGlassMediumSymbol, $CellContext`coverGlassThickness}, \
$CellContext`parameters], 
             Return[$CellContext`parameters]], 0.]; $CellContext`pwd = 
          ReplaceAll[$CellContext`mechanicalImageDistance, \
$CellContext`parameters]; $CellContext`ocQ = \
$CellContext`hasObjectSpaceCoverGlassPresentQ[$CellContext`parameters]; \
$CellContext`difod = If[$CellContext`ocQ, 
            Check[
             $CellContext`differenceToParaxialCoverGlass[$CellContext`wl, \
{$CellContext`objectSideCoverGlassMediumSymbol, \
$CellContext`objectSideCoverGlassThickness}, $CellContext`parameters], 
             Return[$CellContext`parameters]], 0.]; $CellContext`pod = 
          ReplaceAll[$CellContext`mechanicalObjectDistance, \
$CellContext`parameters]; $CellContext`poi = 
          
          ReplaceAll[$CellContext`mechanicalObjectImageDistance, \
$CellContext`parameters]; $CellContext`paramp = 
          Flatten[{$CellContext`parameters, \
$CellContext`lensMediumRefractiveIndex -> $CellContext`n, 
             If[
              
              NumericQ[$CellContext`pwd], \
$CellContext`paraxialWorkingDistance -> $CellContext`pwd + $CellContext`difid,
               Nothing], 
             If[
              
              NumericQ[$CellContext`pod], $CellContext`paraxialObjectDistance -> \
$CellContext`pod + $CellContext`difod, Nothing], 
             If[
              
              NumericQ[$CellContext`poi], \
$CellContext`paraxialObjectImageDistance -> $CellContext`poi + \
$CellContext`difid + $CellContext`difod, Nothing]}]; $CellContext`paraparm = 
          Check[
            $CellContext`settleRemainedParaxialParameters[$CellContext`paramp]\
, 
            Return[$Failed]]; $CellContext`remp = {
            If[
             Not[
              
              NumericQ[$CellContext`pwd]], \
$CellContext`mechanicalImageDistance -> 
             ReplaceAll[$CellContext`paraxialWorkingDistance, \
$CellContext`paraparm] - $CellContext`difid, Nothing], 
            If[
             Not[
              
              ReplaceAll[$CellContext`conjugateInfiniteness, \
$CellContext`paraparm]], {
              If[
               Not[
                
                NumericQ[$CellContext`pod]], \
$CellContext`mechanicalObjectDistance -> 
               ReplaceAll[$CellContext`paraxialObjectDistance, \
$CellContext`paraparm] - $CellContext`difod, Nothing], 
              If[
               Not[
                
                NumericQ[$CellContext`poi]], \
$CellContext`mechanicalObjectImageDistance -> 
               ReplaceAll[$CellContext`paraxialObjectImageDistance, \
$CellContext`paraparm] - $CellContext`difid - $CellContext`difod, Nothing]}, 
             Nothing]}; Apply[Sequence, 
           
           Flatten[{$CellContext`paramp, $CellContext`coverGlassExistence -> \
$CellContext`icQ, 
             If[
              
              ReplaceAll[$CellContext`conjugateInfiniteness, \
$CellContext`paraparm], 
              Nothing, $CellContext`objectSideCoverGlassExistence -> \
$CellContext`ocQ], $CellContext`remp, $CellContext`paraparm, 
             Options[$CellContext`setupBiasphericAplanatParameters]}]]], 
       Options[$CellContext`setupBiasphericAplanatParameters] := \
{$CellContext`marginRatio -> $CellContext`$marginRatio}, 
       TagSet[$CellContext`setupBiasphericAplanatParameters, 
        MessageName[$CellContext`setupBiasphericAplanatParameters, 
         "needslambda"], 
        "design wavelength should be specified by 'designWavelength->x' with \
unit in milli meters."], 
       TagSet[$CellContext`setupBiasphericAplanatParameters, 
        MessageName[$CellContext`setupBiasphericAplanatParameters, 
         "notmedium"], 
        "`1` symbol for `2` is not a medium symbol."], \
$CellContext`hasImageSpaceCoverGlassPresentQ[
         Pattern[$CellContext`parameters, 
          BlankSequence[
          Rule]]] := \
$CellContext`hasImageSpaceCoverGlassPresentQ[{$CellContext`parameters}], \
$CellContext`hasImageSpaceCoverGlassPresentQ[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       With[{$CellContext`plist = Map[First, $CellContext`parameters]}, 
         If[
          
          SubsetQ[$CellContext`plist, {$CellContext`coverGlassMediumSymbol, \
$CellContext`coverGlassThickness}], 
          And[
          ReplaceAll[$CellContext`coverGlassMediumSymbol, \
$CellContext`parameters] =!= $CellContext`atmosphere, N[
             
             ReplaceAll[$CellContext`coverGlassThickness, \
$CellContext`parameters]] > 0.], False]], 
       UpSet[
        $CellContext`mediumQ[$CellContext`atmosphere], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`atmosphere], 
        Function[{$CellContext`lambda$}, 
         $CellContext`atmosphere[$CellContext`lastIndex]]], \
$CellContext`atmosphere[$CellContext`lambdaDomain] = 
       All, $CellContext`atmosphere[$CellContext`lastIndex] = 
       1., $CellContext`atmosphere[$CellContext`lastLambda] = 
       0., $CellContext`atmosphere[$CellContext`mediumName] = 
       "atmosphere", $CellContext`atmosphere[$CellContext`mediumType] = \
$CellContext`constantMedium, $CellContext`differenceToParaxialCoverGlass[
         Pattern[$CellContext`wavelength, 
          Blank[]], {
          Pattern[$CellContext`cgms, 
           Blank[]], 
          Pattern[$CellContext`cgt, 
           Blank[]]}, 
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`mc, $CellContext`nc, $CellContext`dc, \
$CellContext`wd}, $CellContext`mc = 
          ReplaceAll[$CellContext`cgms, $CellContext`parameters]; If[
           Not[
            $CellContext`mediumQ[$CellContext`mc]], Message[
             
             MessageName[$CellContext`setupBiasphericAplanatParameters, 
              "notmedium"], $CellContext`mc, $CellContext`cgms]; 
           Return[$Failed]]; $CellContext`nc = \
$CellContext`refractiveIndexValue[$CellContext`mc, $CellContext`wavelength]; \
$CellContext`dc = 
          ReplaceAll[$CellContext`cgt, $CellContext`parameters]; \
$CellContext`paraxialThickessDifferenceFromMechanical[$CellContext`nc, \
$CellContext`dc]], $CellContext`paraxialThickessDifferenceFromMechanical[
         Pattern[$CellContext`ncg, 
          Blank[]], 
         Pattern[$CellContext`dcg, 
          Blank[]]] = $CellContext`dcg (-1. + 
         1./$CellContext`ncg), $CellContext`hasObjectSpaceCoverGlassPresentQ[
         Pattern[$CellContext`parameters, 
          BlankSequence[
          Rule]]] := \
$CellContext`hasObjectSpaceCoverGlassPresentQ[{$CellContext`parameters}], \
$CellContext`hasObjectSpaceCoverGlassPresentQ[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       With[{$CellContext`plist = Map[First, $CellContext`parameters]}, 
         If[
          
          SubsetQ[$CellContext`plist, \
{$CellContext`objectSideCoverGlassMediumSymbol, \
$CellContext`objectSideCoverGlassThickness}], 
          And[
          ReplaceAll[$CellContext`objectSideCoverGlassMediumSymbol, \
$CellContext`parameters] =!= $CellContext`atmosphere, N[
             
             ReplaceAll[$CellContext`objectSideCoverGlassThickness, \
$CellContext`parameters]] > 0.], 
          False]], $CellContext`settleRemainedParaxialParameters[
         Pattern[$CellContext`parameterSet, 
          BlankSequence[
          Rule]]] := \
$CellContext`settleRemainedParaxialParameters[{$CellContext`parameterSet}], \
$CellContext`settleRemainedParaxialParameters[
         Pattern[$CellContext`parameterSet, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`f, $CellContext`n, $CellContext`d, \
$CellContext`c, $CellContext`i, $CellContext`o, $CellContext`oi, \
$CellContext`\[Beta], $CellContext`ret}, $CellContext`f = ReplaceAll[
            ReplaceAll[$CellContext`focalLength, $CellContext`parameterSet], 
            
            Options[$CellContext`settleRemainedParaxialParameters]]; \
$CellContext`n = ReplaceAll[
            
            ReplaceAll[$CellContext`lensMediumRefractiveIndex, \
$CellContext`parameterSet], 
            
            Options[$CellContext`settleRemainedParaxialParameters]]; \
$CellContext`d = ReplaceAll[
            
            ReplaceAll[$CellContext`lensMediumThickness, \
$CellContext`parameterSet], 
            
            Options[$CellContext`settleRemainedParaxialParameters]]; \
$CellContext`c = ReplaceAll[
            
            ReplaceAll[$CellContext`coddingtonShapeFactor, \
$CellContext`parameterSet], 
            
            Options[$CellContext`settleRemainedParaxialParameters]]; \
$CellContext`i = ReplaceAll[
            
            ReplaceAll[$CellContext`paraxialWorkingDistance, \
$CellContext`parameterSet], 
            
            Options[$CellContext`settleRemainedParaxialParameters]]; \
$CellContext`o = ReplaceAll[
            
            ReplaceAll[$CellContext`paraxialObjectDistance, \
$CellContext`parameterSet], 
            
            Options[$CellContext`settleRemainedParaxialParameters]]; \
$CellContext`oi = ReplaceAll[
            
            ReplaceAll[$CellContext`paraxialObjectImageDistance, \
$CellContext`parameterSet], 
            
            Options[$CellContext`settleRemainedParaxialParameters]]; \
$CellContext`\[Beta] = ReplaceAll[
            
            ReplaceAll[$CellContext`lateralMagnification, \
$CellContext`parameterSet], 
            Options[$CellContext`settleRemainedParaxialParameters]]; If[
           $CellContext`infiniteParameterSetQ[$CellContext`f, $CellContext`n, \
$CellContext`d, $CellContext`c, $CellContext`i, $CellContext`o, \
$CellContext`oi, $CellContext`\[Beta]], 
           Return[
            $CellContext`settleRemainedParaxialParametersInfinite[$\
CellContext`d, $CellContext`n, $CellContext`f, $CellContext`i, \
$CellContext`c]]]; 
         Check[$CellContext`ret = $CellContext`tautologyCheck[$CellContext`d, \
$CellContext`i, $CellContext`o, $CellContext`oi], 
           Return[$Failed]]; If[
           Not[
            NumericQ[$CellContext`i]], $CellContext`i = ReplaceAll[
             ReplaceAll[
              
              ReplaceAll[$CellContext`paraxialWorkingDistance, \
$CellContext`ret], $CellContext`parameterSet], 
             Options[$CellContext`settleRemainedParaxialParameters]]]; If[
           Not[
            NumericQ[$CellContext`o]], $CellContext`o = ReplaceAll[
             ReplaceAll[
              
              ReplaceAll[$CellContext`paraxialObjectDistance, \
$CellContext`ret], $CellContext`parameterSet], 
             Options[$CellContext`settleRemainedParaxialParameters]]]; 
         Flatten[{$CellContext`ret, 
            $CellContext`settleRemainedParaxialParametersFinite[$CellContext`\
d, $CellContext`n, $CellContext`f, $CellContext`i, $CellContext`c, \
$CellContext`o, $CellContext`\[Beta]]}]], 
       Options[$CellContext`settleRemainedParaxialParameters] = \
{$CellContext`focalLength -> $CellContext`fParm, \
$CellContext`lensMediumRefractiveIndex -> $CellContext`nParm, \
$CellContext`lensMediumThickness -> $CellContext`dParm, \
$CellContext`coddingtonShapeFactor -> $CellContext`cParm, \
$CellContext`paraxialWorkingDistance -> $CellContext`iParm, \
$CellContext`paraxialObjectDistance -> $CellContext`oParm, \
$CellContext`paraxialObjectImageDistance -> $CellContext`oiParm, \
$CellContext`lateralMagnification -> $CellContext`bParm}, 
       TagSet[$CellContext`settleRemainedParaxialParameters, 
        MessageName[$CellContext`settleRemainedParaxialParameters, 
         "compalsory"], 
        "numerical rule for `1` is needed for consistency between \
parameters."], 
       TagSet[$CellContext`settleRemainedParaxialParameters, 
        MessageName[$CellContext`settleRemainedParaxialParameters, 
         "inconsistent"], "paraxial parameter set is inconsistent."], 
       TagSet[$CellContext`settleRemainedParaxialParameters, 
        MessageName[$CellContext`settleRemainedParaxialParameters, 
         "meybepositive"], "a paraxial parameter `1` may be positive."], 
       TagSet[$CellContext`settleRemainedParaxialParameters, 
        MessageName[$CellContext`settleRemainedParaxialParameters, 
         "notenough"], 
        "paraxial parameter set is insufficient to fix paraxial condition."], 
       
       TagSet[$CellContext`settleRemainedParaxialParameters, 
        MessageName[$CellContext`settleRemainedParaxialParameters, 
         "notimplemented"], 
        "sorry, a result for the parameter set is currently not \
implemented."], 
       TagSet[$CellContext`settleRemainedParaxialParameters, 
        MessageName[$CellContext`settleRemainedParaxialParameters, 
         "tautology"], "distances are not consistent each other."], 
       TagSet[$CellContext`settleRemainedParaxialParameters, 
        MessageName[$CellContext`settleRemainedParaxialParameters, 
         "tautoloy"], "parameter set includes tautology."], 
       TagSet[$CellContext`settleRemainedParaxialParameters, 
        MessageName[$CellContext`settleRemainedParaxialParameters, "toomuch"],
         "paraxial parameter set is excessive and no solution."], \
$CellContext`infiniteParameterSetQ[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := 
       With[{$CellContext`absents = \
$CellContext`absentParameter[$CellContext`d, $CellContext`n, $CellContext`f, \
$CellContext`mid, $CellContext`cod, $CellContext`mod, $CellContext`oid, \
$CellContext`beta]}, 
         Or[
          
          SubsetQ[$CellContext`absents, {$CellContext`oiParm, \
$CellContext`bParm}], 
          
          SubsetQ[$CellContext`absents, {$CellContext`oParm, \
$CellContext`bParm}]]], $CellContext`absentParameter[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          
          Blank[]]] := $CellContext`checkNumeric[{$CellContext`d, \
$CellContext`n, $CellContext`f, $CellContext`m, $CellContext`cod}, \
{$CellContext`dParm, $CellContext`nParm, $CellContext`fParm, \
$CellContext`iParm, $CellContext`cParm}], $CellContext`absentParameter[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          
          Blank[]]] := $CellContext`checkNumeric[{$CellContext`d, \
$CellContext`n, $CellContext`f, $CellContext`mid, $CellContext`cod, \
$CellContext`mod, $CellContext`oid, $CellContext`beta}, \
$CellContext`allParametersForFinite], 
       Attributes[$CellContext`checkNumeric] = {
        Listable}, $CellContext`checkNumeric[
         PatternTest[
          Pattern[$CellContext`n, 
           Blank[]], NumericQ], 
         Blank[]] := Nothing, $CellContext`checkNumeric[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`ret, 
          
          Blank[]]] := $CellContext`ret, $CellContext`allParametersForFinite = \
{$CellContext`dParm, $CellContext`nParm, $CellContext`fParm, \
$CellContext`iParm, $CellContext`cParm, $CellContext`oParm, \
$CellContext`oiParm, $CellContext`bParm}, \
$CellContext`settleRemainedParaxialParametersInfinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]]] := Condition[Message[
           
           MessageName[$CellContext`settleRemainedParaxialParameters, 
            "notenough"]]; $Failed, Length[
           $CellContext`absentParameter[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`m, $CellContext`cod]] >= 
         2], $CellContext`settleRemainedParaxialParametersInfinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]]] := Condition[Message[
           
           MessageName[$CellContext`settleRemainedParaxialParameters, 
            "compalsory"], $CellContext`lensMediumSymbol]; $Failed, \
$CellContext`absentParameter[$CellContext`d, $CellContext`n, $CellContext`f, \
$CellContext`m, $CellContext`cod] === {$CellContext`nParm}], \
$CellContext`settleRemainedParaxialParametersInfinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]]] := Condition[Message[
           
           MessageName[$CellContext`settleRemainedParaxialParameters, 
            "notenough"]]; $Failed, 
         And[$CellContext`absentParameter[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`m, $CellContext`cod] === {$CellContext`dParm}, 
          Abs[
            N[$CellContext`cod]] === 
          1.]], $CellContext`settleRemainedParaxialParametersInfinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]]] := Condition[
         Module[{$CellContext`sd, $CellContext`ddep}, $CellContext`sd = \
($CellContext`cod + 1.) $CellContext`f - ($CellContext`cod - 
             1.) $CellContext`m; $CellContext`ddep = ($CellContext`n \
$CellContext`sd) (($CellContext`f - $CellContext`m)/(($CellContext`cod + 
              1.) $CellContext`f)); Flatten[{
             $CellContext`curvaturesInfinite[$CellContext`ddep, \
$CellContext`n, $CellContext`f, $CellContext`m, $CellContext`cod], \
$CellContext`paraxialWorkingDistance -> $CellContext`m, \
$CellContext`lensMediumThickness -> $CellContext`ddep}]], 
         And[$CellContext`absentParameter[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`m, $CellContext`cod] === {$CellContext`dParm}, 
          Abs[
            N[$CellContext`cod]] =!= 
          1.]], $CellContext`settleRemainedParaxialParametersInfinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]]] := Condition[
         Module[{$CellContext`sd, $CellContext`fdep}, $CellContext`sd = \
($CellContext`cod + 1.)^2 $CellContext`d^2 + ((
               4 $CellContext`n) $CellContext`m) (($CellContext`cod \
($CellContext`cod + 1.)) $CellContext`d + $CellContext`n $CellContext`m); 
          If[$CellContext`sd < 0., Message[
              
              MessageName[$CellContext`settleRemainedParaxialParameters, 
               "inconsistent"]]; Return[$Failed]]; $CellContext`fdep = 
           If[N[$CellContext`cod] =!= -1., (
              Sqrt[$CellContext`sd] + ((
                 2. $CellContext`n) $CellContext`cod) $CellContext`m + \
($CellContext`cod + 1.) $CellContext`d)/((2 $CellContext`n) ($CellContext`cod + 
              1.)), $CellContext`d/$CellContext`n + $CellContext`m]; 
          Flatten[{
             $CellContext`curvaturesInfinite[$CellContext`d, $CellContext`n, \
$CellContext`fdep, $CellContext`m, $CellContext`cod], \
$CellContext`paraxialWorkingDistance -> $CellContext`m, \
$CellContext`focalLength -> $CellContext`fdep}]], \
$CellContext`absentParameter[$CellContext`d, $CellContext`n, $CellContext`f, \
$CellContext`m, $CellContext`cod] === {$CellContext`fParm}], \
$CellContext`settleRemainedParaxialParametersInfinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]]] := Condition[
         Module[{$CellContext`sm, $CellContext`mdep}, $CellContext`sm = \
($CellContext`n $CellContext`f) ($CellContext`n $CellContext`f + \
($CellContext`cod^2 - 1.) $CellContext`d); If[$CellContext`sm < 0., Message[
              MessageName[$CellContext`settleRemainedParaxialParameters, 
               "inconsistent"]]; Return[$Failed]]; $CellContext`mdep = 
           If[N[$CellContext`cod] =!= 
             1., (($CellContext`n $CellContext`cod) $CellContext`f - 
              Sqrt[$CellContext`sm])/($CellContext`n ($CellContext`cod - 
              1.)), $CellContext`f - $CellContext`d/$CellContext`n]; 
          Flatten[{
             $CellContext`curvaturesInfinite[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`mdep, $CellContext`cod], \
$CellContext`paraxialWorkingDistance -> $CellContext`mdep}]], \
$CellContext`absentParameter[$CellContext`d, $CellContext`n, $CellContext`f, \
$CellContext`m, $CellContext`cod] === {$CellContext`iParm}], \
$CellContext`settleRemainedParaxialParametersInfinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]]] := Condition[
         With[{$CellContext`curvs = \
$CellContext`curvaturesInfinite[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`m, $CellContext`cod]}, 
          
          Flatten[{$CellContext`curvs, $CellContext`paraxialWorkingDistance -> \
$CellContext`m, $CellContext`coddingtonShapeFactor -> ReplaceAll[
              $CellContext`CSF[$CellContext`frontSurfaceCurvature, \
$CellContext`backSurfaceCurvature], $CellContext`curvs]}]], \
$CellContext`absentParameter[$CellContext`d, $CellContext`n, $CellContext`f, \
$CellContext`m, $CellContext`cod] === {$CellContext`cParm}], \
$CellContext`settleRemainedParaxialParametersInfinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]]] := 
       If[$CellContext`cod =!= -($CellContext`d $CellContext`f - \
$CellContext`n (($CellContext`f^2 - $CellContext`m^2)/((($CellContext`n - 
              1.) $CellContext`d) $CellContext`f))), Message[
           
           MessageName[$CellContext`settleRemainedParaxialParameters, 
            "inconsistent"]]; $Failed, 
         Flatten[{
           $CellContext`curvaturesInfinite[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`m, $CellContext`cod], \
$CellContext`paraxialWorkingDistance -> $CellContext`m}]], \
$CellContext`curvaturesInfinite[
         PatternTest[
          Blank[], NumericQ], 
         PatternTest[
          Pattern[$CellContext`n, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`f, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`m, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`cod, 
           Blank[]], N[#] === -1.& ]] := {$CellContext`frontSurfaceCurvature -> 
         0, $CellContext`backSurfaceCurvature -> (-1.)/(($CellContext`n - 
           1) $CellContext`f)}, $CellContext`curvaturesInfinite[
         PatternTest[
          Blank[], NumericQ], 
         PatternTest[
          Pattern[$CellContext`n, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`f, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`m, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`cod, 
           Blank[]], N[#] === 1.& ]] := {$CellContext`frontSurfaceCurvature -> 
         1./(($CellContext`n - 
           1) $CellContext`f), $CellContext`backSurfaceCurvature -> 
         0}, $CellContext`curvaturesInfinite[
         PatternTest[
          Pattern[$CellContext`d, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`n, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`f, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`m, 
           Blank[]], NumericQ], 
         Blank[]] := {$CellContext`frontSurfaceCurvature -> $CellContext`n \
(($CellContext`f - $CellContext`m)/((($CellContext`n - 
             1) $CellContext`d) $CellContext`f)), \
$CellContext`backSurfaceCurvature -> ($CellContext`n ($CellContext`f - \
$CellContext`m) - $CellContext`d)/((($CellContext`n - 
            1) $CellContext`d) $CellContext`m), \
$CellContext`conjugateInfiniteness -> True}, $CellContext`CSF[
         Pattern[$CellContext`c1, 
          Blank[]], 
         Pattern[$CellContext`c2, 
          
          Blank[]]] := ($CellContext`c1 + $CellContext`c2)/($CellContext`c1 - \
$CellContext`c2), $CellContext`tautologyCheck[
         PatternTest[
          Pattern[$CellContext`d, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mid, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mod, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`oid, 
           Blank[]], NumericQ]] := 
       Condition[{}, $CellContext`oid == $CellContext`d + $CellContext`mid + \
$CellContext`mod], $CellContext`tautologyCheck[
         PatternTest[
          Pattern[$CellContext`d, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mid, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mod, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`oid, 
           Blank[]], NumericQ]] := Condition[Message[
           
           MessageName[$CellContext`settleRemainedParaxialParameters, 
            "tautology"]]; $Failed, $CellContext`oid =!= $CellContext`d + \
$CellContext`mid + $CellContext`mod], $CellContext`tautologyCheck[
         PatternTest[
          Blank[], Not[
           NumericQ[#]]& ], 
         PatternTest[
          Pattern[$CellContext`mid, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mod, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`oid, 
           Blank[]], 
          NumericQ]] := {$CellContext`lensMediumThickness -> $CellContext`oid - \
$CellContext`mid - $CellContext`mod}, $CellContext`tautologyCheck[
         PatternTest[
          Pattern[$CellContext`d, 
           Blank[]], NumericQ], 
         PatternTest[
          Blank[], Not[
           NumericQ[#]]& ], 
         PatternTest[
          Pattern[$CellContext`mod, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`oid, 
           Blank[]], 
          NumericQ]] := {$CellContext`paraxialWorkingDistance -> \
$CellContext`oid - $CellContext`d - $CellContext`mod}, \
$CellContext`tautologyCheck[
         PatternTest[
          Pattern[$CellContext`d, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mid, 
           Blank[]], NumericQ], 
         PatternTest[
          Blank[], Not[
           NumericQ[#]]& ], 
         PatternTest[
          Pattern[$CellContext`oid, 
           Blank[]], 
          NumericQ]] := {$CellContext`paraxialObjectDistance -> \
$CellContext`oid - $CellContext`d - $CellContext`mid}, \
$CellContext`tautologyCheck[
         PatternTest[
          Pattern[$CellContext`d, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mid, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mod, 
           Blank[]], NumericQ], 
         PatternTest[
          Blank[], Not[
           
           NumericQ[#]]& ]] := {$CellContext`paraxialObjectImageDistance -> \
$CellContext`mid + $CellContext`d + $CellContext`mod}, \
$CellContext`tautologyCheck[
         BlankSequence[]] := 
       Sequence[], $CellContext`settleRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := 
       Module[{$CellContext`nc, $CellContext`da, $CellContext`na, \
$CellContext`fa, $CellContext`ia, $CellContext`ca, $CellContext`oa, \
$CellContext`ba}, $CellContext`nc = \
$CellContext`boundingConditionCount[{$CellContext`f, $CellContext`mid, \
$CellContext`cod, $CellContext`mod, $CellContext`beta}]; 
         If[$CellContext`nc <= 2, Message[
             
             MessageName[$CellContext`settleRemainedParaxialParameters, 
              "notenough"]]; Return[$Failed], 
           If[$CellContext`nc >= 4, Message[
              
              MessageName[$CellContext`settleRemainedParaxialParameters, 
               "toomuch"]]; Return[$Failed]]]; 
         Flatten[{$CellContext`conjugateInfiniteness -> False, 
            $CellContext`fixRemainedParaxialParametersFinite[$CellContext`d, \
$CellContext`n, $CellContext`f, $CellContext`mid, $CellContext`cod, \
$CellContext`mod, $CellContext`beta]}]], \
$CellContext`settleRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := Condition[
         If[$CellContext`oid === $CellContext`mod + $CellContext`d + \
$CellContext`mid, 
          $CellContext`settleRemainedParaxialParametersFinite[$CellContext`d, \
$CellContext`n, $CellContext`f, $CellContext`mid, $CellContext`cod, \
$CellContext`oParm, $CellContext`oid, $CellContext`beta], Message[
            
            MessageName[$CellContext`settleRemainedParaxialParameters, 
             "tautoloy"]]; $Failed], 
         $CellContext`tautologyParametersMatchQ[$CellContext`d, \
$CellContext`n, $CellContext`f, $CellContext`mid, $CellContext`cod, \
$CellContext`mod, $CellContext`oid, $CellContext`beta]], \
$CellContext`settleRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]]] := Condition[Message[
           
           MessageName[$CellContext`settleRemainedParaxialParameters, 
            "compalsory"], $CellContext`lensMediumSymbol]; $Failed, \
$CellContext`absentParameter[$CellContext`d, $CellContext`n, $CellContext`f, \
$CellContext`m, $CellContext`cod] === {$CellContext`nParm}], \
$CellContext`settleRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := Condition[
         $CellContext`settleRemainedParaxialForMostProbableParameters[$\
CellContext`d, $CellContext`n, $CellContext`mid, $CellContext`oid, \
$CellContext`beta], 
         $CellContext`setEqualQ[
          $CellContext`containedParameter[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`mid, $CellContext`cod, $CellContext`mod, \
$CellContext`oid, $CellContext`beta], \
$CellContext`mostProbableParameterList]], \
$CellContext`settleRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := Condition[
         $CellContext`settleRemainedParaxialForFixedFocalLength[$CellContext`\
d, $CellContext`n, $CellContext`f, $CellContext`oid, $CellContext`beta], 
         $CellContext`setEqualQ[
          $CellContext`containedParameter[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`mid, $CellContext`cod, $CellContext`mod, \
$CellContext`oid, $CellContext`beta], \
$CellContext`fixedFocalLengthParameterList]], \
$CellContext`settleRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := Condition[
         $CellContext`settleRemainedParaxialForlackOfOIAndWD[$CellContext`d, \
$CellContext`n, $CellContext`f, $CellContext`mod, $CellContext`beta], 
         $CellContext`setEqualQ[
          $CellContext`containedParameter[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`mid, $CellContext`cod, $CellContext`mod, \
$CellContext`oid, $CellContext`beta], \
$CellContext`lackOfOIAndWDParameterList]], \
$CellContext`settleRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := Condition[
         $CellContext`settleRemainedParaxialForlackOfOIAndOD[$CellContext`d, \
$CellContext`n, $CellContext`f, $CellContext`mod, $CellContext`beta], 
         $CellContext`setEqualQ[
          $CellContext`containedParameter[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`mid, $CellContext`cod, $CellContext`mod, \
$CellContext`oid, $CellContext`beta], \
$CellContext`lackOfOIAndODParameterList]], \
$CellContext`settleRemainedParaxialParametersFinite[
         BlankSequence[]] := (Message[
          
          MessageName[$CellContext`settleRemainedParaxialParameters, 
           "notimplemented"]]; $Failed), $CellContext`boundingConditionCount[
         Pattern[$CellContext`params, {
           BlankSequence[]}]] := Apply[Plus, 
         $CellContext`numericCount[$CellContext`params]], 
       Attributes[$CellContext`numericCount] = {
        Listable}, $CellContext`numericCount[
         Pattern[$CellContext`c, 
          Blank[]]] := Condition[1, 
         NumericQ[$CellContext`c]], $CellContext`numericCount[
         Pattern[$CellContext`c, 
          Blank[]]] := Condition[0, 
         Not[
          
          NumericQ[$CellContext`c]]], \
$CellContext`fixRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Blank[], 
         PatternTest[
          Pattern[$CellContext`mid, 
           Blank[]], NumericQ], 
         Blank[], 
         PatternTest[
          Pattern[$CellContext`mod, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`beta, 
           Blank[]], NumericQ]] := 
       With[{$CellContext`c1 = ($CellContext`beta ($CellContext`d + \
$CellContext`n $CellContext`mod) + $CellContext`n \
$CellContext`mid)/((($CellContext`beta ($CellContext`n - 
              1.)) $CellContext`d) $CellContext`mod), $CellContext`c2 = \
(-($CellContext`d + ($CellContext`beta $CellContext`n) $CellContext`mod + \
$CellContext`n $CellContext`mid))/((($CellContext`n - 
             1.) $CellContext`d) $CellContext`mid)}, 
         Flatten[{$CellContext`frontSurfaceCurvature -> $CellContext`c1, \
$CellContext`backSurfaceCurvature -> $CellContext`c2, \
$CellContext`focalLength -> (((-$CellContext`beta) $CellContext`n) \
$CellContext`mid) ($CellContext`mod/($CellContext`beta (($CellContext`beta \
$CellContext`n) $CellContext`mod + $CellContext`d) + $CellContext`n \
$CellContext`mid)), $CellContext`coddingtonShapeFactor -> \
$CellContext`CSF[$CellContext`c1, $CellContext`c2], 
           $CellContext`additionalTermsOfPricipals[$CellContext`d, \
$CellContext`n, $CellContext`c1, $CellContext`c2, $CellContext`mid, \
$CellContext`mod]}]], $CellContext`fixRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         PatternTest[
          Pattern[$CellContext`f, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mid, 
           Blank[]], NumericQ], 
         Blank[], 
         Blank[], 
         PatternTest[
          Pattern[$CellContext`beta, 
           Blank[]], NumericQ]] := 
       With[{$CellContext`c1 = (((
               1. - $CellContext`beta) $CellContext`f) $CellContext`n - \
$CellContext`n $CellContext`mid)/((($CellContext`n - 
             1.) $CellContext`d) $CellContext`f), $CellContext`c2 = (((
               1. - $CellContext`beta) $CellContext`f) $CellContext`n - \
$CellContext`n $CellContext`mid - $CellContext`d)/((($CellContext`n - 
             1.) ($CellContext`beta $CellContext`f + $CellContext`mid)) \
$CellContext`d), $CellContext`mod = (-(($CellContext`beta $CellContext`d) \
$CellContext`f + ($CellContext`f $CellContext`n) \
$CellContext`mid))/(($CellContext`beta $CellContext`n) ($CellContext`beta \
$CellContext`f + $CellContext`mid))}, 
         Flatten[{$CellContext`frontSurfaceCurvature -> $CellContext`c1, \
$CellContext`backSurfaceCurvature -> $CellContext`c2, \
$CellContext`paraxialObjectDistance -> $CellContext`mod, \
$CellContext`coddingtonShapeFactor -> $CellContext`CSF[$CellContext`c1, \
$CellContext`c2], 
           $CellContext`additionalTermsOfPricipals[$CellContext`d, \
$CellContext`n, $CellContext`c1, $CellContext`c2, $CellContext`mid, \
$CellContext`mod]}]], $CellContext`fixRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         PatternTest[
          Pattern[$CellContext`f, 
           Blank[]], NumericQ], 
         Blank[], 
         Blank[], 
         PatternTest[
          Pattern[$CellContext`mod, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`beta, 
           Blank[]], NumericQ]] := 
       With[{$CellContext`c1 = ($CellContext`beta $CellContext`d + ((
               1. - $CellContext`beta) $CellContext`n) $CellContext`f + \
($CellContext`beta $CellContext`n) $CellContext`mod)/((($CellContext`d \
($CellContext`n - 1.)) ($CellContext`beta $CellContext`f + $CellContext`mod)) 
           $CellContext`d), $CellContext`c2 = (((
               1. - $CellContext`beta) $CellContext`f) $CellContext`n - \
$CellContext`n $CellContext`mod - $CellContext`d)/((($CellContext`n - 
             1.) ($CellContext`beta $CellContext`f + $CellContext`mod)) \
$CellContext`d), $CellContext`mid = (-(($CellContext`beta $CellContext`f) \
(($CellContext`beta $CellContext`n) $CellContext`mod + \
$CellContext`d)))/($CellContext`n ($CellContext`f + $CellContext`beta \
$CellContext`mod))}, 
         Flatten[{$CellContext`frontSurfaceCurvature -> $CellContext`c1, \
$CellContext`backSurfaceCurvature -> $CellContext`c2, \
$CellContext`paraxialWorkingDistance -> $CellContext`mid, \
$CellContext`coddingtonShapeFactor -> $CellContext`CSF[$CellContext`c1, \
$CellContext`c2], 
           $CellContext`additionalTermsOfPricipals[$CellContext`d, \
$CellContext`n, $CellContext`c1, $CellContext`c2, $CellContext`mid, \
$CellContext`mod]}]], $CellContext`fixRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         PatternTest[
          Pattern[$CellContext`f, 
           Blank[]], NumericQ], 
         Blank[], 
         PatternTest[
          Pattern[$CellContext`cod, 
           Blank[]], NumericQ], 
         Blank[], 
         PatternTest[
          Pattern[$CellContext`beta, 
           Blank[]], NumericQ]] := 
       Module[{$CellContext`s, $CellContext`sq, $CellContext`rc, \
$CellContext`rm, $CellContext`c1, $CellContext`c2, $CellContext`mod, \
$CellContext`mid}, $CellContext`s = ((($CellContext`cod^2 - 
               1.) $CellContext`d + $CellContext`n $CellContext`f) \
$CellContext`n) $CellContext`f; If[$CellContext`s < 0., Message[
             
             MessageName[$CellContext`settleRemainedParaxialParameters, 
              "inconsistent"]]; Return[$Failed]]; $CellContext`sq = 
          Sqrt[$CellContext`s]; $CellContext`rc = ($CellContext`sq - \
$CellContext`n $CellContext`f)/((($CellContext`n - 
             1.) $CellContext`d) $CellContext`f); $CellContext`rm = \
((($CellContext`cod ($CellContext`beta - 1.) - 
               1.) $CellContext`n) $CellContext`f + $CellContext`beta \
$CellContext`sq)/($CellContext`beta $CellContext`n); $CellContext`c1 = \
$CellContext`rc/($CellContext`cod - 
           1.); $CellContext`c2 = $CellContext`rc/($CellContext`cod + 
           1.); $CellContext`mod = $CellContext`rm/($CellContext`cod + 
           1.); $CellContext`mid = $CellContext`rm/($CellContext`cod - 1.); 
         Flatten[{$CellContext`frontSurfaceCurvature -> $CellContext`c1, \
$CellContext`backSurfaceCurvature -> $CellContext`c2, \
$CellContext`paraxialObjectDistance -> $CellContext`mod, \
$CellContext`paraxialWorkingDistance -> $CellContext`mid, 
            $CellContext`additionalTermsOfPricipals[$CellContext`d, \
$CellContext`n, $CellContext`c1, $CellContext`c2, $CellContext`mid, \
$CellContext`mod]}]], $CellContext`fixRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         PatternTest[
          Pattern[$CellContext`f, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mid, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`cod, 
           Blank[]], NumericQ], 
         Blank[], 
         Blank[]] := 
       Module[{$CellContext`s, $CellContext`sq, $CellContext`c1, \
$CellContext`c2, $CellContext`mod}, $CellContext`s = (($CellContext`n \
(($CellContext`cod^2 - 
                1.) $CellContext`d + $CellContext`n $CellContext`f)) \
$CellContext`n) $CellContext`f; If[$CellContext`s < 0., Message[
             
             MessageName[$CellContext`settleRemainedParaxialParameters, 
              "inconsistent"]]; Return[$Failed]]; $CellContext`sq = 
          Sqrt[$CellContext`s]; $CellContext`c1 = ($CellContext`sq - \
$CellContext`n $CellContext`f)/(((($CellContext`cod - 1.) ($CellContext`n - 
              
              1.)) $CellContext`d) $CellContext`f); $CellContext`c2 = \
($CellContext`sq - $CellContext`n $CellContext`f)/(((($CellContext`cod + 
              1.) ($CellContext`n - 
              1.)) $CellContext`d) $CellContext`f); $CellContext`mod = \
((($CellContext`c2 $CellContext`d) ($CellContext`n - 
               1.)) $CellContext`mid + $CellContext`d + $CellContext`n \
$CellContext`mid)/(($CellContext`n - 
             1.) ($CellContext`c1 ((($CellContext`c2 $CellContext`d) \
($CellContext`n - 
                  1.)) $CellContext`mid + $CellContext`d + $CellContext`n \
$CellContext`mid) - ($CellContext`c2 $CellContext`n) $CellContext`mid) - \
$CellContext`n); 
         Flatten[{$CellContext`frontSurfaceCurvature -> $CellContext`c1, \
$CellContext`backSurfaceCurvature -> $CellContext`c2, \
$CellContext`paraxialObjectDistance -> $CellContext`mod, \
$CellContext`lateralMagnification -> (($CellContext`cod $CellContext`n) \
($CellContext`f - $CellContext`mid) + $CellContext`n $CellContext`mid - \
$CellContext`sq)/((($CellContext`cod - 1.) $CellContext`n) $CellContext`f), 
            $CellContext`additionalTermsOfPricipals[$CellContext`d, \
$CellContext`n, $CellContext`c1, $CellContext`c2, $CellContext`mid, \
$CellContext`mod]}]], $CellContext`fixRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         PatternTest[
          Pattern[$CellContext`f, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mid, 
           Blank[]], NumericQ], 
         Blank[], 
         PatternTest[
          Pattern[$CellContext`mod, 
           Blank[]], NumericQ], 
         Blank[]] := 
       Module[{$CellContext`s, $CellContext`sq, $CellContext`c1, \
$CellContext`c2}, $CellContext`s = ($CellContext`d $CellContext`f)^2 + ((((
                2. $CellContext`d) $CellContext`f) $CellContext`n) \
$CellContext`mid) $CellContext`mod + (($CellContext`n^2 $CellContext`mid) \
$CellContext`mod) ($CellContext`mid $CellContext`mod - 4. $CellContext`f^2); 
         If[$CellContext`s < 0., Message[
             
             MessageName[$CellContext`settleRemainedParaxialParameters, 
              "inconsistent"]]; Return[$Failed]]; $CellContext`sq = 
          Sqrt[$CellContext`s]; $CellContext`c1 = ($CellContext`sq - \
$CellContext`d $CellContext`f + ($CellContext`n $CellContext`mod) \
($CellContext`mid - 2. $CellContext`f))/((((
              2. $CellContext`d) $CellContext`f) ($CellContext`n - 
             1.)) $CellContext`mod); $CellContext`c2 = ($CellContext`sq + \
$CellContext`d $CellContext`f + ((
               2. $CellContext`f) $CellContext`n) $CellContext`mid - \
($CellContext`n $CellContext`mod) $CellContext`mid)/((((
              2. $CellContext`d) $CellContext`f) $CellContext`mid) (
            1. - $CellContext`n)); 
         Flatten[{$CellContext`frontSurfaceCurvature -> $CellContext`c1, \
$CellContext`backSurfaceCurvature -> $CellContext`c2, \
$CellContext`lateralMagnification -> ($CellContext`sq - ($CellContext`f \
$CellContext`d) $CellContext`f - ($CellContext`n $CellContext`mid) \
$CellContext`mod)/(((
               2. $CellContext`f) $CellContext`n) $CellContext`mod), \
$CellContext`coddingtonShapeFactor -> $CellContext`CSF[$CellContext`c1, \
$CellContext`c2], 
            $CellContext`additionalTermsOfPricipals[$CellContext`d, \
$CellContext`n, $CellContext`c1, $CellContext`c2, $CellContext`mid, \
$CellContext`mod]}]], $CellContext`fixRemainedParaxialParametersFinite[
         BlankSequence[]] := (Message[
          
          MessageName[$CellContext`settleRemainedParaxialParameters, 
           "notimplemented"]]; $Failed), \
$CellContext`additionalTermsOfPricipals[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`c1, 
          Blank[]], 
         Pattern[$CellContext`c2, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          
          Blank[]]] := \
{$CellContext`paraxialDistanceBetweenObjectAndPrincipal -> $CellContext`mod - \
$CellContext`objectPrincipalPlanePosition[$CellContext`c1, $CellContext`c2, \
$CellContext`n, $CellContext`d], \
$CellContext`paraxialDistanceBetweenPrincipalAndImage -> $CellContext`mid - \
$CellContext`imagePrincipalPlanePosition[$CellContext`c1, $CellContext`c2, \
$CellContext`n, $CellContext`d]}, $CellContext`objectPrincipalPlanePosition[
         Pattern[$CellContext`c1, 
          Blank[]], 
         Pattern[$CellContext`c2, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`d, 
          
          Blank[]]] := $CellContext`c2 ($CellContext`d/($CellContext`c1 \
(($CellContext`c2 $CellContext`d) ($CellContext`n - 
             1) + $CellContext`n) - $CellContext`n $CellContext`c2)), \
$CellContext`imagePrincipalPlanePosition[
         Pattern[$CellContext`c1, 
          Blank[]], 
         Pattern[$CellContext`c2, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`d, 
          
          Blank[]]] := (-$CellContext`c1) ($CellContext`d/($CellContext`c1 \
(($CellContext`c2 $CellContext`d) ($CellContext`n - 
             1) + $CellContext`n) - $CellContext`n $CellContext`c2)), \
$CellContext`tautologyParametersMatchQ[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := Intersection[
          $CellContext`absentParameter[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`mid, $CellContext`cod, $CellContext`mod, \
$CellContext`oid, $CellContext`beta], $CellContext`tautologyParameterList] === \
{}, $CellContext`tautologyParameterList = {$CellContext`dParm, \
$CellContext`iParm, $CellContext`oParm, $CellContext`oiParm}, \
$CellContext`settleRemainedParaxialForMostProbableParameters[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := 
       Module[{$CellContext`c1, $CellContext`c2, $CellContext`mod, \
$CellContext`f, $CellContext`cod}, $CellContext`mod = $CellContext`oid - \
$CellContext`d - $CellContext`mid; If[$CellContext`mod < 0., 
           Message[
            
            MessageName[$CellContext`settleRemainedParaxialParameters, 
             "meybepositive"], $CellContext`paraxialObjectDistance]]; \
$CellContext`c1 = ($CellContext`beta $CellContext`d + $CellContext`n \
($CellContext`beta $CellContext`mod + $CellContext`mid))/((($CellContext`beta \
($CellContext`n - 
              1.)) $CellContext`d) $CellContext`mod); $CellContext`c2 = \
(-($CellContext`d + $CellContext`n ($CellContext`beta $CellContext`mod + \
$CellContext`mid)))/((($CellContext`n - 
             1.) $CellContext`d) $CellContext`mid); $CellContext`f = \
(((-$CellContext`beta) $CellContext`n) $CellContext`mid) \
($CellContext`mod/($CellContext`n $CellContext`mid + $CellContext`beta \
($CellContext`d + ($CellContext`beta $CellContext`n) $CellContext`mod))); 
         If[$CellContext`mod < 0., 
           Message[
            
            MessageName[$CellContext`settleRemainedParaxialParameters, 
             "meybepositive"], $CellContext`focalLength]]; $CellContext`cod = \
($CellContext`c1 + $CellContext`c2)/($CellContext`c1 - $CellContext`c2); \
{$CellContext`frontSurfaceCurvature -> $CellContext`c1, \
$CellContext`backSurfaceCurvature -> $CellContext`c2, \
$CellContext`focalLength -> $CellContext`f, \
$CellContext`paraxialObjectDistance -> $CellContext`mod, \
$CellContext`coddingtonShapeFactor -> $CellContext`cod, \
$CellContext`paraxialDistanceBetweenObjectAndPrincipal -> $CellContext`mod - \
$CellContext`objectPrincipalPlanePosition[$CellContext`c1, $CellContext`c2, \
$CellContext`n, $CellContext`d], \
$CellContext`paraxialDistanceBetweenPrincipalAndImage -> $CellContext`mid - \
$CellContext`imagePrincipalPlanePosition[$CellContext`c1, $CellContext`c2, \
$CellContext`n, $CellContext`d], $CellContext`conjugateInfiniteness -> 
           False}], $CellContext`setEqualQ[
         Pattern[$CellContext`a, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]]] := 
       Sort[$CellContext`a] === 
        Sort[$CellContext`b], $CellContext`containedParameter[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := Complement[$CellContext`allParametersForFinite, 
         $CellContext`absentParameter[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`mid, $CellContext`cod, $CellContext`mod, \
$CellContext`oid, $CellContext`beta]], $CellContext`mostProbableParameterList = \
{$CellContext`nParm, $CellContext`dParm, $CellContext`iParm, \
$CellContext`bParm, $CellContext`oiParm}, \
$CellContext`settleRemainedParaxialForFixedFocalLength[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := 
       Module[{$CellContext`sq, $CellContext`mid}, $CellContext`sq = \
(($CellContext`oid - $CellContext`d) $CellContext`beta)^2 + \
(($CellContext`beta^2 - 1.) $CellContext`f)^2 + ((
              2 $CellContext`beta) $CellContext`f) (($CellContext`oid - \
$CellContext`d) ($CellContext`beta^2 + 1.) + (
               2. $CellContext`beta) ($CellContext`d/$CellContext`n)); 
         If[$CellContext`sq < 0., 
           Message[
            
            MessageName[$CellContext`settleRemainedParaxialParameters, 
             "inconsistent"], 
            
            Return[$Failed]]]; $CellContext`mid = ((
              1 - $CellContext`beta^2) $CellContext`f + $CellContext`beta \
($CellContext`oid - $CellContext`d) + Sqrt[$CellContext`sq])/(
           2 $CellContext`beta); If[$CellContext`mid < 0., 
           Message[
            
            MessageName[$CellContext`settleRemainedParaxialParameters, 
             "meybepositive"], $CellContext`paraxialWorkingDistance]]; 
         Flatten[{$CellContext`paraxialWorkingDistance -> $CellContext`mid, 
            $CellContext`settleRemainedParaxialForMostProbableParameters[$\
CellContext`d, $CellContext`n, $CellContext`mid, $CellContext`oid, \
$CellContext`beta]}]], $CellContext`fixedFocalLengthParameterList = \
{$CellContext`nParm, $CellContext`dParm, $CellContext`fParm, \
$CellContext`bParm, $CellContext`oiParm}, \
$CellContext`settleRemainedParaxialForlackOfOIAndWD[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := 
       Module[{$CellContext`mid, $CellContext`oid}, $CellContext`mid = \
(-(($CellContext`beta $CellContext`f) (($CellContext`beta $CellContext`n) \
$CellContext`mod + $CellContext`d)))/($CellContext`n ($CellContext`beta \
$CellContext`mod + $CellContext`f)); If[$CellContext`mid < 0., 
           Message[
            
            MessageName[$CellContext`settleRemainedParaxialParameters, 
             "meybepositive"], $CellContext`paraxialWorkingDistance]]; \
$CellContext`oid = $CellContext`d + $CellContext`mod + $CellContext`mid; 
         Flatten[{$CellContext`paraxialWorkingDistance -> $CellContext`mid, \
$CellContext`paraxialObjectImageDistance -> $CellContext`oid, 
            $CellContext`settleRemainedParaxialForMostProbableParameters[$\
CellContext`d, $CellContext`n, $CellContext`mid, $CellContext`oid, \
$CellContext`beta]}]], $CellContext`lackOfOIAndWDParameterList = \
{$CellContext`nParm, $CellContext`dParm, $CellContext`fParm, \
$CellContext`bParm, $CellContext`oParm}, \
$CellContext`settleRemainedParaxialForlackOfOIAndOD[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := 
       Module[{$CellContext`mod, $CellContext`oid}, $CellContext`mod = \
(-$CellContext`f) (($CellContext`n $CellContext`mid + $CellContext`beta \
$CellContext`d)/(($CellContext`beta $CellContext`n) ($CellContext`mid + \
$CellContext`beta $CellContext`f))); If[$CellContext`mod < 0., 
           Message[
            
            MessageName[$CellContext`settleRemainedParaxialParameters, 
             "meybepositive"], $CellContext`paraxialObjectDistance]]; \
$CellContext`oid = $CellContext`d + $CellContext`mod + $CellContext`mid; 
         Flatten[{$CellContext`paraxialWorkingDistance -> $CellContext`mid, \
$CellContext`paraxialObjectImageDistance -> $CellContext`oid, 
            $CellContext`settleRemainedParaxialForMostProbableParameters[$\
CellContext`d, $CellContext`n, $CellContext`mid, $CellContext`oid, \
$CellContext`beta]}]], $CellContext`lackOfOIAndODParameterList = \
{$CellContext`nParm, $CellContext`dParm, $CellContext`fParm, \
$CellContext`bParm, $CellContext`iParm}, $CellContext`$marginRatio = 
       1.02, $CellContext`biasphericAplanatSolve[
         Pattern[$CellContext`parameters, 
          BlankSequence[
          Rule]]] := \
$CellContext`biasphericAplanatSolve[{$CellContext`parameters}], \
$CellContext`biasphericAplanatSolve[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`wl, $CellContext`ml, $CellContext`na, \
$CellContext`iconj, $CellContext`cgi, $CellContext`cgo}, $CellContext`iconj = 
          ReplaceAll[$CellContext`conjugateInfiniteness, \
$CellContext`parameters]; If[
           Not[
            TrueQ[
             Element[$CellContext`iconj, Booleans]]], Message[
             MessageName[$CellContext`biasphericAplanatSolve, "usesetup"]]; 
           Return[$CellContext`parameters]]; $CellContext`wl = 
          ReplaceAll[$CellContext`designWavelength, $CellContext`parameters]; 
         If[
           Not[
            NumericQ[$CellContext`wl]], Message[
             MessageName[$CellContext`biasphericAplanatSolve, "usesetup"]]; 
           Return[$CellContext`parameters]]; $CellContext`ml = 
          ReplaceAll[$CellContext`lensMediumSymbol, $CellContext`parameters]; 
         If[
           Not[
            $CellContext`mediumQ[$CellContext`ml]], Message[
             MessageName[$CellContext`biasphericAplanatSolve, "usesetup"]]; 
           Return[$CellContext`parameters]]; $CellContext`na = 
          ReplaceAll[$CellContext`numericalApertureTarget, \
$CellContext`parameters]; If[
           Not[
            NumericQ[$CellContext`na]], Message[
             MessageName[$CellContext`biasphericAplanatSolve, "usesetup"]]; 
           Return[$CellContext`parameters]]; $CellContext`cgi = 
          ReplaceAll[$CellContext`coverGlassExistence, \
$CellContext`parameters]; If[
           Not[$CellContext`iconj], $CellContext`cgo = 
           ReplaceAll[$CellContext`objectSideCoverGlassExistence, \
$CellContext`parameters]]; $CellContext`branchSolver[$CellContext`iconj, \
$CellContext`cgi, $CellContext`cgo, $CellContext`parameters]], 
       TagSet[$CellContext`biasphericAplanatSolve, 
        MessageName[$CellContext`biasphericAplanatSolve, "usesetup"], 
        "use 'setupBiasphericAplanatParameters' function to set parameter \
arguments."], $CellContext`branchSolver[
         Pattern[$CellContext`iconj, 
          Blank[]], 
         Pattern[$CellContext`cgi, 
          Blank[]], 
         Pattern[$CellContext`cgo, 
          Blank[]], 
         Pattern[$CellContext`parameters, 
          Blank[]]] := 
       Switch[{$CellContext`iconj, $CellContext`cgi, $CellContext`cgo}, {
         True, False, 
          Blank[]}, 
         $CellContext`biasphericAplanatSolveInfinite[$CellContext`parameters],\
 {True, True, 
          Blank[]}, 
         $CellContext`biasphericAplanatSolveInfiniteWithCoverGlass[$\
CellContext`parameters], {False, False, False}, 
         $CellContext`biasphericAplanatSolveFinite[$CellContext`parameters], {
         False, True, False}, 
         $CellContext`biasphericAplanatSolveFiniteWithImageCoverGlass[$\
CellContext`parameters], {False, False, True}, 
         $CellContext`biasphericAplanatSolveFiniteWithObjectCoverGlass[$\
CellContext`parameters], {False, True, True}, 
         $CellContext`\
biasphericAplanatSolveFiniteWithBothImageAndObjectCoverGlass[$CellContext`\
parameters]], $CellContext`biasphericAplanatSolveInfinite[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`mr, \
$CellContext`na, $CellContext`n, $CellContext`d, $CellContext`m, \
$CellContext`f, $CellContext`shps, $CellContext`secpnts, $CellContext`ana}, \
{$CellContext`mr, $CellContext`na, $CellContext`n, $CellContext`d, \
$CellContext`m} = $CellContext`commonParameters[$CellContext`parameters]; \
$CellContext`f = 
          ReplaceAll[$CellContext`focalLength, $CellContext`parameters]; \
{$CellContext`x1, $CellContext`x2} = \
$CellContext`SolveInfinite[$CellContext`mr $CellContext`na, $CellContext`n, \
$CellContext`d, $CellContext`m, $CellContext`f, 
            $CellContext`filterNDSolveOptions[$CellContext`parameters]]; \
$CellContext`secpnts = \
$CellContext`interpolationSectionPoints[$CellContext`x1]; $CellContext`ana = 
          ReplaceAll[
           Last[$CellContext`secpnts]/$CellContext`mr, \
$CellContext`parameters]; 
         Flatten[{$CellContext`frontSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               Map[{$CellContext`f #, 
                 $CellContext`x1[#]}& , $CellContext`secpnts]]], \
$CellContext`backSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{# (($CellContext`m - $CellContext`x2[#])/Sqrt[
                  1. - #^2]), $CellContext`x2[#] + $CellContext`d}& , \
$CellContext`secpnts]]], $CellContext`numericalAperture -> $CellContext`ana, \
$CellContext`parameters}]], $CellContext`commonParameters[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       ReplaceAll[{$CellContext`marginRatio, \
$CellContext`numericalApertureTarget, 
          $CellContext`refractiveIndexValue[$CellContext`lensMediumSymbol, \
$CellContext`designWavelength], $CellContext`lensMediumThickness, \
$CellContext`mechanicalImageDistance}, $CellContext`parameters], \
$CellContext`SolveInfinite[
         Pattern[$CellContext`na, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`t, \
$CellContext`sols}, $CellContext`sols = Flatten[
            
            NDSolve[{
             Derivative[
               1][$CellContext`x1][$CellContext`t] == -(((($CellContext`f \
$CellContext`n) $CellContext`t) (-$CellContext`m + $CellContext`f 
                   Sqrt[1 - $CellContext`t^2] + \
$CellContext`x2[$CellContext`t]))/(
                Sqrt[1 - $CellContext`t^2] (-($CellContext`d $CellContext`n) + \
$CellContext`n $CellContext`x1[$CellContext`t] - $CellContext`n \
$CellContext`x2[$CellContext`t] + 
                 Sqrt[-(($CellContext`t^2 (-$CellContext`m + $CellContext`f 
                    Sqrt[1 - $CellContext`t^2] + \
$CellContext`x2[$CellContext`t])^2)/(-1 + $CellContext`t^2)) + \
($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2]))), 
              Derivative[
               1][$CellContext`x2][$CellContext`t] == (($CellContext`t \
($CellContext`m - $CellContext`x2[$CellContext`t])) ($CellContext`m \
$CellContext`n - ($CellContext`f $CellContext`n) 
                 Sqrt[1 - $CellContext`t^2] - $CellContext`n \
$CellContext`x2[$CellContext`t] + 
                 Sqrt[1 - $CellContext`t^2] 
                  Sqrt[-(($CellContext`t^2 (-$CellContext`m + $CellContext`f 
                    Sqrt[1 - $CellContext`t^2] + \
$CellContext`x2[$CellContext`t])^2)/(-1 + $CellContext`t^2)) + \
($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2]))/((-1 + $CellContext`t^2) \
($CellContext`d $CellContext`n - ($CellContext`d $CellContext`n) \
$CellContext`t^2 - ($CellContext`m $CellContext`n) $CellContext`t^2 + \
(($CellContext`f $CellContext`n) $CellContext`t^2) 
                 Sqrt[1 - $CellContext`t^2] - $CellContext`n \
$CellContext`x1[$CellContext`t] + ($CellContext`n $CellContext`t^2) \
$CellContext`x1[$CellContext`t] + $CellContext`n \
$CellContext`x2[$CellContext`t] - Sqrt[1 - $CellContext`t^2] 
                Sqrt[-(($CellContext`t^2 (-$CellContext`m + $CellContext`f 
                    Sqrt[1 - $CellContext`t^2] + \
$CellContext`x2[$CellContext`t])^2)/(-1 + $CellContext`t^2)) + \
($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2])), $CellContext`x1[0] == 
              0, $CellContext`x2[0] == 
              0}, {$CellContext`x1, $CellContext`x2}, {$CellContext`t, 
              0, $CellContext`na}, $CellContext`opt]]; {
           ReplaceAll[$CellContext`x1, $CellContext`sols], 
           ReplaceAll[$CellContext`x2, $CellContext`sols]}], 
       Attributes[Derivative] = {NHoldAll}, $CellContext`filterNDSolveOptions[
        
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := Apply[Sequence, 
         FilterRules[$CellContext`parameters, 
          Options[NDSolve]]], $CellContext`interpolationSectionPoints[
         Pattern[$CellContext`itf, 
          Blank[InterpolatingFunction]]] := Flatten[
         Part[$CellContext`itf, 3]], $CellContext`mirroredData[
         Pattern[$CellContext`l, {
           RepeatedNull[{
             Blank[], 
             Blank[]}]}]] := Union[
         Join[
          Map[{-Part[#, 1], 
            Part[#, 2]}& , $CellContext`l], $CellContext`l], 
         SameTest -> (Abs[Part[#, 1] - Part[#2, 1]] < 
          10^(-10)& )], \
$CellContext`biasphericAplanatSolveInfiniteWithCoverGlass[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`mr, \
$CellContext`na, $CellContext`n, $CellContext`d, $CellContext`m, \
$CellContext`f, $CellContext`dc, $CellContext`mc, $CellContext`nc, \
$CellContext`shps, $CellContext`secpnts, $CellContext`ana}, {$CellContext`mr, \
$CellContext`na, $CellContext`n, $CellContext`d, $CellContext`m} = \
$CellContext`commonParameters[$CellContext`parameters]; $CellContext`f = 
          ReplaceAll[$CellContext`focalLength, $CellContext`parameters]; \
$CellContext`dc = 
          ReplaceAll[$CellContext`coverGlassThickness, \
$CellContext`parameters]; $CellContext`mc = 
          ReplaceAll[$CellContext`coverGlassMediumSymbol, \
$CellContext`parameters]; $CellContext`nc = \
$CellContext`refractiveIndexValue[$CellContext`mc, 
            
            ReplaceAll[$CellContext`designWavelength, \
$CellContext`parameters]]; {$CellContext`x1, $CellContext`x2} = \
$CellContext`SolveInfiniteWithCoverGlass[$CellContext`mr $CellContext`na, \
$CellContext`n, $CellContext`d, $CellContext`m, $CellContext`f, \
$CellContext`dc, $CellContext`nc, 
            $CellContext`filterNDSolveOptions[$CellContext`parameters]]; \
$CellContext`secpnts = \
$CellContext`interpolationSectionPoints[$CellContext`x1]; $CellContext`ana = 
          ReplaceAll[
           Last[$CellContext`secpnts]/$CellContext`mr, \
$CellContext`parameters]; 
         Flatten[{$CellContext`frontSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               Map[{$CellContext`f #, 
                 $CellContext`x1[#]}& , $CellContext`secpnts]]], \
$CellContext`backSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{# ($CellContext`dc (-(1/Sqrt[1 - #^2]) + 
                    1/Sqrt[-#^2 + $CellContext`nc^2]) + ($CellContext`m - \
$CellContext`x2[#])/Sqrt[
                   1 - #^2]), $CellContext`d + $CellContext`x2[#]}& , \
$CellContext`secpnts]]], $CellContext`numericalAperture -> $CellContext`ana, \
$CellContext`parameters}]], $CellContext`SolveInfiniteWithCoverGlass[
         Pattern[$CellContext`na, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`dc, 
          Blank[]], 
         Pattern[$CellContext`nc, 
          Blank[]], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`t, \
$CellContext`sols}, $CellContext`sols = Flatten[
            
            NDSolve[{
             Derivative[
               1][$CellContext`x1][$CellContext`t] == ((($CellContext`f \
$CellContext`n) $CellContext`t) (-$CellContext`f + ($CellContext`m - \
$CellContext`dc)/Sqrt[1 - $CellContext`t^2] + $CellContext`dc/(
                  Sqrt[1 - $CellContext`t^2/$CellContext`nc^2] \
$CellContext`nc) - $CellContext`x2[$CellContext`t]/Sqrt[
                 
                 1 - $CellContext`t^2]))/(-($CellContext`n ($CellContext`d - \
$CellContext`x1[$CellContext`t] + $CellContext`x2[$CellContext`t])) + 
               Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + $CellContext`t^2 ($CellContext`f + \
(-$CellContext`m + $CellContext`dc)/Sqrt[
                    1 - $CellContext`t^2] - $CellContext`dc/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2] \
$CellContext`nc) + $CellContext`x2[$CellContext`t]/Sqrt[
                    1 - $CellContext`t^2])^2]), 
              Derivative[
               1][$CellContext`x2][$CellContext`t] == -((($CellContext`t \
(($CellContext`m - $CellContext`dc)/(1 - $CellContext`t^2)^(3/
                    2) + ($CellContext`t^2 $CellContext`dc)/((
                    1 - $CellContext`t^2/$CellContext`nc^2)^(3/
                    2) $CellContext`nc^3) + $CellContext`dc/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2] \
$CellContext`nc) - $CellContext`x2[$CellContext`t]/(1 - $CellContext`t^2)^(3/
                    2))) ($CellContext`f $CellContext`n + ($CellContext`n \
(-$CellContext`m + $CellContext`dc))/Sqrt[
                   1 - $CellContext`t^2] - ($CellContext`n $CellContext`dc)/(
                  Sqrt[1 - $CellContext`t^2/$CellContext`nc^2] \
$CellContext`nc) + ($CellContext`n $CellContext`x2[$CellContext`t])/Sqrt[
                   1 - $CellContext`t^2] - 
                  Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + $CellContext`t^2 ($CellContext`f + \
(-$CellContext`m + $CellContext`dc)/Sqrt[
                    1 - $CellContext`t^2] - $CellContext`dc/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2] \
$CellContext`nc) + $CellContext`x2[$CellContext`t]/Sqrt[
                    1 - $CellContext`t^2])^2]))/(-($CellContext`n \
($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])) + (($CellContext`n $CellContext`t^2) \
(-$CellContext`f + ($CellContext`m - $CellContext`dc)/Sqrt[
                    1 - $CellContext`t^2] + $CellContext`dc/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2] \
$CellContext`nc) - $CellContext`x2[$CellContext`t]/Sqrt[
                   1 - $CellContext`t^2]))/Sqrt[1 - $CellContext`t^2] + 
                
                Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + $CellContext`t^2 ($CellContext`f + \
(-$CellContext`m + $CellContext`dc)/Sqrt[
                    1 - $CellContext`t^2] - $CellContext`dc/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2] \
$CellContext`nc) + $CellContext`x2[$CellContext`t]/Sqrt[
                    1 - $CellContext`t^2])^2]/Sqrt[
                 1 - $CellContext`t^2])), $CellContext`x1[0] == 
              0, $CellContext`x2[0] == 
              0}, {$CellContext`x1, $CellContext`x2}, {$CellContext`t, 
              0, $CellContext`na}, $CellContext`opt]]; {
           ReplaceAll[$CellContext`x1, $CellContext`sols], 
           
           ReplaceAll[$CellContext`x2, $CellContext`sols]}], \
$CellContext`biasphericAplanatSolveFinite[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`mr, \
$CellContext`na, $CellContext`n, $CellContext`d, $CellContext`m1, \
$CellContext`m2, $CellContext`oi, $CellContext`beta, $CellContext`shps, \
$CellContext`secpnts, $CellContext`ana}, {$CellContext`mr, $CellContext`na, \
$CellContext`n, $CellContext`d, $CellContext`m2} = \
$CellContext`commonParameters[$CellContext`parameters]; $CellContext`oi = 
          ReplaceAll[$CellContext`mechanicalObjectImageDistance, \
$CellContext`parameters]; $CellContext`m1 = If[
            
            NumericQ[$CellContext`oi], $CellContext`oi - $CellContext`m2 - \
$CellContext`d, 
            
            ReplaceAll[$CellContext`mechanicalObjectDistance, \
$CellContext`parameters]]; $CellContext`beta = 
          ReplaceAll[-$CellContext`lateralMagnification, \
$CellContext`parameters]; {$CellContext`x1, $CellContext`x2} = \
$CellContext`SolveFinite[($CellContext`mr $CellContext`na) $CellContext`beta, \
$CellContext`n, $CellContext`d, $CellContext`m1, $CellContext`m2, \
$CellContext`beta, 
            $CellContext`filterNDSolveOptions[$CellContext`parameters]]; \
$CellContext`secpnts = \
$CellContext`interpolationSectionPoints[$CellContext`x1]; $CellContext`ana = 
          ReplaceAll[(
             Last[$CellContext`secpnts]/$CellContext`mr)/$CellContext`beta, \
$CellContext`parameters]; 
         Flatten[{$CellContext`frontSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{(# ($CellContext`m1 + $CellContext`x1[#]))/Sqrt[
                 1 - #^2], 
                 $CellContext`x1[#]}& , $CellContext`secpnts]]], \
$CellContext`backSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{(# ($CellContext`m2 - $CellContext`x2[#]))/
                 Sqrt[-#^2 + $CellContext`beta^2], $CellContext`d + \
$CellContext`x2[#]}& , $CellContext`secpnts]]], \
$CellContext`numericalAperture -> $CellContext`ana, \
$CellContext`parameters}]], $CellContext`SolveFinite[
         Pattern[$CellContext`na, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`m1, 
          Blank[]], 
         Pattern[$CellContext`m2, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`t, \
$CellContext`sols}, $CellContext`sols = Flatten[
            
            NDSolve[{
             Derivative[
               1][$CellContext`x1][$CellContext`t] == -((($CellContext`m1 + \
$CellContext`x1[$CellContext`t]) (-($CellContext`n (-(($CellContext`t \
$CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2]) + ($CellContext`t \
$CellContext`m2)/(Sqrt[
                    1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))) + $CellContext`t 
                   Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t $CellContext`m2)/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + ($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2]))/((1 - $CellContext`t^2)^(3/
                  2) (-($CellContext`n ($CellContext`d - \
$CellContext`x1[$CellContext`t] + $CellContext`x2[$CellContext`t])) - \
(($CellContext`n $CellContext`t) (-(($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2]) + ($CellContext`t \
$CellContext`m2)/(Sqrt[
                    1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                   1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta)))/Sqrt[1 - $CellContext`t^2] + 
                 Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t $CellContext`m2)/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + ($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2]/Sqrt[1 - $CellContext`t^2]))), 
              Derivative[
               1][$CellContext`x2][$CellContext`t] == -((($CellContext`beta^2 \
($CellContext`m2 - $CellContext`x2[$CellContext`t])) (-($CellContext`n \
(-(($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2]) + ($CellContext`t \
$CellContext`m2)/(Sqrt[
                    1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))) - ($CellContext`t 
                   Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t $CellContext`m2)/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + ($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2])/$CellContext`beta))/((-$CellContext`t^2 + \
$CellContext`beta^2)^(3/
                  2) (-($CellContext`n ($CellContext`d - \
$CellContext`x1[$CellContext`t] + $CellContext`x2[$CellContext`t])) + \
(($CellContext`n $CellContext`t^2) ((
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) $CellContext`m1 - 
                    Sqrt[1 - $CellContext`t^2] $CellContext`m2 + (
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) $CellContext`x1[$CellContext`t] + 
                    Sqrt[1 - $CellContext`t^2] \
$CellContext`x2[$CellContext`t]))/(
                  Sqrt[1 - $CellContext`t^2] ($CellContext`t^2 - \
$CellContext`beta^2)) + 
                 Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t $CellContext`m2)/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + ($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2]/Sqrt[
                  1 - $CellContext`t^2/$CellContext`beta^2]))), \
$CellContext`x1[0] == 0, $CellContext`x2[0] == 
              0}, {$CellContext`x1, $CellContext`x2}, {$CellContext`t, 
              0, $CellContext`na}, $CellContext`opt]]; {
           ReplaceAll[$CellContext`x1, $CellContext`sols], 
           
           ReplaceAll[$CellContext`x2, $CellContext`sols]}], \
$CellContext`biasphericAplanatSolveFiniteWithImageCoverGlass[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`mr, \
$CellContext`na, $CellContext`n, $CellContext`d, $CellContext`m1, \
$CellContext`m2, $CellContext`oi, $CellContext`beta, $CellContext`mc, \
$CellContext`dc, $CellContext`nc, $CellContext`shps, $CellContext`secpnts, \
$CellContext`ana}, {$CellContext`mr, $CellContext`na, $CellContext`n, \
$CellContext`d, $CellContext`m2} = \
$CellContext`commonParameters[$CellContext`parameters]; $CellContext`oi = 
          ReplaceAll[$CellContext`mechanicalObjectImageDistance, \
$CellContext`parameters]; $CellContext`m1 = If[
            
            NumericQ[$CellContext`oi], $CellContext`oi - $CellContext`m2 - \
$CellContext`d, 
            
            ReplaceAll[$CellContext`mechanicalObjectDistance, \
$CellContext`parameters]]; $CellContext`beta = 
          ReplaceAll[-$CellContext`lateralMagnification, \
$CellContext`parameters]; $CellContext`dc = 
          ReplaceAll[$CellContext`coverGlassThickness, \
$CellContext`parameters]; $CellContext`mc = 
          ReplaceAll[$CellContext`coverGlassMediumSymbol, \
$CellContext`parameters]; $CellContext`nc = \
$CellContext`refractiveIndexValue[$CellContext`mc, 
            
            ReplaceAll[$CellContext`designWavelength, \
$CellContext`parameters]]; {$CellContext`x1, $CellContext`x2} = \
$CellContext`SolveFiniteWithCoverGlass[($CellContext`mr $CellContext`na) \
$CellContext`beta, $CellContext`n, $CellContext`d, $CellContext`m1, \
$CellContext`m2, $CellContext`beta, $CellContext`dc, $CellContext`nc, 
            $CellContext`filterNDSolveOptions[$CellContext`parameters]]; \
$CellContext`secpnts = \
$CellContext`interpolationSectionPoints[$CellContext`x1]; $CellContext`ana = 
          ReplaceAll[(
             Last[$CellContext`secpnts]/$CellContext`mr)/$CellContext`beta, \
$CellContext`parameters]; 
         Flatten[{$CellContext`frontSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{(# ($CellContext`m1 + $CellContext`x1[#]))/Sqrt[
                 1 - #^2], 
                 $CellContext`x1[#]}& , $CellContext`secpnts]]], \
$CellContext`backSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{# ($CellContext`dc (-(1/Sqrt[-#^2 + $CellContext`beta^2]) + 
                    1/Sqrt[-#^2 + $CellContext`beta^2 $CellContext`nc^2]) + \
($CellContext`m2 - $CellContext`x2[#])/
                   Sqrt[-#^2 + $CellContext`beta^2]), $CellContext`d + \
$CellContext`x2[#]}& , $CellContext`secpnts]]], \
$CellContext`numericalAperture -> $CellContext`ana, \
$CellContext`parameters}]], $CellContext`SolveFiniteWithCoverGlass[
         Pattern[$CellContext`na, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`m1, 
          Blank[]], 
         Pattern[$CellContext`m2, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]], 
         Pattern[$CellContext`dc, 
          Blank[]], 
         Pattern[$CellContext`nc, 
          Blank[]], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`t, \
$CellContext`sols}, $CellContext`sols = Flatten[
            
            NDSolve[{
             Derivative[
               1][$CellContext`x1][$CellContext`t] == -((($CellContext`m1 + \
$CellContext`x1[$CellContext`t]) ((($CellContext`n $CellContext`t) \
$CellContext`m1)/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
($CellContext`dc - $CellContext`m2))/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - (($CellContext`n $CellContext`t) \
$CellContext`dc)/(($CellContext`beta 
                   Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc^2)]) $CellContext`nc) + (($CellContext`n $CellContext`t) \
$CellContext`x1[$CellContext`t])/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
$CellContext`x2[$CellContext`t])/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + $CellContext`t 
                   Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t ($CellContext`dc - \
$CellContext`m2))/(Sqrt[
                    1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc^2)]) $CellContext`nc) + ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2]))/((1 - $CellContext`t^2)^(3/
                  2) (-($CellContext`n ($CellContext`d - \
$CellContext`x1[$CellContext`t] + $CellContext`x2[$CellContext`t])) - \
(($CellContext`n $CellContext`t) (-(($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2]) + ($CellContext`t \
(-$CellContext`dc + $CellContext`m2))/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + ($CellContext`t $CellContext`dc)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc^2)]) $CellContext`nc) - ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                   1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta)))/Sqrt[1 - $CellContext`t^2] + 
                 Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t ($CellContext`dc - \
$CellContext`m2))/(Sqrt[
                    1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc^2)]) $CellContext`nc) + ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2]/Sqrt[1 - $CellContext`t^2]))), 
              Derivative[
               1][$CellContext`x2][$CellContext`t] == -((($CellContext`beta^2 \
($CellContext`m2 - ($CellContext`dc ($CellContext`t^4 - ((
                    2 $CellContext`t^2) $CellContext`beta^2) \
$CellContext`nc^2 + (((Sqrt[
                    1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta^2) ($CellContext`t^2 - $CellContext`beta^2)) 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc^2)]) $CellContext`nc^3 + $CellContext`beta^4 \
$CellContext`nc^4))/($CellContext`t^2 - $CellContext`beta^2 \
$CellContext`nc^2)^2 - $CellContext`x2[$CellContext`t])) ((($CellContext`n \
$CellContext`t) $CellContext`m1)/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
($CellContext`dc - $CellContext`m2))/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - (($CellContext`n $CellContext`t) \
$CellContext`dc)/(($CellContext`beta 
                   Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc^2)]) $CellContext`nc) + (($CellContext`n $CellContext`t) \
$CellContext`x1[$CellContext`t])/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
$CellContext`x2[$CellContext`t])/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t 
                   Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t ($CellContext`dc - \
$CellContext`m2))/(Sqrt[
                    1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc)/(($CellContext`beta 
                    Sqrt[
                    1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc^2)]) $CellContext`nc) + ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2])/$CellContext`beta))/((-$CellContext`t^2 + \
$CellContext`beta^2)^(3/
                  2) (-($CellContext`n ($CellContext`d - \
$CellContext`x1[$CellContext`t] + $CellContext`x2[$CellContext`t])) + \
(($CellContext`n $CellContext`t) (-(($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2]) + ($CellContext`t \
(-$CellContext`dc + $CellContext`m2))/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + ($CellContext`t $CellContext`dc)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc^2)]) $CellContext`nc) - ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta)))/(
                  Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + 
                 Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t ($CellContext`dc - \
$CellContext`m2))/(Sqrt[
                    1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc^2)]) $CellContext`nc) + ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2]/Sqrt[
                  1 - $CellContext`t^2/$CellContext`beta^2]))), \
$CellContext`x1[0] == 0, $CellContext`x2[0] == 
              0}, {$CellContext`x1, $CellContext`x2}, {$CellContext`t, 
              0, $CellContext`na}, $CellContext`opt]]; {
           ReplaceAll[$CellContext`x1, $CellContext`sols], 
           
           ReplaceAll[$CellContext`x2, $CellContext`sols]}], \
$CellContext`biasphericAplanatSolveFiniteWithObjectCoverGlass[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`mr, \
$CellContext`na, $CellContext`n, $CellContext`d, $CellContext`m1, \
$CellContext`m2, $CellContext`oi, $CellContext`beta, $CellContext`mc, \
$CellContext`dc, $CellContext`nc, $CellContext`shps, $CellContext`secpnts, \
$CellContext`ana}, {$CellContext`mr, $CellContext`na, $CellContext`n, \
$CellContext`d, $CellContext`m2} = \
$CellContext`commonParameters[$CellContext`parameters]; $CellContext`oi = 
          ReplaceAll[$CellContext`mechanicalObjectImageDistance, \
$CellContext`parameters]; $CellContext`m1 = If[
            
            NumericQ[$CellContext`oi], $CellContext`oi - $CellContext`m2 - \
$CellContext`d, 
            
            ReplaceAll[$CellContext`mechanicalObjectDistance, \
$CellContext`parameters]]; $CellContext`beta = 
          ReplaceAll[-$CellContext`lateralMagnification, \
$CellContext`parameters]; $CellContext`dc = 
          ReplaceAll[$CellContext`objectSideCoverGlassThickness, \
$CellContext`parameters]; $CellContext`mc = 
          ReplaceAll[$CellContext`objectSideCoverGlassMediumSymbol, \
$CellContext`parameters]; $CellContext`nc = \
$CellContext`refractiveIndexValue[$CellContext`mc, 
            
            ReplaceAll[$CellContext`designWavelength, \
$CellContext`parameters]]; {$CellContext`x1, $CellContext`x2} = \
$CellContext`SolveFiniteWithObjectSpaceCoverGlass[($CellContext`mr \
$CellContext`na) $CellContext`beta, $CellContext`n, $CellContext`d, \
$CellContext`m1, $CellContext`m2, $CellContext`beta, $CellContext`dc, \
$CellContext`nc, 
            $CellContext`filterNDSolveOptions[$CellContext`parameters]]; \
$CellContext`secpnts = \
$CellContext`interpolationSectionPoints[$CellContext`x1]; $CellContext`ana = 
          ReplaceAll[(
             Last[$CellContext`secpnts]/$CellContext`mr)/$CellContext`beta, \
$CellContext`parameters]; 
         Flatten[{$CellContext`frontSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{# ((-(1/Sqrt[1 - #^2]) + 
                    1/Sqrt[$CellContext`nc^2 - #^2]) $CellContext`dc + \
($CellContext`m1 + $CellContext`x1[#])/Sqrt[1 - #^2]), 
                 $CellContext`x1[#]}& , $CellContext`secpnts]]], \
$CellContext`backSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{(# ($CellContext`m2 - $CellContext`x2[#]))/
                 Sqrt[$CellContext`beta^2 - #^2], $CellContext`d + \
$CellContext`x2[#]}& , $CellContext`secpnts]]], \
$CellContext`numericalAperture -> $CellContext`ana, \
$CellContext`parameters}]], $CellContext`SolveFiniteWithObjectSpaceCoverGlass[
        
         Pattern[$CellContext`na, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`m1, 
          Blank[]], 
         Pattern[$CellContext`m2, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]], 
         Pattern[$CellContext`dc, 
          Blank[]], 
         Pattern[$CellContext`nc, 
          Blank[]], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`t, \
$CellContext`sols}, $CellContext`sols = Flatten[
            
            NDSolve[{
             Derivative[
               1][$CellContext`x1][$CellContext`t] == -((((-$CellContext`dc + \
$CellContext`m1)/(1 - $CellContext`t^2)^(3/
                    2) + ($CellContext`dc \
$CellContext`t^2)/($CellContext`nc^3 (
                    1 - $CellContext`t^2/$CellContext`nc^2)^(3/
                    2)) + $CellContext`dc/($CellContext`nc 
                   Sqrt[1 - $CellContext`t^2/$CellContext`nc^2]) + \
$CellContext`x1[$CellContext`t]/(1 - $CellContext`t^2)^(3/
                    
                    2)) ((((-$CellContext`dc + $CellContext`m1) \
$CellContext`n) $CellContext`t)/Sqrt[
                   1 - $CellContext`t^2] - (($CellContext`m2 $CellContext`n) \
$CellContext`t)/($CellContext`beta 
                  Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) + \
(($CellContext`dc $CellContext`n) $CellContext`t)/($CellContext`nc 
                   Sqrt[1 - $CellContext`t^2/$CellContext`nc^2]) + \
(($CellContext`n $CellContext`t) $CellContext`x1[$CellContext`t])/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
$CellContext`x2[$CellContext`t])/($CellContext`beta 
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) + \
$CellContext`t 
                   Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (((-$CellContext`dc + $CellContext`m1) \
$CellContext`t)/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`m2 \
$CellContext`t)/($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) + \
($CellContext`dc $CellContext`t)/($CellContext`nc 
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2]) + \
($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/($CellContext`beta 
                    Sqrt[1 - \
$CellContext`t^2/$CellContext`beta^2]))^2]))/(-($CellContext`n \
($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])) - (($CellContext`n $CellContext`t) \
((($CellContext`dc - $CellContext`m1) $CellContext`t)/Sqrt[
                   1 - $CellContext`t^2] + ($CellContext`m2 \
$CellContext`t)/($CellContext`beta 
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) - \
($CellContext`dc $CellContext`t)/($CellContext`nc 
                  Sqrt[1 - $CellContext`t^2/$CellContext`nc^2]) - \
($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                  1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/($CellContext`beta 
                  Sqrt[1 - $CellContext`t^2/$CellContext`beta^2])))/Sqrt[
                1 - $CellContext`t^2] + 
                Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (((-$CellContext`dc + $CellContext`m1) \
$CellContext`t)/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`m2 \
$CellContext`t)/($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) + \
($CellContext`dc $CellContext`t)/($CellContext`nc 
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2]) + \
($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]))^2]/Sqrt[
                 1 - $CellContext`t^2])), 
              Derivative[
               1][$CellContext`x2][$CellContext`t] == -((($CellContext`beta^2 \
($CellContext`m2 - $CellContext`x2[$CellContext`t])) ((((-$CellContext`dc + \
$CellContext`m1) $CellContext`n) $CellContext`t)/Sqrt[
                   1 - $CellContext`t^2] - (($CellContext`m2 $CellContext`n) \
$CellContext`t)/($CellContext`beta 
                  Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) + \
(($CellContext`dc $CellContext`n) $CellContext`t)/($CellContext`nc 
                   Sqrt[1 - $CellContext`t^2/$CellContext`nc^2]) + \
(($CellContext`n $CellContext`t) $CellContext`x1[$CellContext`t])/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
$CellContext`x2[$CellContext`t])/($CellContext`beta 
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) - \
($CellContext`t 
                   Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (((-$CellContext`dc + $CellContext`m1) \
$CellContext`t)/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`m2 \
$CellContext`t)/($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) + \
($CellContext`dc $CellContext`t)/($CellContext`nc 
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2]) + \
($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/($CellContext`beta 
                    Sqrt[1 - \
$CellContext`t^2/$CellContext`beta^2]))^2])/$CellContext`beta))/(($\
CellContext`beta^2 - $CellContext`t^2)^(3/
                  2) (-($CellContext`n ($CellContext`d - \
$CellContext`x1[$CellContext`t] + $CellContext`x2[$CellContext`t])) + \
(($CellContext`n $CellContext`t) ((($CellContext`dc - $CellContext`m1) \
$CellContext`t)/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`m2 \
$CellContext`t)/($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) - \
($CellContext`dc $CellContext`t)/($CellContext`nc 
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2]) - \
($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/($CellContext`beta 
                    Sqrt[1 - \
$CellContext`t^2/$CellContext`beta^2])))/($CellContext`beta 
                  Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) + 
                 Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (((-$CellContext`dc + $CellContext`m1) \
$CellContext`t)/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`m2 \
$CellContext`t)/($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) + \
($CellContext`dc $CellContext`t)/($CellContext`nc 
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2]) + \
($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]))^2]/Sqrt[
                  1 - $CellContext`t^2/$CellContext`beta^2]))), \
$CellContext`x1[0] == 0, $CellContext`x2[0] == 
              0}, {$CellContext`x1, $CellContext`x2}, {$CellContext`t, 
              0, $CellContext`na}, $CellContext`opt]]; {
           ReplaceAll[$CellContext`x1, $CellContext`sols], 
           
           ReplaceAll[$CellContext`x2, $CellContext`sols]}], \
$CellContext`biasphericAplanatSolveFiniteWithBothImageAndObjectCoverGlass[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`mr, \
$CellContext`na, $CellContext`n, $CellContext`d, $CellContext`m1, \
$CellContext`m2, $CellContext`oi, $CellContext`beta, $CellContext`mc1, \
$CellContext`dc1, $CellContext`nc1, $CellContext`mc2, $CellContext`nc2, \
$CellContext`dc2, $CellContext`shps, $CellContext`secpnts, $CellContext`ana}, \
{$CellContext`mr, $CellContext`na, $CellContext`n, $CellContext`d, \
$CellContext`m2} = $CellContext`commonParameters[$CellContext`parameters]; \
$CellContext`oi = 
          ReplaceAll[$CellContext`mechanicalObjectImageDistance, \
$CellContext`parameters]; $CellContext`m1 = If[
            
            NumericQ[$CellContext`oi], $CellContext`oi - $CellContext`m2 - \
$CellContext`d, 
            
            ReplaceAll[$CellContext`mechanicalObjectDistance, \
$CellContext`parameters]]; $CellContext`beta = 
          ReplaceAll[-$CellContext`lateralMagnification, \
$CellContext`parameters]; $CellContext`dc2 = 
          ReplaceAll[$CellContext`coverGlassThickness, \
$CellContext`parameters]; $CellContext`mc2 = 
          ReplaceAll[$CellContext`coverGlassMediumSymbol, \
$CellContext`parameters]; $CellContext`nc2 = \
$CellContext`refractiveIndexValue[$CellContext`mc2, 
            
            ReplaceAll[$CellContext`designWavelength, \
$CellContext`parameters]]; $CellContext`dc1 = 
          ReplaceAll[$CellContext`objectSideCoverGlassThickness, \
$CellContext`parameters]; $CellContext`mc1 = 
          ReplaceAll[$CellContext`objectSideCoverGlassMediumSymbol, \
$CellContext`parameters]; $CellContext`nc1 = \
$CellContext`refractiveIndexValue[$CellContext`mc1, 
            
            ReplaceAll[$CellContext`designWavelength, \
$CellContext`parameters]]; {$CellContext`x1, $CellContext`x2} = \
$CellContext`SolveFiniteWithBothSpaceCoverGlass[($CellContext`mr \
$CellContext`na) $CellContext`beta, $CellContext`n, $CellContext`d, \
$CellContext`m1, $CellContext`m2, $CellContext`beta, $CellContext`dc1, \
$CellContext`nc1, $CellContext`dc2, $CellContext`nc2, 
            $CellContext`filterNDSolveOptions[$CellContext`parameters]]; \
$CellContext`secpnts = \
$CellContext`interpolationSectionPoints[$CellContext`x1]; $CellContext`ana = 
          ReplaceAll[(
             Last[$CellContext`secpnts]/$CellContext`mr)/$CellContext`beta, \
$CellContext`parameters]; 
         Flatten[{$CellContext`frontSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{# ($CellContext`dc1/($CellContext`nc1 
                   Sqrt[1 - #^2/$CellContext`nc1^2]) + (-$CellContext`dc1 + \
$CellContext`m1)/Sqrt[1 - #^2] + $CellContext`x1[#]/Sqrt[1 - #^2]), 
                 $CellContext`x1[#]}& , $CellContext`secpnts]]], \
$CellContext`backSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{# ($CellContext`dc2/(($CellContext`beta $CellContext`nc2) 
                   Sqrt[1 - #^2/($CellContext`beta^2 $CellContext`nc2^2)]) + \
(-$CellContext`dc2 + $CellContext`m2)/
                   Sqrt[$CellContext`beta^2 - #^2] - $CellContext`x2[#]/
                  Sqrt[$CellContext`beta^2 - #^2]), $CellContext`d + \
$CellContext`x2[#]}& , $CellContext`secpnts]]], \
$CellContext`numericalAperture -> $CellContext`ana, \
$CellContext`parameters}]], $CellContext`SolveFiniteWithBothSpaceCoverGlass[
         Pattern[$CellContext`na, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`m1, 
          Blank[]], 
         Pattern[$CellContext`m2, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]], 
         Pattern[$CellContext`dc1, 
          Blank[]], 
         Pattern[$CellContext`nc1, 
          Blank[]], 
         Pattern[$CellContext`dc2, 
          Blank[]], 
         Pattern[$CellContext`nc2, 
          Blank[]], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`t, \
$CellContext`sols}, $CellContext`sols = Flatten[
            
            NDSolve[{
             Derivative[
               1][$CellContext`x1][$CellContext`t] == -((((-$CellContext`dc1 + \
$CellContext`m1)/(1 - $CellContext`t^2)^(3/
                    2) + ($CellContext`t^2 $CellContext`dc1)/((
                    1 - $CellContext`t^2/$CellContext`nc1^2)^(3/
                    2) $CellContext`nc1^3) + $CellContext`dc1/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`nc1^2] \
$CellContext`nc1) + $CellContext`x1[$CellContext`t]/(1 - $CellContext`t^2)^(3/
                    2)) ((($CellContext`n $CellContext`t) (-$CellContext`dc1 + \
$CellContext`m1))/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
($CellContext`dc2 - $CellContext`m2))/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + (($CellContext`n $CellContext`t) $CellContext`dc1)/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`nc1^2] \
$CellContext`nc1) - (($CellContext`n $CellContext`t) \
$CellContext`dc2)/(($CellContext`beta 
                   Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc2^2)]) $CellContext`nc2) + (($CellContext`n $CellContext`t) \
$CellContext`x1[$CellContext`t])/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
$CellContext`x2[$CellContext`t])/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + $CellContext`t 
                   Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t ($CellContext`dc1 - \
$CellContext`m1))/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
(-$CellContext`dc2 + $CellContext`m2))/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc1)/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc1^2] \
$CellContext`nc1) + ($CellContext`t $CellContext`dc2)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc2^2)]) $CellContext`nc2) - ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2]))/(-($CellContext`n ($CellContext`d - \
$CellContext`x1[$CellContext`t] + $CellContext`x2[$CellContext`t])) - \
(($CellContext`n $CellContext`t) (($CellContext`t ($CellContext`dc1 - \
$CellContext`m1))/Sqrt[
                   1 - $CellContext`t^2] + ($CellContext`t (-$CellContext`dc2 + \
$CellContext`m2))/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc1)/(
                  Sqrt[1 - $CellContext`t^2/$CellContext`nc1^2] \
$CellContext`nc1) + ($CellContext`t $CellContext`dc2)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc2^2)]) $CellContext`nc2) - ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                  1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                  Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta)))/Sqrt[1 - $CellContext`t^2] + 
                Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t ($CellContext`dc1 - \
$CellContext`m1))/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
(-$CellContext`dc2 + $CellContext`m2))/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc1)/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc1^2] \
$CellContext`nc1) + ($CellContext`t $CellContext`dc2)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc2^2)]) $CellContext`nc2) - ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2]/Sqrt[1 - $CellContext`t^2])), 
              Derivative[
               1][$CellContext`x2][$CellContext`t] == -((($CellContext`beta^2 \
($CellContext`m2 - ($CellContext`dc2 ($CellContext`t^4 - ((
                    2 $CellContext`t^2) $CellContext`beta^2) \
$CellContext`nc2^2 + (((Sqrt[
                    1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta^2) ($CellContext`t^2 - $CellContext`beta^2)) 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc2^2)]) $CellContext`nc2^3 + $CellContext`beta^4 \
$CellContext`nc2^4))/($CellContext`t^2 - $CellContext`beta^2 \
$CellContext`nc2^2)^2 - $CellContext`x2[$CellContext`t])) ((($CellContext`n \
$CellContext`t) (-$CellContext`dc1 + $CellContext`m1))/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
($CellContext`dc2 - $CellContext`m2))/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + (($CellContext`n $CellContext`t) $CellContext`dc1)/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`nc1^2] \
$CellContext`nc1) - (($CellContext`n $CellContext`t) \
$CellContext`dc2)/(($CellContext`beta 
                   Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc2^2)]) $CellContext`nc2) + (($CellContext`n $CellContext`t) \
$CellContext`x1[$CellContext`t])/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
$CellContext`x2[$CellContext`t])/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t 
                   Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t ($CellContext`dc1 - \
$CellContext`m1))/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
(-$CellContext`dc2 + $CellContext`m2))/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc1)/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc1^2] \
$CellContext`nc1) + ($CellContext`t $CellContext`dc2)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc2^2)]) $CellContext`nc2) - ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2])/$CellContext`beta))/((-$CellContext`t^2 + \
$CellContext`beta^2)^(3/
                  2) (-($CellContext`n ($CellContext`d - \
$CellContext`x1[$CellContext`t] + $CellContext`x2[$CellContext`t])) + \
(($CellContext`n $CellContext`t) (($CellContext`t ($CellContext`dc1 - \
$CellContext`m1))/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
(-$CellContext`dc2 + $CellContext`m2))/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc1)/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc1^2] \
$CellContext`nc1) + ($CellContext`t $CellContext`dc2)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc2^2)]) $CellContext`nc2) - ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta)))/(
                  Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + 
                 Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t ($CellContext`dc1 - \
$CellContext`m1))/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
(-$CellContext`dc2 + $CellContext`m2))/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc1)/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc1^2] \
$CellContext`nc1) + ($CellContext`t $CellContext`dc2)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc2^2)]) $CellContext`nc2) - ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2]/Sqrt[
                  1 - $CellContext`t^2/$CellContext`beta^2]))), \
$CellContext`x1[0] == 0, $CellContext`x2[0] == 
              0}, {$CellContext`x1, $CellContext`x2}, {$CellContext`t, 
              0, $CellContext`na}, $CellContext`opt]]; {
           ReplaceAll[$CellContext`x1, $CellContext`sols], 
           
           ReplaceAll[$CellContext`x2, $CellContext`sols]}], \
$CellContext`mediumCatalog[] = {
        "SCHOTTOExtracted"}, $CellContext`mediumCatalog[
        "BAFN10"] = $CellContext`bafn10, $CellContext`mediumCatalog[
        "N-BAK4"] = $CellContext`n$bak4, $CellContext`mediumCatalog[
        "N-BK7"] = $CellContext`n$bk7, $CellContext`mediumCatalog[
        "N-K5"] = $CellContext`n$k5, $CellContext`mediumCatalog[
        "N-LASF9"] = $CellContext`n$lasf9, $CellContext`mediumCatalog[
        "N-SF10"] = $CellContext`n$sf10, $CellContext`mediumCatalog[
        "N-SF11"] = $CellContext`n$sf11, $CellContext`mediumCatalog[
        "N-SF15"] = $CellContext`n$sf15, $CellContext`mediumCatalog[
        "N-SF5"] = $CellContext`n$sf5, $CellContext`mediumCatalog[
        "N-SK2"] = $CellContext`n$sk2, $CellContext`mediumCatalog[
        "SCHOTTOExtracted"] = {
        "N-BK7", "N-K5", "N-SK2", "N-SF15", "N-LASF9", "N-SF11", "N-SF5", 
         "N-SF10", "N-BAK4", "BAFN10", "N-SF5"}, 
       UpSet[
        $CellContext`mediumQ[$CellContext`bafn10], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`bafn10], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            1.0727052/(-108.53942700000002` + 1000000 $CellContext`lambda$^2) + 
            0.123762468/(-0.0451639792 + 1000000 $CellContext`lambda$^2) + 
            1.60477289/(-0.00947021617 + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`bafn10[$CellContext`lambdaDomain] = {0.00033400000000000004`, 
        0.0023250000000000002`}, $CellContext`bafn10[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           1.0727052/(-108.53942700000002` + 1000000 $CellContext`lambda$^2) + 
           0.123762468/(-0.0451639792 + 1000000 $CellContext`lambda$^2) + 
           1.60477289/(-0.00947021617 + 
            1000000 $CellContext`lambda$^2))], \
$CellContext`bafn10[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`bafn10[$CellContext`mediumName] = 
       "BAFN10", $CellContext`bafn10[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`bafn10[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (1.60477289/($CellContext`lsq$ - 0.00947021617) + 
             0.123762468/($CellContext`lsq$ - 0.0451639792) + 
             1.0727052/($CellContext`lsq$ - 
              108.53942700000002`)) $CellContext`lsq$]]], 
       UpSet[
        $CellContext`mediumQ[$CellContext`n$bak4], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`n$bak4], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            0.9453953730000001/(-105.96587500000001` + 
             1000000 $CellContext`lambda$^2) + 
            0.132817724/(-0.0315631177 + 1000000 $CellContext`lambda$^2) + 
            1.28834642/(-0.007799806260000001 + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`n$bak4[$CellContext`lambdaDomain] = {0.00033400000000000004`, 
        0.0025}, $CellContext`n$bak4[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           0.9453953730000001/(-105.96587500000001` + 
            1000000 $CellContext`lambda$^2) + 
           0.132817724/(-0.0315631177 + 1000000 $CellContext`lambda$^2) + 
           1.28834642/(-0.007799806260000001 + 
            1000000 $CellContext`lambda$^2))], \
$CellContext`n$bak4[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`n$bak4[$CellContext`mediumName] = 
       "N-BAK4", $CellContext`n$bak4[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`n$bak4[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (1.28834642/($CellContext`lsq$ - 0.007799806260000001) + 
             0.132817724/($CellContext`lsq$ - 0.0315631177) + 
             0.9453953730000001/($CellContext`lsq$ - 
              105.96587500000001`)) $CellContext`lsq$]]], 
       UpSet[
        $CellContext`mediumQ[$CellContext`n$k5], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`n$k5], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            0.9305116630000001/(-111.98277699999998` + 
             1000000 $CellContext`lambda$^2) + 
            0.19956200500000001`/(-0.024110866 + 
             1000000 $CellContext`lambda$^2) + 
            1.08511833/(-0.00661099503 + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`n$k5[$CellContext`lambdaDomain] = {0.00031000000000000005`, 
        0.0025}, $CellContext`n$k5[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           0.9305116630000001/(-111.98277699999998` + 
            1000000 $CellContext`lambda$^2) + 
           0.19956200500000001`/(-0.024110866 + 
            1000000 $CellContext`lambda$^2) + 
           1.08511833/(-0.00661099503 + 
            1000000 $CellContext`lambda$^2))], \
$CellContext`n$k5[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`n$k5[$CellContext`mediumName] = 
       "N-K5", $CellContext`n$k5[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`n$k5[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (1.08511833/($CellContext`lsq$ - 0.00661099503) + 
             0.19956200500000001`/($CellContext`lsq$ - 0.024110866) + 
             0.9305116630000001/($CellContext`lsq$ - 
              111.98277699999998`)) $CellContext`lsq$]]], 
       UpSet[
        $CellContext`mediumQ[$CellContext`n$lasf9], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`n$lasf9], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            1.80691843/(-156.53082899999998` + 
             1000000 $CellContext`lambda$^2) + 
            0.298926886/(-0.053873623600000003` + 
             1000000 $CellContext`lambda$^2) + 
            2.00029547/(-0.0121426017 + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`n$lasf9[$CellContext`lambdaDomain] = {0.000365, 
        0.0025}, $CellContext`n$lasf9[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           1.80691843/(-156.53082899999998` + 1000000 $CellContext`lambda$^2) + 
           0.298926886/(-0.053873623600000003` + 
            1000000 $CellContext`lambda$^2) + 
           2.00029547/(-0.0121426017 + 
            1000000 $CellContext`lambda$^2))], \
$CellContext`n$lasf9[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`n$lasf9[$CellContext`mediumName] = 
       "N-LASF9", $CellContext`n$lasf9[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`n$lasf9[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (2.00029547/($CellContext`lsq$ - 0.0121426017) + 
             0.298926886/($CellContext`lsq$ - 0.053873623600000003`) + 
             1.80691843/($CellContext`lsq$ - 
              156.53082899999998`)) $CellContext`lsq$]]], 
       UpSet[
        $CellContext`mediumQ[$CellContext`n$sf10], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`n$sf10], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            1.64447552/(-147.468793 + 1000000 $CellContext`lambda$^2) + 
            0.25628784200000004`/(-0.059573677500000005` + 
             1000000 $CellContext`lambda$^2) + 
            1.62153902/(-0.0122241457 + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`n$sf10[$CellContext`lambdaDomain] = {0.00038, 
        0.0025}, $CellContext`n$sf10[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           1.64447552/(-147.468793 + 1000000 $CellContext`lambda$^2) + 
           0.25628784200000004`/(-0.059573677500000005` + 
            1000000 $CellContext`lambda$^2) + 
           1.62153902/(-0.0122241457 + 
            1000000 $CellContext`lambda$^2))], \
$CellContext`n$sf10[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`n$sf10[$CellContext`mediumName] = 
       "N-SF10", $CellContext`n$sf10[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`n$sf10[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (1.62153902/($CellContext`lsq$ - 0.0122241457) + 
             0.25628784200000004`/($CellContext`lsq$ - 0.059573677500000005`) + 
             1.64447552/($CellContext`lsq$ - 
              147.468793)) $CellContext`lsq$]]], 
       UpSet[
        $CellContext`mediumQ[$CellContext`n$sf11], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`n$sf11], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            1.89878101/(-155.23629 + 1000000 $CellContext`lambda$^2) + 
            0.313747346/(-0.0623068142 + 1000000 $CellContext`lambda$^2) + 
            1.73759695/(-0.013188707 + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`n$sf11[$CellContext`lambdaDomain] = {0.00037000000000000005`, 
        0.0025}, $CellContext`n$sf11[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           1.89878101/(-155.23629 + 1000000 $CellContext`lambda$^2) + 
           0.313747346/(-0.0623068142 + 1000000 $CellContext`lambda$^2) + 
           1.73759695/(-0.013188707 + 
            1000000 $CellContext`lambda$^2))], \
$CellContext`n$sf11[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`n$sf11[$CellContext`mediumName] = 
       "N-SF11", $CellContext`n$sf11[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`n$sf11[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (1.73759695/($CellContext`lsq$ - 0.013188707) + 
             0.313747346/($CellContext`lsq$ - 0.0623068142) + 
             1.89878101/($CellContext`lsq$ - 155.23629)) $CellContext`lsq$]]], 
       UpSet[
        $CellContext`mediumQ[$CellContext`n$sf15], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`n$sf15], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            1.50824017/(-132.709339 + 1000000 $CellContext`lambda$^2) + 
            0.21898709400000002`/(-0.059785689700000005` + 
             1000000 $CellContext`lambda$^2) + 
            1.57055634/(-0.011650701400000001` + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`n$sf15[$CellContext`lambdaDomain] = {0.00037000000000000005`, 
        0.0025}, $CellContext`n$sf15[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           1.50824017/(-132.709339 + 1000000 $CellContext`lambda$^2) + 
           0.21898709400000002`/(-0.059785689700000005` + 
            1000000 $CellContext`lambda$^2) + 
           1.57055634/(-0.011650701400000001` + 
            1000000 $CellContext`lambda$^2))], \
$CellContext`n$sf15[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`n$sf15[$CellContext`mediumName] = 
       "N-SF15", $CellContext`n$sf15[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`n$sf15[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (1.57055634/($CellContext`lsq$ - 0.011650701400000001`) + 
             0.21898709400000002`/($CellContext`lsq$ - 0.059785689700000005`) + 
             1.50824017/($CellContext`lsq$ - 
              132.709339)) $CellContext`lsq$]]], 
       UpSet[
        $CellContext`mediumQ[$CellContext`n$sf5], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`n$sf5], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            1.42729015/(-129.141675 + 1000000 $CellContext`lambda$^2) + 
            0.18708552700000003`/(-0.0588995392 + 
             1000000 $CellContext`lambda$^2) + 
            1.52481889/(-0.011254756 + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`n$sf5[$CellContext`lambdaDomain] = {0.00037000000000000005`, 
        0.0025}, $CellContext`n$sf5[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           1.42729015/(-129.141675 + 1000000 $CellContext`lambda$^2) + 
           0.18708552700000003`/(-0.0588995392 + 
            1000000 $CellContext`lambda$^2) + 
           1.52481889/(-0.011254756 + 
            1000000 $CellContext`lambda$^2))], \
$CellContext`n$sf5[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`n$sf5[$CellContext`mediumName] = 
       "N-SF5", $CellContext`n$sf5[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`n$sf5[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (1.52481889/($CellContext`lsq$ - 0.011254756) + 
             0.18708552700000003`/($CellContext`lsq$ - 0.0588995392) + 
             1.42729015/($CellContext`lsq$ - 
              129.141675)) $CellContext`lsq$]]], 
       UpSet[
        $CellContext`mediumQ[$CellContext`n$sk2], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`n$sk2], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            0.96818604/(-110.377773 + 1000000 $CellContext`lambda$^2) + 
            0.257738258/(-0.024282352700000003` + 
             1000000 $CellContext`lambda$^2) + 
            1.28189012/(-0.007271916400000001 + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`n$sk2[$CellContext`lambdaDomain] = {0.00031000000000000005`, 
        0.0025}, $CellContext`n$sk2[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           0.96818604/(-110.377773 + 1000000 $CellContext`lambda$^2) + 
           0.257738258/(-0.024282352700000003` + 
            1000000 $CellContext`lambda$^2) + 
           1.28189012/(-0.007271916400000001 + 
            1000000 $CellContext`lambda$^2))], \
$CellContext`n$sk2[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`n$sk2[$CellContext`mediumName] = 
       "N-SK2", $CellContext`n$sk2[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`n$sk2[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (1.28189012/($CellContext`lsq$ - 0.007271916400000001) + 
             0.257738258/($CellContext`lsq$ - 0.024282352700000003`) + 
             0.96818604/($CellContext`lsq$ - 
              110.377773)) $CellContext`lsq$]]], \
$CellContext`setOpticsFor2DRayTrace[
         Pattern[$CellContext`op, 
          Blank[Symbol]], 
         Pattern[$CellContext`solverResult, {
           BlankSequence[Rule]}], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[Rule]]] := If[
         ReplaceAll[$CellContext`conjugateInfiniteness, \
$CellContext`solverResult], 
         $CellContext`setOpticsFor2DRayTraceInfinite[$CellContext`op, \
$CellContext`solverResult, $CellContext`opt], 
         $CellContext`setOpticsFor2DRayTraceFinite[$CellContext`op, \
$CellContext`solverResult, $CellContext`opt]], 
       Options[$CellContext`setOpticsFor2DRayTrace] = \
{$CellContext`tracingWavelength -> $CellContext`designWavelength, \
$CellContext`decenterBetweenAspherics -> 0}, 
       UpSet[
        $CellContext`opticsQ[$CellContext`op], 
        True], $CellContext`op[$CellContext`mediums] = \
{$CellContext`atmosphere, $CellContext`n$bk7, $CellContext`n$bk7, \
$CellContext`atmosphere, $CellContext`atmosphere}, \
$CellContext`op[$CellContext`surfaces] = {$CellContext`s1$1212742, \
$CellContext`pup$1212742, $CellContext`s2$1212742, $CellContext`img$1212742, \
$CellContext`ref$1212742}, $CellContext`opticsQ[
         Blank[]] := False, Attributes[$CellContext`s1$1212742] = {Temporary}, 
       UpSet[
        $CellContext`surfaceQ[$CellContext`s1$1212742], 
        True], $CellContext`s1$1212742[$CellContext`origin] = {0, 
        0}, $CellContext`s1$1212742[$CellContext`shape] = \
$CellContext`parametric[{
          
          InterpolatingFunction[{{-0.663, 0.663}}, {
           5, 7, 0, {71}, {4}, 0, 0, 0, 0, Automatic, {}, {}, 
            False}, CompressedData["
1:eJwtkl9IE1AUxjcF14Ogg5khiOxBsIXakiYk+UGtFO3BxJeQHloNUVChQBSc
hH9m+FAImeKfYYkk5j/ETAn7GIEkCNNmjCETtUmYpKBkJD7ow3fhcLnce885
3+87VldtqTvGYDAYz6PgPHwH7xeLc3fY3HChIRiO0h1beaW8MUpLXdffJWOU
vvTsq4nVP1ly92ZR6tg2YyqKn9j2tjjT/qAp17ZF90hFj7Nyk+ORRmP/8QZf
Vdm+T6RE+PRf6J0/f51lrW3P1lxhOsw5zl/eEC/5Ni0noz94Ynu5Ex8IMvIp
bzbtaJV07nqvJa/w1lDmZEfdMk0LL0qmvnzjWNZFljkWeX9wKPP/+Fcem+39
A+l+OkyepNYbC3z+u/tw+fIcmxnojHd9ZNtrk/1e7zQTgk2DycOTtHj2N94k
jbLwzx37yOdheh4OtMw/esvHfbsfuhJ6GWeqP72d08Ga1esFGSGrdjMNWjpD
99B76D+UD8oP1YPqQ/1A/UH9Qv1DeiB9kF5IP8QD4gPxgvhBPCG+EG+IP+QH
5A/kF+Qf5CfkL+Q35D80D9B8QPOCM6UKHQk=
           "], {
           Developer`PackedArrayForm, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 
            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 
            28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 
            44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
            60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71}, CompressedData["
1:eJxTTMoPSmVkYGBwB+Kzzz1O1jPfsZ9jPN/8wPVb9v7yXELe227aG0ZcW7/Y
84b9edWdrBuXXLO/J/AnpmjxFfuwuTP6Fxy5ZC959lnwKtaL9oETj29fdeKc
/fEf/R8N+E/b7/xY7H988XH7n8w1uzQbj9hXP7b+fnfRQXv24ov/lbj22Rsc
rbj+x2OnfV3ikoOr/2yx/9OcvT1WYaP9tts76x7Gr7ZPeVtUudN/qX3ValtT
J64F9izP+Br+nZhpvy/ITFLSaIq9cU7KxEez+uyNPrYLfzRss9d01L21y7vO
/pBEgeS2reX2R/20/oS8L7QPXWDievR9pv3+7bWJfXMT7ed8sVycUhxhb2cs
+JzTzd/eQu7M/zWTHO1vOew0SDqkaL8oMKf7xaYIu8uO+9e7ljvYMUABjA+T
h6mH6YeZBzMfZh/Mfph7YO6DuRfmfph/YP6D+Rfmf1h4wMIHFl6w8IOFJyx8
YeENC39YfMDiBxZfsPiDxScsfmHxDYt/WHqApQ9YegEAj3IXFQ==
            "]}, {
           Automatic}], 
          
          InterpolatingFunction[{{-0.663, 0.663}}, {
           5, 7, 0, {71}, {4}, {1}, 0, 0, 0, Automatic, {}, {}, 
            False}, CompressedData["
1:eJwtkl9IE1AUxjcF14Ogg5khiOxBsIXakiYk+UGtFO3BxJeQHloNUVChQBSc
hH9m+FAImeKfYYkk5j/ETAn7GIEkCNNmjCETtUmYpKBkJD7ow3fhcLnce885
3+87VldtqTvGYDAYz6PgPHwH7xeLc3fY3HChIRiO0h1beaW8MUpLXdffJWOU
vvTsq4nVP1ly92ZR6tg2YyqKn9j2tjjT/qAp17ZF90hFj7Nyk+ORRmP/8QZf
Vdm+T6RE+PRf6J0/f51lrW3P1lxhOsw5zl/eEC/5Ni0noz94Ynu5Ex8IMvIp
bzbtaJV07nqvJa/w1lDmZEfdMk0LL0qmvnzjWNZFljkWeX9wKPP/+Fcem+39
A+l+OkyepNYbC3z+u/tw+fIcmxnojHd9ZNtrk/1e7zQTgk2DycOTtHj2N94k
jbLwzx37yOdheh4OtMw/esvHfbsfuhJ6GWeqP72d08Ga1esFGSGrdjMNWjpD
99B76D+UD8oP1YPqQ/1A/UH9Qv1DeiB9kF5IP8QD4gPxgvhBPCG+EG+IP+QH
5A/kF+Qf5CfkL+Q35D80D9B8QPOCM6UKHQk=
           "], {
           Developer`PackedArrayForm, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 
            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 
            28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 
            44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
            60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71}, CompressedData["
1:eJxTTMoPSmVkYGBwB+Kzzz1O1jPfsZ9jPN/8wPVb9v7yXELe227aG0ZcW7/Y
84b9edWdrBuXXLO/J/AnpmjxFfuwuTP6Fxy5ZC959lnwKtaL9oETj29fdeKc
/fEf/R8N+E/b7/xY7H988XH7n8w1uzQbj9hXP7b+fnfRQXv24ov/lbj22Rsc
rbj+x2OnfV3ikoOr/2yx/9OcvT1WYaP9tts76x7Gr7ZPeVtUudN/qX3ValtT
J64F9izP+Br+nZhpvy/ITFLSaIq9cU7KxEez+uyNPrYLfzRss9d01L21y7vO
/pBEgeS2reX2R/20/oS8L7QPXWDievR9pv3+7bWJfXMT7ed8sVycUhxhb2cs
+JzTzd/eQu7M/zWTHO1vOew0SDqkaL8oMKf7xaYIu8uO+9e7ljvYMUABjA+T
h6mH6YeZBzMfZh/Mfph7YO6DuRfmfph/YP6D+Rfmf1h4wMIHFl6w8IOFJyx8
YeENC39YfMDiBxZfsPiDxScsfmHxDYt/WHqApQ9YegEAj3IXFQ==
            "]}, {
           Automatic}]}, {-0.663, 0.663}, {-0.65, 
         0.65}], $CellContext`s1$1212742[$CellContext`solverAsphericalSurface]\
 = $CellContext`frontSolverAsphericalSurface, \
$CellContext`s1$1212742[$CellContext`surfaceComment] = 
       "surfaceComment", $CellContext`surfaceQ[
         Blank[]] := False, $CellContext`origin[
         $CellContext`stoppedRay[$CellContext`noIntersection]] := 
       Sequence[], $CellContext`origin[
         $CellContext`ray[
          Pattern[$CellContext`org, 
           Blank[]], 
          Pattern[$CellContext`dir, 
           Blank[]], 
          BlankNullSequence[]]] := $CellContext`org, $CellContext`origin[
         $CellContext`stoppedRay[
          Pattern[$CellContext`org, {
            Blank[], 
            Blank[]}], 
          BlankSequence[]]] := $CellContext`org, 
       Attributes[$CellContext`pup$1212742] = {Temporary}, 
       UpSet[
        $CellContext`surfaceQ[$CellContext`pup$1212742], 
        True], $CellContext`pup$1212742[$CellContext`origin] = {
        0, 
         0.43771357208936196`}, \
$CellContext`pup$1212742[$CellContext`pupilSurface] = 
       True, $CellContext`pup$1212742[$CellContext`shape] = \
$CellContext`plane[{}, $CellContext`domainAll, {-0.6408422035132865, 
         0.6408422035132865}], \
$CellContext`pup$1212742[$CellContext`surfaceComment] = "surfaceComment", 
       UpSet[
        Between[$CellContext`domainAll], 
        Between[{-Infinity, Infinity}]], 
       UpSet[
        Interval[$CellContext`domainAll], 
        Interval[{-Infinity, Infinity}]], 
       Attributes[$CellContext`s2$1212742] = {Temporary}, 
       UpSet[
        $CellContext`surfaceQ[$CellContext`s2$1212742], 
        True], $CellContext`s2$1212742[$CellContext`origin] = {0, 
        0}, $CellContext`s2$1212742[$CellContext`shape] = \
$CellContext`parametric[{
          
          InterpolatingFunction[{{-0.5179195719707187, 0.5179195719707187}}, {
           5, 7, 0, {71}, {4}, 0, 0, 0, 0, Automatic, {}, {}, 
            False}, CompressedData["
1:eJwtkl1I02EYxf8zUbFRgbC8MMILIYLC1CRIOghBUMhIUllkRqAXgkpN8QO7
CckagpVagRM/Np10UVui4ApOSDjNiThsE5kfiIQUBQ0yVEy9OC88Fy/vx3PO
7zzp92sKy+MMwzAd1rXDKiuMnQi+XGOq0fP6rnmN4W7fbIVllZdq7zVeDS0z
u6G8Kqs0yidd6wWuV0tMmHEM2X4tMhhKKh4tjdC/v5s3vPGNp9OqG36eX+DW
B8twfUeIWTuDvfPH5vnHa/2fkDfHyuXJnPhHQc7UR0wXotOMjTj+vi8K0O2Y
clu+f2FJ+5WLNscEY+th3zg+85Yv8Lw28RNTX2zvOpPH+cP59HH05Bhv3zzl
2jw3wjK73d5yw8upSDh5b+UtPUfrvP/oYU3VWeuYy81N6/WSpWf9bM7MaDdv
OGn63Rh/5vgb2jqTBrYud7At/05T/kIbP1aYix9uN7Pvnedrrj+FD5paA7n+
IzS0tIfOofvQe+g/6H+oH9Qf0gPpg/RC+iE/kD/IL+Qf4gHxgXhB/CCeEF+I
N8QfygPKB8oLyg/KE8oXyhvKH5oHaD6gecEB/FMsfQ==
           "], {
           Developer`PackedArrayForm, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 
            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 
            28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 
            44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
            60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71}, CompressedData["
1:eJxTTMoPSmVkYGBwB2LvHYd3Gzq9sJ/QWzWHweuFvZrkY+PzgS/sn84S2sYZ
88JecNvuS+kZL+wT845+9al4Yb/gatTKN+0v7GdcEPqqO/2Fff3aZXp/lr6w
11P3/NW+/YW9zt0HLiYngPoCJ0l+uP7C/se36XPXP3thz/XC70LWlxf2GSyC
/TKML+39Vu6+eJDnpb1ho5lIpPhL+x/FAo8fKgD5zOLNMZov7c05y9ecNHhp
n8e86a6d6Ut75cWml80tX9ov0Ih4ssUGqJ5ZK3Wb/Uv7HeF7F9s4vbRf99iO
P9v5pX3JN+fyEpeX9jMe3ngS4frS3q1qb7yE20t7q3tpZVOA9LoTbz//BNJx
u7tuebi/tD88p7dhCpB2do8TXgek3ZhlREC0x8MqEWQ+TB6mHqYfZh7MfJh9
MPth7oG5D+ZemPth/oH5D+ZfmP9h4QEPH2h4wcIPFp6w8IWFNyz8YfEBix9Y
fMHiDxafsPiFxTcs/mHpAZY+YOkFACbKHTM=
            "]}, {Automatic}], 
          
          InterpolatingFunction[{{-0.5179195719707187, 0.5179195719707187}}, {
           5, 7, 0, {71}, {4}, {1}, 0, 0, 0, Automatic, {}, {}, 
            False}, CompressedData["
1:eJwtkl1I02EYxf8zUbFRgbC8MMILIYLC1CRIOghBUMhIUllkRqAXgkpN8QO7
CckagpVagRM/Np10UVui4ApOSDjNiThsE5kfiIQUBQ0yVEy9OC88Fy/vx3PO
7zzp92sKy+MMwzAd1rXDKiuMnQi+XGOq0fP6rnmN4W7fbIVllZdq7zVeDS0z
u6G8Kqs0yidd6wWuV0tMmHEM2X4tMhhKKh4tjdC/v5s3vPGNp9OqG36eX+DW
B8twfUeIWTuDvfPH5vnHa/2fkDfHyuXJnPhHQc7UR0wXotOMjTj+vi8K0O2Y
clu+f2FJ+5WLNscEY+th3zg+85Yv8Lw28RNTX2zvOpPH+cP59HH05Bhv3zzl
2jw3wjK73d5yw8upSDh5b+UtPUfrvP/oYU3VWeuYy81N6/WSpWf9bM7MaDdv
OGn63Rh/5vgb2jqTBrYud7At/05T/kIbP1aYix9uN7Pvnedrrj+FD5paA7n+
IzS0tIfOofvQe+g/6H+oH9Qf0gPpg/RC+iE/kD/IL+Qf4gHxgXhB/CCeEF+I
N8QfygPKB8oLyg/KE8oXyhvKH5oHaD6gecEB/FMsfQ==
           "], {
           Developer`PackedArrayForm, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 
            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 
            28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 
            44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
            60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71}, CompressedData["
1:eJxTTMoPSmVkYGBwB2LvHYd3Gzq9sJ/QWzWHweuFvZrkY+PzgS/sn84S2sYZ
88JecNvuS+kZL+wT845+9al4Yb/gatTKN+0v7GdcEPqqO/2Fff3aZXp/lr6w
11P3/NW+/YW9zt0HLiYngPoCJ0l+uP7C/se36XPXP3thz/XC70LWlxf2GSyC
/TKML+39Vu6+eJDnpb1ho5lIpPhL+x/FAo8fKgD5zOLNMZov7c05y9ecNHhp
n8e86a6d6Ut75cWml80tX9ov0Ih4ssUGqJ5ZK3Wb/Uv7HeF7F9s4vbRf99iO
P9v5pX3JN+fyEpeX9jMe3ngS4frS3q1qb7yE20t7q3tpZVOA9LoTbz//BNJx
u7tuebi/tD88p7dhCpB2do8TXgek3ZhlREC0x8MqEWQ+TB6mHqYfZh7MfJh9
MPth7oG5D+ZemPth/oH5D+ZfmP9h4QEPH2h4wcIPFp6w8IWFNyz8YfEBix9Y
fMHiDxafsPiFxTcs/mHpAZY+YOkFACbKHTM=
            "]}, {
           Automatic}]}, {-0.5179195719707187, 
         0.5179195719707187}, {-0.4992752186185773, 
         0.4992752186185773}], \
$CellContext`s2$1212742[$CellContext`solverAsphericalSurface] = \
$CellContext`backSolverAsphericalSurface, \
$CellContext`s2$1212742[$CellContext`surfaceComment] = "surfaceComment", 
       Attributes[$CellContext`img$1212742] = {Temporary}, 
       UpSet[
        $CellContext`surfaceQ[$CellContext`img$1212742], 
        True], $CellContext`img$1212742[$CellContext`origin] = {
        0, 1.3428837296257439`}, $CellContext`img$1212742[$CellContext`shape] = \
$CellContext`plane[{}, $CellContext`domainAll, {
         4.258574787030511*^-6, -4.258574787030511*^-6}], \
$CellContext`img$1212742[$CellContext`surfaceComment] = "surfaceComment", 
       Attributes[$CellContext`ref$1212742] = {Temporary}, 
       UpSet[
        $CellContext`surfaceQ[$CellContext`ref$1212742], 
        True], $CellContext`ref$1212742[$CellContext`origin] = {
        0, 0.34288372962574387`}, \
$CellContext`ref$1212742[$CellContext`shape] = $CellContext`spherical[{
         1.}, {-1., 1.}, {-0.6500007481377026, 
         0.6500007481377026}], \
$CellContext`ref$1212742[$CellContext`surfaceComment] = 
       "surfaceComment", $CellContext`setOpticsFor2DRayTraceInfinite[
         Pattern[$CellContext`op, 
          Blank[Symbol]], 
         Pattern[$CellContext`solverResult, {
           BlankSequence[Rule]}], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[Rule]]] := 
       Module[{$CellContext`wl, $CellContext`s1, $CellContext`pup, \
$CellContext`s2, $CellContext`img, $CellContext`ref, $CellContext`cgi, \
$CellContext`cgo, $CellContext`bod, $CellContext`ncg, $CellContext`dec, \
$CellContext`mrg}, $CellContext`wl = ReplaceAll[
            
            ReplaceAll[$CellContext`tracingWavelength, {$CellContext`opt}], \
{$CellContext`tracingWavelength -> 
             ReplaceAll[$CellContext`designWavelength, \
$CellContext`solverResult]}]; $CellContext`dec = ReplaceAll[
            
            ReplaceAll[$CellContext`decenterBetweenAspherics, \
{$CellContext`opt}], 
            
            Options[$CellContext`setOpticsFor2DRayTrace]]; \
$CellContext`createSurface[$CellContext`s1, 
           $CellContext`parametricShape[
            
            ReplaceAll[$CellContext`frontSurfaceShapeFunction, \
$CellContext`solverResult]], {0, 
           0}]; $CellContext`attachAttributeToSurface[$CellContext`s1, \
$CellContext`solverAsphericalSurface, \
$CellContext`frontSolverAsphericalSurface]; \
$CellContext`createSurface[$CellContext`pup, 
           $CellContext`planeShape[], {0, 
            Part[
             $CellContext`marginalPositionOfSurface[$CellContext`s1], -1, 
             1]}]; $CellContext`createSurface[$CellContext`s2, 
           $CellContext`parametricShape[
            
            ReplaceAll[$CellContext`backSurfaceShapeFunction, \
$CellContext`solverResult]], {$CellContext`dec, 
            0}]; $CellContext`attachAttributeToSurface[$CellContext`s2, \
$CellContext`solverAsphericalSurface, \
$CellContext`backSolverAsphericalSurface]; \
$CellContext`createSurface[$CellContext`img, 
           $CellContext`planeShape[{-2, 2}], {0, 
            
            ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`mechanicalImageDistance, $CellContext`solverResult]}]; \
$CellContext`createSurface[$CellContext`ref, 
           $CellContext`sphericalShape[
            ReplaceAll[
            1/$CellContext`focalLength, $CellContext`solverResult]], {0, 
            
            ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`mechanicalImageDistance - $CellContext`focalLength, \
$CellContext`solverResult]}]; $CellContext`bod = 
          ReplaceAll[$CellContext`lensMediumSymbol, \
$CellContext`solverResult]; Clear[$CellContext`op]; If[
           
           ReplaceAll[$CellContext`coverGlassExistence, \
$CellContext`solverResult], $CellContext`createSurface[$CellContext`cgi, 
             $CellContext`planeShape[], {0, 
              
              ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`mechanicalImageDistance/2 - $CellContext`coverGlassThickness/
               2, $CellContext`solverResult]}]; \
$CellContext`createSurface[$CellContext`cgo, 
             $CellContext`planeShape[], {0, 
              
              ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`mechanicalImageDistance/2 + $CellContext`coverGlassThickness/
                2, $CellContext`solverResult]}]; $CellContext`ncg = 
            ReplaceAll[$CellContext`coverGlassMediumSymbol, \
$CellContext`solverResult]; $CellContext`createOptics[$CellContext`op, \
{$CellContext`atmosphere, $CellContext`s1, $CellContext`bod, \
$CellContext`pup, $CellContext`bod, $CellContext`s2, $CellContext`atmosphere, \
$CellContext`cgi, $CellContext`ncg, $CellContext`cgo, \
$CellContext`atmosphere, $CellContext`img, $CellContext`atmosphere, \
$CellContext`ref, $CellContext`atmosphere}], 
           $CellContext`createOptics[$CellContext`op, \
{$CellContext`atmosphere, $CellContext`s1, $CellContext`bod, \
$CellContext`pup, $CellContext`bod, $CellContext`s2, $CellContext`atmosphere, \
$CellContext`img, $CellContext`atmosphere, $CellContext`ref, \
$CellContext`atmosphere}]]; $CellContext`mrg = 
          ReplaceAll[$CellContext`numericalAperture $CellContext`focalLength, \
$CellContext`solverResult]; $CellContext`traceRay[$CellContext`op][
           $CellContext`markRayAsDomainDefinedMarginal[
            $CellContext`raySet[{$CellContext`mrg, -0.3}, {0, 
             1}]], $CellContext`wl]; $CellContext`setPupil[$CellContext`op, \
$CellContext`pup]; $CellContext`op], $CellContext`createSurface[
         PatternTest[
          Pattern[$CellContext`surfaceSymbol, 
           Blank[]], $CellContext`canBeObjectSymbol], 
         Pattern[$CellContext`surfaceShape, 
          Blank[]], 
         Pattern[$CellContext`position, {
           Blank[], 
           Blank[]}], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[]]] := Module[{}, UpSet[
           $CellContext`surfaceQ[$CellContext`surfaceSymbol], 
           True]; $CellContext`surfaceSymbol[$CellContext`shape] = \
$CellContext`surfaceShape; $CellContext`surfaceSymbol[$CellContext`origin] = \
$CellContext`position; \
$CellContext`surfaceSymbol[$CellContext`surfaceComment] = ReplaceAll[
            
            ReplaceAll[$CellContext`surfaceComment, {$CellContext`opt}], \
{$CellContext`surfaceComment -> 
             ToString[$CellContext`surfaceComment]}]; \
$CellContext`surfaceSymbol], 
       Options[$CellContext`createSurface] = {$CellContext`surfaceComment -> 
         ""}, $CellContext`canBeObjectSymbol[
         Pattern[$CellContext`s, 
          Blank[Symbol]]] := ContainsOnly[
         Attributes[$CellContext`s], {
         Temporary}], $CellContext`canBeObjectSymbol[
         Pattern[$CellContext`s, 
          Blank[Symbol]][
          
          BlankNullSequence[]]] := \
$CellContext`canBeObjectSymbol[$CellContext`s], $CellContext`canBeObjectSymbol[
         Blank[]] := False, $CellContext`parametricShape[
         Pattern[$CellContext`f, 
          Blank[Function]], 
         Pattern[$CellContext`dom, {
           Blank[], 
           Blank[]}]] := $CellContext`parametric[{$CellContext`f, 
          Evaluate[
           Derivative[
           1][$CellContext`f]]}, $CellContext`dom, $CellContext`dom], \
$CellContext`parametricShape[
         Pattern[$CellContext`f, 
          Blank[
          InterpolatingFunction]]] := $CellContext`parametric[{$CellContext`f, 
          Evaluate[
           Derivative[1][$CellContext`f]]}, 
         $CellContext`interpolationDomain[$CellContext`f], 
         $CellContext`interpolationDomain[$CellContext`f]], \
$CellContext`parametricShape[
         Pattern[$CellContext`f, 
          Blank[InterpolatingFunction]], 
         Pattern[$CellContext`dom, {
           Blank[], 
           Blank[]}]] := $CellContext`parametric[{$CellContext`f, 
          Evaluate[
           Derivative[1][$CellContext`f]]}, 
         $CellContext`interpolationDomain[$CellContext`f], $CellContext`dom], \
$CellContext`interpolationDomain[
         Pattern[$CellContext`itf, 
          Blank[InterpolatingFunction]]] := Flatten[
         $CellContext`itf["Domain"]], $CellContext`attachAttributeToSurface[
         PatternTest[
          Pattern[$CellContext`surfaceSymbol, 
           Blank[]], $CellContext`surfaceQ], 
         Pattern[$CellContext`attributeSymbol, 
          Blank[Symbol]], 
         Pattern[$CellContext`attributeValue, 
          
          Blank[]]] := \
($CellContext`surfaceSymbol[$CellContext`attributeSymbol] = \
$CellContext`attributeValue), $CellContext`planeShape[] := \
$CellContext`plane[{}, $CellContext`domainAll, $CellContext`domainAll], \
$CellContext`planeShape[
         Pattern[$CellContext`dom, {
           Blank[], 
           
           Blank[]}]] := $CellContext`plane[{}, $CellContext`domainAll, \
$CellContext`dom], $CellContext`marginalPositionOfSurface[
         PatternTest[
          Pattern[$CellContext`s, 
           Blank[]], $CellContext`surfaceQ]] := 
       With[{$CellContext`p = $CellContext`surfacePosition[$CellContext`s]}, 
         Map[{0, $CellContext`p} + #& , 
          $CellContext`marginalPosition[
           $CellContext`s[$CellContext`shape]]]], $CellContext`surfacePosition[
         PatternTest[
          Pattern[$CellContext`surf, 
           Blank[]], $CellContext`surfaceQ]] := Part[
          $CellContext`surf[$CellContext`origin], -1] + \
$CellContext`individualOffset[
          $CellContext`surf[$CellContext`shape]], \
$CellContext`individualOffset[
         $CellContext`parametric[{
           Pattern[$CellContext`f, 
            Blank[]], 
           Blank[]}, 
          BlankNullSequence[]]] := $CellContext`f[
        0.], $CellContext`individualOffset[
         Blank[]] := 0., $CellContext`marginalPosition[
         PatternTest[
          Pattern[$CellContext`s, 
           Blank[]], $CellContext`shapeQ]] := Map[
         $CellContext`shapeFunctionToDraw[$CellContext`s], 
         $CellContext`domain[$CellContext`s]], $CellContext`marginalPosition[
         PatternTest[
          Pattern[$CellContext`s, 
           Blank[]], $CellContext`surfaceQ]] := Map[# + Reverse[
           $CellContext`s[$CellContext`origin]]& , 
         $CellContext`marginalPosition[
          $CellContext`s[$CellContext`shape]]], \
$CellContext`shapeQ[$CellContext`parametric] := 
       True, $CellContext`shapeQ[$CellContext`perfectThinLens] := 
       True, $CellContext`shapeQ[$CellContext`plane] := 
       True, $CellContext`shapeQ[$CellContext`quadratic] := 
       True, $CellContext`shapeQ[$CellContext`spherical] := 
       True, $CellContext`shapeQ[
         $CellContext`spherical[
          BlankNullSequence[]]] := True, $CellContext`shapeQ[
         $CellContext`quadratic[
          BlankNullSequence[]]] := True, $CellContext`shapeQ[
         $CellContext`plane[
          BlankNullSequence[]]] := True, $CellContext`shapeQ[
         $CellContext`perfectThinLens[
          BlankNullSequence[]]] := True, $CellContext`shapeQ[
         $CellContext`parametric[
          BlankNullSequence[]]] := True, $CellContext`shapeQ[
         Blank[]] := False, $CellContext`shapeFunctionToDraw[
         Pattern[$CellContext`s, 
          Blank[$CellContext`plane]]][
         Pattern[$CellContext`h, 
          Blank[]]] := {0, $CellContext`h}, $CellContext`shapeFunctionToDraw[
         Pattern[$CellContext`s, 
          Blank[$CellContext`perfectThinLens]]][
         Pattern[$CellContext`h, 
          Blank[]]] := {0, $CellContext`h}, $CellContext`shapeFunctionToDraw[
         Pattern[$CellContext`s, 
          Blank[$CellContext`spherical]]][
         Pattern[$CellContext`h, 
          
          Blank[]]] := {($CellContext`curvature[$CellContext`s] \
$CellContext`h^2)/(1 + 
         Sqrt[1 - $CellContext`curvature[$CellContext`s]^2 \
$CellContext`h^2]), $CellContext`h}, $CellContext`shapeFunctionToDraw[
         Pattern[$CellContext`s, 
          Blank[$CellContext`quadratic]]][
         Pattern[$CellContext`h, 
          
          Blank[]]] := {($CellContext`curvature[$CellContext`s] \
$CellContext`h^2)/(1 + 
         Sqrt[1 - ($CellContext`curvature[$CellContext`s]^2 $CellContext`h^2) \
(1 + $CellContext`conicConstant[$CellContext`s])]), $CellContext`h}, \
$CellContext`shapeFunctionToDraw[
         Pattern[$CellContext`s, 
          Blank[$CellContext`parametric]]][
         Pattern[$CellContext`h, 
          Blank[]]] := {
         $CellContext`shapeFunction[$CellContext`s][$CellContext`h], \
$CellContext`h}, $CellContext`curvature[
         $CellContext`spherical[{
           Pattern[$CellContext`curv, 
            Blank[]]}, 
          BlankSequence[]]] := $CellContext`curv, $CellContext`curvature[
         $CellContext`quadratic[{
           Pattern[$CellContext`curv, 
            Blank[]], 
           Blank[]}, 
          BlankSequence[]]] := $CellContext`curv, $CellContext`conicConstant[
         $CellContext`quadratic[{
           Blank[], 
           Pattern[$CellContext`conic, 
            Blank[]]}, 
          
          BlankNullSequence[]]] := $CellContext`conic, \
$CellContext`shapeFunction[
         $CellContext`parametric[{
           Pattern[$CellContext`f, 
            Blank[]], 
           Blank[]}, 
          BlankNullSequence[]]] := $CellContext`f, $CellContext`domain[
         Pattern[$CellContext`s, 
          Blank[]][{
           BlankNullSequence[]}, 
          Blank[], 
          Pattern[$CellContext`explicitDomain, 
           Blank[]]]] := Condition[$CellContext`explicitDomain, 
         $CellContext`shapeQ[$CellContext`s]], $CellContext`sphericalShape[
         PatternTest[
          Pattern[$CellContext`curv, 
           Blank[]], N[#] === 
          0.& ]] := $CellContext`planeShape[], $CellContext`sphericalShape[
         PatternTest[
          Pattern[$CellContext`curv, 
           Blank[]], N[#] === 0.& ], 
         Pattern[$CellContext`dom, 
          
          Blank[]]] := $CellContext`planeShape[$CellContext`dom], \
$CellContext`sphericalShape[
         PatternTest[
          Pattern[$CellContext`curv, 
           Blank[]], N[#] =!= 0.& ]] := 
       With[{$CellContext`impdom = \
$CellContext`quadraticImpicitDomain[$CellContext`curv, 0.]}, 
         $CellContext`spherical[{$CellContext`curv}, $CellContext`impdom, \
$CellContext`impdom]], $CellContext`sphericalShape[
         PatternTest[
          Pattern[$CellContext`curv, 
           Blank[]], N[#] =!= 0.& ], 
         Pattern[$CellContext`dom, {
           Blank[], 
           
           Blank[]}]] := $CellContext`spherical[{$CellContext`curv}, \
{(-1.)/$CellContext`curv, 
          1./$CellContext`curv}, $CellContext`dom], \
$CellContext`quadraticImpicitDomain[
         PatternTest[
          Pattern[$CellContext`curv, 
           Blank[]], N[#] =!= 0.& ], 
         PatternTest[
          Pattern[$CellContext`conic, 
           Blank[]], N[#] >= -1.& ]] := {(-1)/($CellContext`curv (
          1 + $CellContext`conic)), 
         1/($CellContext`curv (
          1 + $CellContext`conic))}, $CellContext`quadraticImpicitDomain[
         PatternTest[
          Pattern[$CellContext`curv, 
           Blank[]], N[#] =!= 0.& ], 
         PatternTest[
          Pattern[$CellContext`conic, 
           Blank[]], 
          N[#] < -1.& ]] := $CellContext`domainAll, $CellContext`createOptics[
        
         PatternTest[
          Pattern[$CellContext`opticsSymbol, 
           Blank[]], $CellContext`canBeObjectSymbol], 
         Pattern[$CellContext`seq, {
           BlankNullSequence[]}]] := 
       Module[{$CellContext`meds, $CellContext`surfs}, {$CellContext`meds, \
$CellContext`surfs} = Transpose[
            Partition[$CellContext`seq, 2]]; If[
           Not[
            Apply[And, 
             Join[
              Map[$CellContext`mediumQ, $CellContext`meds], 
              Map[$CellContext`surfaceQ, $CellContext`surfs]]]], 
           Return[$Failed]]; UpSet[
           $CellContext`opticsQ[$CellContext`opticsSymbol], 
           True]; $CellContext`opticsSymbol[$CellContext`mediums] = \
$CellContext`meds; $CellContext`opticsSymbol[$CellContext`surfaces] = \
$CellContext`surfs; $CellContext`opticsSymbol], $CellContext`surfs = \
{$CellContext`pup$22072622}, 
       Attributes[$CellContext`pup$22072622] = {Temporary}, 
       UpSet[
        $CellContext`surfaceQ[$CellContext`pup$22072622], 
        True], $CellContext`pup$22072622[$CellContext`origin] = {
        0, 0.6789312459185386}, \
$CellContext`pup$22072622[$CellContext`pupilSurface] = 
       False, $CellContext`pup$22072622[$CellContext`shape] = \
$CellContext`plane[{}, $CellContext`domainAll, {-0.7556119515754723, 
         0.7556119515754723}], \
$CellContext`pup$22072622[$CellContext`surfaceComment] = 
       "surfaceComment", $CellContext`traceRay[
         PatternTest[
          Pattern[$CellContext`optics, 
           Blank[]], $CellContext`opticsQ]][
         Pattern[$CellContext`initialRay, 
          Blank[$CellContext`ray]], 
         PatternTest[
          Pattern[$CellContext`lambda, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`indices, $CellContext`indpair, $CellContext`args, \
$CellContext`ir, $CellContext`rays}, $CellContext`indices = 
          Map[$CellContext`refractiveIndexValue[#, $CellContext`lambda]& , 
            $CellContext`optics[$CellContext`mediums]]; $CellContext`indpair = 
          Transpose[{$CellContext`indices, 
             RotateLeft[$CellContext`indices]}]; $CellContext`args = 
          Transpose[{
             $CellContext`optics[$CellContext`surfaces], 
             Take[$CellContext`indpair, 
              Length[
               $CellContext`optics[$CellContext`surfaces]]]}]; \
$CellContext`ir = \
$CellContext`setRefractiveIndexForRay[$CellContext`initialRay, 
            Part[$CellContext`indices, 1]]; $CellContext`rays = 
          FoldList[$CellContext`traceOneRay, $CellContext`ir, \
$CellContext`args]; $CellContext`raySequence[$CellContext`lambda, \
$CellContext`rays]], $CellContext`traceRay[
         PatternTest[
          Pattern[$CellContext`surface, 
           Blank[]], $CellContext`surfaceQ]][
         Pattern[$CellContext`r, 
          Blank[$CellContext`ray]], {
          Pattern[$CellContext`inputIndex, 
           Blank[]], 
          Pattern[$CellContext`outputIndex, 
           
           Blank[]]}] := $CellContext`traceOneRay[$CellContext`r, \
{$CellContext`surface, {$CellContext`inputIndex, $CellContext`outputIndex}}], \
$CellContext`setRefractiveIndexForRay[
         $CellContext`ray[
          Pattern[$CellContext`p, {
            Blank[], 
            Blank[]}], 
          Pattern[$CellContext`v, {
            Blank[], 
            Blank[]}], 
          Pattern[$CellContext`opt, 
           BlankNullSequence[]]], 
         Pattern[$CellContext`index, 
          Blank[]]] := With[{$CellContext`len = Sqrt[
            Dot[$CellContext`v, $CellContext`v]]}, 
         $CellContext`ray[$CellContext`p, 
          
          Map[($CellContext`index/$CellContext`len) #& , $CellContext`v], \
$CellContext`opt]], $CellContext`traceOneRay[
         Pattern[$CellContext`r, 
          Blank[$CellContext`ray]], {
          Pattern[$CellContext`surface, 
           Blank[]], {
           Pattern[$CellContext`inputIndex, 
            Blank[]], 
           Pattern[$CellContext`outputIndex, 
            Blank[]]}}] := 
       Module[{$CellContext`offray, $CellContext`refray}, $CellContext`offray = \
$CellContext`offsetRay[$CellContext`r, 
            $CellContext`surface[$CellContext`origin]]; $CellContext`refray = \
$CellContext`reflectedRay[$CellContext`surface][$CellContext`offray, \
{$CellContext`inputIndex, $CellContext`outputIndex}]; \
$CellContext`offsetBackRay[$CellContext`refray, 
           $CellContext`surface[$CellContext`origin]]], \
$CellContext`traceOneRay[
         $CellContext`stoppedRay[
          BlankSequence[]], {
          Pattern[$CellContext`surface, 
           Blank[]], {
           Pattern[$CellContext`inputIndex, 
            Blank[]], 
           Pattern[$CellContext`outputIndex, 
            
            Blank[]]}}] := $CellContext`untraceableRay, \
$CellContext`traceOneRay[$CellContext`untraceableRay, {
          Pattern[$CellContext`surface, 
           Blank[]], {
           Pattern[$CellContext`inputIndex, 
            Blank[]], 
           Pattern[$CellContext`outputIndex, 
            Blank[]]}}] := $CellContext`untraceableRay, $CellContext`offsetRay[
         $CellContext`ray[{
           Pattern[$CellContext`y, 
            Blank[]], 
           Pattern[$CellContext`z, 
            Blank[]]}, 
          Pattern[$CellContext`dir, 
           Blank[]], 
          Pattern[$CellContext`opt, 
           BlankNullSequence[]]], {
          Pattern[$CellContext`yoff, 
           Blank[]], 
          Pattern[$CellContext`zoff, 
           
           Blank[]]}] := $CellContext`ray[{$CellContext`y - \
$CellContext`yoff, $CellContext`z - $CellContext`zoff}, $CellContext`dir, \
$CellContext`opt], $CellContext`reflectedRay[
         PatternTest[
          Pattern[$CellContext`surface, 
           Blank[]], $CellContext`surfaceQ]][
         Pattern[$CellContext`r, 
          $CellContext`ray[
           Blank[], 
           Blank[], 
           Pattern[$CellContext`opt, 
            BlankNullSequence[]]]], {
          Pattern[$CellContext`inputIndex, 
           Blank[]], 
          Pattern[$CellContext`outputIndex, 
           Blank[]]}] := 
       Module[{$CellContext`pos, $CellContext`rv}, $CellContext`pos = \
$CellContext`intersection[
            $CellContext`surface[$CellContext`shape], $CellContext`r]; 
         If[$CellContext`pos === $CellContext`noIntersection, 
           Return[
            $CellContext`stoppedRay[$CellContext`noIntersection]]]; If[
           $CellContext`domainDefinedMarginalRayQ[$CellContext`r], 
           $CellContext`setDomain[$CellContext`surface, $CellContext`pos]]; \
$CellContext`rv = $CellContext`reflectedVector[
            $CellContext`surface[$CellContext`shape], \
{$CellContext`inputIndex, $CellContext`outputIndex}, 
            Part[$CellContext`pos, 1], 
            $CellContext`direction[$CellContext`r]]; If[
           
           Or[$CellContext`rv === $CellContext`noNormalVector, \
$CellContext`rv === $CellContext`totalReflection], 
           Return[
            $CellContext`stoppedRay[$CellContext`pos, $CellContext`rv]]]; \
$CellContext`ray[$CellContext`pos, $CellContext`rv, $CellContext`opt]], \
$CellContext`intersection[
         $CellContext`plane[
          BlankSequence[]], 
         $CellContext`ray[{
           Pattern[$CellContext`yg, 
            Blank[]], 
           Pattern[$CellContext`zg, 
            Blank[]]}, {
           Pattern[$CellContext`yd, 
            Blank[]], 
           Pattern[$CellContext`zd, 
            Blank[]]}, 
          Pattern[$CellContext`opt, 
           BlankNullSequence[]]]] := 
       Module[{$CellContext`t}, If[N[$CellContext`zd] === 0., 
           
           Return[$CellContext`noIntersection]]; {$CellContext`yg - \
$CellContext`yd ($CellContext`zg/$CellContext`zd), 
           0.}], $CellContext`intersection[
         $CellContext`perfectThinLens[
          BlankSequence[]], 
         $CellContext`ray[{
           Pattern[$CellContext`yg, 
            Blank[]], 
           Pattern[$CellContext`zg, 
            Blank[]]}, {
           Pattern[$CellContext`yd, 
            Blank[]], 
           Pattern[$CellContext`zd, 
            Blank[]]}, 
          Pattern[$CellContext`opt, 
           
           BlankNullSequence[]]]] := {$CellContext`yg - $CellContext`zg \
$CellContext`yd, 0.}, $CellContext`intersection[
         Pattern[$CellContext`s, 
          Blank[$CellContext`spherical]], 
         $CellContext`ray[{
           Pattern[$CellContext`yg, 
            Blank[]], 
           Pattern[$CellContext`zg, 
            Blank[]]}, {
           Pattern[$CellContext`yd, 
            Blank[]], 
           Pattern[$CellContext`zd, 
            Blank[]]}, 
          Pattern[$CellContext`opt, 
           BlankNullSequence[]]]] := 
       Module[{$CellContext`crv, $CellContext`isq, $CellContext`a, \
$CellContext`pos}, $CellContext`crv = $CellContext`curvature[$CellContext`s]; \
$CellContext`isq = $CellContext`zd^2 - $CellContext`crv^2 ($CellContext`yg \
$CellContext`zd - $CellContext`yd $CellContext`zg)^2 + ((
              2 $CellContext`crv) $CellContext`yd) (-($CellContext`yg \
$CellContext`zd) + $CellContext`yd $CellContext`zg); If[$CellContext`isq < 0., 
           
           Return[$CellContext`noIntersection]]; $CellContext`a = \
($CellContext`zd - $CellContext`crv ($CellContext`yd $CellContext`yg + \
$CellContext`zd $CellContext`zg) - 
            Sqrt[$CellContext`isq])/($CellContext`crv ($CellContext`yd^2 + \
$CellContext`zd^2)); $CellContext`pos = {$CellContext`yg, $CellContext`zg} + \
$CellContext`a {$CellContext`yd, $CellContext`zd}; If[
           $CellContext`insideImplicitDomain[$CellContext`s][
            
            Part[$CellContext`pos, 
             
             1]], $CellContext`pos, $CellContext`noIntersection]], \
$CellContext`intersection[
         Pattern[$CellContext`q, 
          Blank[$CellContext`quadratic]], 
         $CellContext`ray[{
           Pattern[$CellContext`yg, 
            Blank[]], 
           Pattern[$CellContext`zg, 
            Blank[]]}, {
           Pattern[$CellContext`yd, 
            Blank[]], 
           Pattern[$CellContext`zd, 
            Blank[]]}, 
          Pattern[$CellContext`opt, 
           BlankNullSequence[]]]] := 
       Module[{$CellContext`crv, $CellContext`con, $CellContext`isq, \
$CellContext`a, $CellContext`pos}, $CellContext`crv = \
$CellContext`curvature[$CellContext`q]; $CellContext`con = \
$CellContext`conicConstant[$CellContext`q]; $CellContext`isq = \
$CellContext`zd^2 - ($CellContext`crv^2 (
             1 + $CellContext`con)) ($CellContext`yg $CellContext`zd - \
$CellContext`yd $CellContext`zg)^2 + ((
              2 $CellContext`crv) $CellContext`yd) (-($CellContext`yg \
$CellContext`zd) + $CellContext`yd $CellContext`zg); If[$CellContext`isq < 0., 
           
           Return[$CellContext`noIntersection]]; $CellContext`a = \
($CellContext`zd - $CellContext`crv ($CellContext`yd $CellContext`yg + ((
                1 + $CellContext`con) $CellContext`zd) $CellContext`zg) - 
            Sqrt[$CellContext`isq])/($CellContext`crv ($CellContext`yd^2 + (
              1 + $CellContext`con) $CellContext`zd^2)); $CellContext`pos = \
{$CellContext`yg, $CellContext`zg} + $CellContext`a {$CellContext`yd, \
$CellContext`zd}; If[
           $CellContext`insideImplicitDomain[$CellContext`q][
            
            Part[$CellContext`pos, 
             1]], $CellContext`pos, $CellContext`noIntersection]], \
$CellContext`intersection[
         Pattern[$CellContext`p, 
          Blank[$CellContext`parametric]], 
         $CellContext`ray[{
           Pattern[$CellContext`yg, 
            Blank[]], 
           Pattern[$CellContext`zg, 
            Blank[]]}, {
           Pattern[$CellContext`yd, 
            Blank[]], 
           Pattern[$CellContext`zd, 
            Blank[]]}, 
          Pattern[$CellContext`opt, 
           BlankNullSequence[]]]] := 
       Module[{$CellContext`f, $CellContext`y, $CellContext`ini, \
$CellContext`hsol}, $CellContext`ini = \
$CellContext`heightInDomain[$CellContext`yg - ($CellContext`yd \
$CellContext`zg)/$CellContext`zd, 
            $CellContext`implicitDomain[$CellContext`p]]; $CellContext`f = \
$CellContext`shapeFunction[$CellContext`p]; $CellContext`hsol = 
          If[N[$CellContext`yd] === 0., $CellContext`yg, 
            ReplaceAll[$CellContext`y, 
             
             FindRoot[$CellContext`f[$CellContext`y] == ($CellContext`y \
$CellContext`zd - $CellContext`yg $CellContext`zd + $CellContext`yd \
$CellContext`zg)/$CellContext`yd, {$CellContext`y, $CellContext`ini}]]]; If[
           $CellContext`insideImplicitDomain[$CellContext`p][$CellContext`\
hsol], {$CellContext`hsol, 
            $CellContext`f[$CellContext`hsol]}, \
$CellContext`noIntersection]], $CellContext`insideImplicitDomain[
         PatternTest[
          Pattern[$CellContext`s, 
           Blank[]], $CellContext`shapeQ]] := Between[
         $CellContext`implicitDomain[$CellContext`s]], \
$CellContext`implicitDomain[
         Pattern[$CellContext`s, 
          Blank[]][{
           BlankNullSequence[]}, 
          Pattern[$CellContext`impdom, 
           Blank[]], 
          Blank[]]] := Condition[$CellContext`impdom, 
         $CellContext`shapeQ[$CellContext`s]], $CellContext`heightInDomain[
         Pattern[$CellContext`height, 
          Blank[]], 
         Pattern[$CellContext`dom, {
           Blank[], 
           Blank[]}]] := Condition[$CellContext`height, 
         Between[$CellContext`dom][$CellContext`height]], \
$CellContext`heightInDomain[
         Pattern[$CellContext`height, 
          Blank[]], {
          Pattern[$CellContext`hmin, 
           Blank[]], 
          Pattern[$CellContext`hmax, 
           Blank[]]}] := 
       Condition[$CellContext`hmin, $CellContext`height < $CellContext`hmin], \
$CellContext`heightInDomain[
         Pattern[$CellContext`height, 
          Blank[]], {
          Pattern[$CellContext`hmin, 
           Blank[]], 
          Pattern[$CellContext`hmax, 
           Blank[]]}] := 
       Condition[$CellContext`hmax, $CellContext`hmax < $CellContext`height], \
$CellContext`domainDefinedMarginalRayQ[
         $CellContext`ray[{
           Blank[], 
           Blank[]}, {
           Blank[], 
           Blank[]}, 
          Pattern[$CellContext`opt, 
           BlankNullSequence[]]]] := 
       MemberQ[{$CellContext`opt}, $CellContext`domainDefinedMarginalRay], \
$CellContext`setDomain[
         PatternTest[
          Pattern[$CellContext`surface, 
           Blank[]], $CellContext`surfaceQ], 
         Pattern[$CellContext`pos, 
          Blank[]]] := 
       Module[{$CellContext`h, $CellContext`dom}, $CellContext`h = 
          Part[$CellContext`pos, 
            1]; $CellContext`surface[$CellContext`shape] = \
$CellContext`copyShapeReplacingDomain[
            $CellContext`surface[$CellContext`shape], {-$CellContext`h, \
$CellContext`h}]], $CellContext`copyShapeReplacingDomain[
         Pattern[$CellContext`s, 
          Blank[]][
          Pattern[$CellContext`p, {
            BlankNullSequence[]}], 
          Pattern[$CellContext`impdom, 
           Blank[]], 
          Pattern[$CellContext`dom, 
           Blank[]]], 
         Pattern[$CellContext`newDom, 
          
          Blank[]]] := $CellContext`s[$CellContext`p, $CellContext`impdom, \
$CellContext`newDom], $CellContext`reflectedVector[
         $CellContext`plane[
          BlankSequence[]], {
          Pattern[$CellContext`iind, 
           Blank[]], 
          Pattern[$CellContext`oind, 
           Blank[]]}, 
         Pattern[$CellContext`h, 
          Blank[]], 
         Pattern[$CellContext`r, {
           Pattern[$CellContext`ry, 
            Blank[]], 
           Pattern[$CellContext`rz, 
            Blank[]]}]] := 
       With[{$CellContext`sq = $CellContext`oind^2 - $CellContext`iind^2 + \
$CellContext`rz^2}, 
         If[$CellContext`sq < 0., $Failed, {$CellContext`ry, 
           Sqrt[$CellContext`sq]}]], $CellContext`reflectedVector[
         $CellContext`perfectThinLens[{
           Pattern[$CellContext`f, 
            Blank[]]}, 
          BlankSequence[]], {
          Pattern[$CellContext`iind, 
           Blank[]], 
          Pattern[$CellContext`oind, 
           Blank[]]}, 
         Pattern[$CellContext`h, 
          Blank[]], 
         Pattern[$CellContext`r, {
           Pattern[$CellContext`ry, 
            Blank[]], 
           Pattern[$CellContext`rz, 
            Blank[]]}]] := 
       With[{$CellContext`sq = 
          Sqrt[$CellContext`f^2 + ($CellContext`h - $CellContext`f \
$CellContext`ry)^2] ($CellContext`oind/$CellContext`iind)}, {($CellContext`f \
$CellContext`ry - $CellContext`h)/$CellContext`sq, \
$CellContext`f/$CellContext`sq}], $CellContext`reflectedVector[
         PatternTest[
          Pattern[$CellContext`s, 
           Blank[]], 
          MemberQ[{$CellContext`spherical, $CellContext`quadratic, \
$CellContext`parametric}, 
           Head[#]]& ], {
          Pattern[$CellContext`iind, 
           Blank[]], 
          Pattern[$CellContext`oind, 
           Blank[]]}, 
         Pattern[$CellContext`h, 
          Blank[]], 
         Pattern[$CellContext`r, {
           Blank[], 
           Blank[]}]] := 
       Module[{$CellContext`v, $CellContext`sq, $CellContext`com, \
$CellContext`iprod}, $CellContext`v = \
$CellContext`normalVector[$CellContext`s, $CellContext`h]; 
         If[$CellContext`v === $CellContext`noNormalVector, 
           Return[$CellContext`noNormalVector]]; $CellContext`iprod = 
          
          Dot[$CellContext`r, $CellContext`v]; $CellContext`sq = \
$CellContext`oind^2 - $CellContext`iind^2 + $CellContext`iprod^2; 
         If[$CellContext`sq < 0., 
           Return[$CellContext`totalReflection]]; $CellContext`com = 
          Sqrt[$CellContext`sq] - $CellContext`iprod; $CellContext`r + \
$CellContext`v $CellContext`com], $CellContext`normalVector[
         $CellContext`plane[
          BlankSequence[]], 
         Blank[]] := {0., 1.}, $CellContext`normalVector[
         Pattern[$CellContext`s, 
          Blank[$CellContext`spherical]], 
         Pattern[$CellContext`h, 
          Blank[]]] := Condition[
         Module[{$CellContext`crv, $CellContext`v, $CellContext`sq}, \
$CellContext`crv = $CellContext`curvature[$CellContext`s]; $CellContext`v = \
{(-$CellContext`h) (Sqrt[1. - ($CellContext`crv $CellContext`h)^2]/(
              1./$CellContext`crv - $CellContext`crv $CellContext`h^2)), 
             1.}; $CellContext`sq = 
           Dot[$CellContext`v, $CellContext`v]; $CellContext`v/
           Sqrt[$CellContext`sq]], 
         $CellContext`insideImplicitDomain[$CellContext`s][$CellContext`h]], \
$CellContext`normalVector[
         Pattern[$CellContext`s, 
          Blank[$CellContext`spherical]], 
         Pattern[$CellContext`h, 
          Blank[]]] := Condition[$CellContext`noNormalVector, 
         Not[
          $CellContext`insideImplicitDomain[$CellContext`s][$CellContext`h]]],\
 $CellContext`normalVector[
         Pattern[$CellContext`q, 
          Blank[$CellContext`quadratic]], 
         Pattern[$CellContext`h, 
          Blank[]]] := Condition[
         Module[{$CellContext`crv, $CellContext`con, $CellContext`v, \
$CellContext`sq}, $CellContext`crv = $CellContext`curvature[$CellContext`q]; \
$CellContext`con = $CellContext`conicConstant[$CellContext`q]; $CellContext`v = \
{(-$CellContext`h) (
              Sqrt[1. - (
                 1. + $CellContext`con) ($CellContext`crv $CellContext`h)^2]/(
              1./$CellContext`crv - ((
                1. + $CellContext`con) $CellContext`crv) $CellContext`h^2)), 
             1.}; $CellContext`sq = 
           Dot[$CellContext`v, $CellContext`v]; $CellContext`v/
           Sqrt[$CellContext`sq]], 
         $CellContext`insideImplicitDomain[$CellContext`q][$CellContext`h]], \
$CellContext`normalVector[
         Pattern[$CellContext`q, 
          Blank[$CellContext`quadratic]], 
         Pattern[$CellContext`h, 
          Blank[]]] := Condition[$CellContext`noNormalVector, 
         Not[
          $CellContext`insideImplicitDomain[$CellContext`q][$CellContext`h]]],\
 $CellContext`normalVector[
         Pattern[$CellContext`p, 
          Blank[$CellContext`parametric]], 
         Pattern[$CellContext`h, 
          Blank[]]] := Condition[
         With[{$CellContext`v = \
{-$CellContext`shapeDerivativeFunction[$CellContext`p][$CellContext`h], 
             1}}, $CellContext`v/Sqrt[
           Dot[$CellContext`v, $CellContext`v]]], 
         $CellContext`insideImplicitDomain[$CellContext`p][$CellContext`h]], \
$CellContext`normalVector[
         Pattern[$CellContext`p, 
          Blank[$CellContext`parametric]], 
         Pattern[$CellContext`h, 
          Blank[]]] := Condition[$CellContext`noNormalVector, 
         Not[
          $CellContext`insideImplicitDomain[$CellContext`p][$CellContext`h]]],\
 $CellContext`shapeDerivativeFunction[
         $CellContext`parametric[{
           Blank[], 
           Pattern[$CellContext`df, 
            Blank[]]}, 
          BlankSequence[]]] := $CellContext`df, $CellContext`direction[
         $CellContext`ray[
          Pattern[$CellContext`org, 
           Blank[]], 
          Pattern[$CellContext`dir, 
           Blank[]], 
          
          BlankNullSequence[]]] := $CellContext`dir, \
$CellContext`offsetBackRay[
         $CellContext`ray[{
           Pattern[$CellContext`y, 
            Blank[]], 
           Pattern[$CellContext`z, 
            Blank[]]}, 
          Pattern[$CellContext`dir, 
           Blank[]], 
          Pattern[$CellContext`opt, 
           BlankNullSequence[]]], {
          Pattern[$CellContext`yoff, 
           Blank[]], 
          Pattern[$CellContext`zoff, 
           
           Blank[]]}] := $CellContext`ray[{$CellContext`y + \
$CellContext`yoff, $CellContext`z + $CellContext`zoff}, $CellContext`dir, \
$CellContext`opt], $CellContext`offsetBackRay[
         $CellContext`stoppedRay[$CellContext`noIntersection], {
          Pattern[$CellContext`yoff, 
           Blank[]], 
          Pattern[$CellContext`zoff, 
           
           Blank[]]}] := \
$CellContext`stoppedRay[$CellContext`noIntersection], \
$CellContext`offsetBackRay[
         $CellContext`stoppedRay[{
           Pattern[$CellContext`y, 
            Blank[]], 
           Pattern[$CellContext`z, 
            Blank[]]}, 
          Pattern[$CellContext`a, 
           Blank[]]], {
          Pattern[$CellContext`yoff, 
           Blank[]], 
          Pattern[$CellContext`zoff, 
           
           Blank[]]}] := $CellContext`stoppedRay[{$CellContext`y + \
$CellContext`yoff, $CellContext`z + $CellContext`zoff}, $CellContext`a], \
$CellContext`markRayAsDomainDefinedMarginal[
         Pattern[$CellContext`r, 
          
          Blank[$CellContext`ray]]] := \
$CellContext`appendRayOption[$CellContext`r, \
$CellContext`domainDefinedMarginalRay], $CellContext`appendRayOption[
         $CellContext`ray[
          Pattern[$CellContext`p, 
           Blank[]], 
          Pattern[$CellContext`d, 
           Blank[]], 
          Pattern[$CellContext`o, 
           BlankNullSequence[]]], 
         Pattern[$CellContext`opt, 
          
          BlankNullSequence[]]] := $CellContext`ray[$CellContext`p, \
$CellContext`d, $CellContext`o, $CellContext`opt], $CellContext`raySet[{
          Pattern[$CellContext`y0, 
           Blank[]], 
          Pattern[$CellContext`z0, 
           Blank[]]}, {
          Pattern[$CellContext`yd, 
           Blank[]], 
          Pattern[$CellContext`zd, 
           Blank[]]}, 
         Pattern[$CellContext`opt, 
          
          BlankNullSequence[]]] := $CellContext`ray[{$CellContext`y0, \
$CellContext`z0}, {$CellContext`yd, $CellContext`zd}, $CellContext`opt], \
$CellContext`raySet[{
          Pattern[$CellContext`y0, 
           Blank[]], 
          Pattern[$CellContext`z0, 
           Blank[]]}, 
         PatternTest[
          Pattern[$CellContext`angleToAxis, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`refractiveIndex, 
           Blank[]], NumericQ], 
         Pattern[$CellContext`opt, 
          
          BlankNullSequence[]]] := $CellContext`ray[{$CellContext`y0, \
$CellContext`z0}, {$CellContext`refractiveIndex 
          Sin[$CellContext`angleToAxis], $CellContext`refractiveIndex 
          Cos[$CellContext`angleToAxis]}, $CellContext`opt], \
$CellContext`setPupil[
         PatternTest[
          Pattern[$CellContext`opticsSymbol, 
           Blank[]], $CellContext`opticsQ], 
         PatternTest[
          Pattern[$CellContext`surfaceSymbol, 
           Blank[]], $CellContext`surfaceQ]] := 
       Module[{$CellContext`poss, $CellContext`surf}, $CellContext`poss = \
$CellContext`positionOfAttributedSurface[$CellContext`opticsSymbol, \
$CellContext`pupilSurface, True]; 
         If[$CellContext`poss =!= {}, $CellContext`surfs = Extract[
              $CellContext`opticsSymbol[$CellContext`surfaces], \
$CellContext`poss]; ReleaseHold[
             Map[
             Hold[#[$CellContext`pupilSurface] = 
               False]& , $CellContext`surfs]]]; If[
           MemberQ[
            $CellContext`opticsSymbol[$CellContext`surfaces], \
$CellContext`surfaceSymbol], \
$CellContext`surfaceSymbol[$CellContext`pupilSurface] = True, 
           Message[
            
            MessageName[$CellContext`setPupil, 
             "nosurface"], $CellContext`surfaceSymbol]]; \
$CellContext`opticsSymbol], 
       TagSet[$CellContext`setPupil, 
        MessageName[$CellContext`setPupil, "nosurface"], 
        "optics does not have a surface `1`"], \
$CellContext`positionOfAttributedSurface[
         PatternTest[
          Pattern[$CellContext`op, 
           Blank[]], $CellContext`opticsQ], 
         Pattern[$CellContext`attributeSymbol, 
          Blank[Symbol]], 
         Pattern[$CellContext`attributeValue, 
          Blank[]]] := Position[
         $CellContext`op[$CellContext`surfaces], 
         PatternTest[
          
          Blank[], #[$CellContext`attributeSymbol] === \
$CellContext`attributeValue& ]], $CellContext`setOpticsFor2DRayTraceFinite[
         Pattern[$CellContext`op, 
          Blank[Symbol]], 
         Pattern[$CellContext`solverResult, {
           BlankSequence[Rule]}], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[Rule]]] := 
       Module[{$CellContext`wl, $CellContext`s1, $CellContext`pup, \
$CellContext`s2, $CellContext`img, $CellContext`ref, $CellContext`cg1i, \
$CellContext`cg1o, $CellContext`cg2i, $CellContext`cg2o, $CellContext`bod, \
$CellContext`ncg1, $CellContext`ncg2, $CellContext`do, $CellContext`oplis, \
$CellContext`dec, $CellContext`mrg}, $CellContext`wl = ReplaceAll[
            
            ReplaceAll[$CellContext`tracingWavelength, {$CellContext`opt}], \
{$CellContext`tracingWavelength -> 
             ReplaceAll[$CellContext`designWavelength, \
$CellContext`solverResult]}]; $CellContext`dec = ReplaceAll[
            
            ReplaceAll[$CellContext`decenterBetweenAspherics, \
{$CellContext`opt}], 
            Options[$CellContext`setOpticsFor2DRayTrace]]; $CellContext`oplis = 
          If[
            
            ReplaceAll[$CellContext`objectSideCoverGlassExistence, \
$CellContext`solverResult], $CellContext`createSurface[$CellContext`cg1i, 
              $CellContext`planeShape[], {0, 
               
               ReplaceAll[(-$CellContext`mechanicalObjectDistance)/
                 2 - $CellContext`objectSideCoverGlassThickness/
                2, $CellContext`solverResult]}]; \
$CellContext`createSurface[$CellContext`cg1o, 
              $CellContext`planeShape[], {0, 
               
               ReplaceAll[(-$CellContext`mechanicalObjectDistance)/
                 2 + $CellContext`objectSideCoverGlassThickness/
                 2, $CellContext`solverResult]}]; $CellContext`ncg1 = 
             ReplaceAll[$CellContext`objectSideCoverGlassMediumSymbol, \
$CellContext`solverResult]; {$CellContext`atmosphere, $CellContext`cg1i, \
$CellContext`ncg1, $CellContext`cg1o, $CellContext`atmosphere}, \
{$CellContext`atmosphere}]; $CellContext`createSurface[$CellContext`s1, 
           $CellContext`parametricShape[
            
            ReplaceAll[$CellContext`frontSurfaceShapeFunction, \
$CellContext`solverResult]], {0, 
           0}]; $CellContext`attachAttributeToSurface[$CellContext`s1, \
$CellContext`solverAsphericalSurface, \
$CellContext`frontSolverAsphericalSurface]; \
$CellContext`createSurface[$CellContext`pup, 
           $CellContext`planeShape[], {0, 
            Part[
             $CellContext`marginalPositionOfSurface[$CellContext`s1], -1, 
             1]}]; $CellContext`createSurface[$CellContext`s2, 
           $CellContext`parametricShape[
            
            ReplaceAll[$CellContext`backSurfaceShapeFunction, \
$CellContext`solverResult]], {$CellContext`dec, 
            0}]; $CellContext`attachAttributeToSurface[$CellContext`s2, \
$CellContext`solverAsphericalSurface, \
$CellContext`backSolverAsphericalSurface]; \
$CellContext`createSurface[$CellContext`img, 
           $CellContext`planeShape[{-2, 2}], {0, 
            
            ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`mechanicalImageDistance, $CellContext`solverResult]}]; \
$CellContext`createSurface[$CellContext`ref, 
           $CellContext`sphericalShape[
            ReplaceAll[
            1/$CellContext`focalLength, $CellContext`solverResult]], {0, 
            
            ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`mechanicalImageDistance - $CellContext`focalLength, \
$CellContext`solverResult]}]; $CellContext`bod = 
          ReplaceAll[$CellContext`lensMediumSymbol, \
$CellContext`solverResult]; $CellContext`oplis = 
          Flatten[{$CellContext`oplis, $CellContext`s1, $CellContext`bod, \
$CellContext`pup, $CellContext`bod, $CellContext`s2, \
$CellContext`atmosphere}]; If[
           
           ReplaceAll[$CellContext`coverGlassExistence, \
$CellContext`solverResult], $CellContext`createSurface[$CellContext`cg2i, 
             $CellContext`planeShape[], {0, 
              
              ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`mechanicalImageDistance/2 - $CellContext`coverGlassThickness/
               2, $CellContext`solverResult]}]; \
$CellContext`createSurface[$CellContext`cg2o, 
             $CellContext`planeShape[], {0, 
              
              ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`mechanicalImageDistance/2 + $CellContext`coverGlassThickness/
                2, $CellContext`solverResult]}]; $CellContext`ncg2 = 
            ReplaceAll[$CellContext`coverGlassMediumSymbol, \
$CellContext`solverResult]; $CellContext`oplis = 
            Flatten[{$CellContext`oplis, $CellContext`cg2i, \
$CellContext`ncg2, $CellContext`cg2o, $CellContext`atmosphere}]; 
           Null]; $CellContext`createSurface[$CellContext`img, 
           $CellContext`planeShape[{-2, 2}], {0, 
            
            ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`mechanicalImageDistance, $CellContext`solverResult]}]; \
$CellContext`oplis = 
          Flatten[{$CellContext`oplis, $CellContext`img, \
$CellContext`atmosphere, $CellContext`ref, $CellContext`atmosphere}]; 
         Clear[$CellContext`op]; $CellContext`createOptics[$CellContext`op, \
$CellContext`oplis]; $CellContext`mrg = ArcSin[
            
            ReplaceAll[(-$CellContext`numericalAperture) \
$CellContext`lateralMagnification, $CellContext`solverResult]]; \
$CellContext`do = 
          ReplaceAll[$CellContext`mechanicalObjectDistance, \
$CellContext`solverResult]; $CellContext`traceRay[$CellContext`op][
           $CellContext`markRayAsDomainDefinedMarginal[
            $CellContext`raySet[{0, -$CellContext`do}, {
              Sin[$CellContext`mrg], 
              
              Cos[$CellContext`mrg]}]], $CellContext`wl]; \
$CellContext`setPupil[$CellContext`op, $CellContext`pup]; $CellContext`op], \
$CellContext`rs = {
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{-0.6157894736842106, -0.3}, {0., 1.}], 
           $CellContext`ray[{-0.6157894736842106, 0.36597622489236364`}, {
            0.5747115188795066, 1.4065929051274562`}], 
           $CellContext`ray[{-0.586478733087067, 0.43771357208936196`}, {
            0.5747115188795066, 1.4065929051274562`}], 
           $CellContext`ray[{-0.4539721477519697, 0.762020318504324}, {
            0.6157894157383796, 0.7879107788732079}], 
           $CellContext`ray[{-1.0107408521253802`*^-8, 1.3428837296257439`}, {
            0.6157894157383796, 0.7879107788732079}], 
           $CellContext`ray[{-0.6157894220130931, 0.5549729556565205}, {
            0.6157894157383796, 0.7879107788732079}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{-0.5435672514619884, -0.3}, {0., 1.}], 
           $CellContext`ray[{-0.5435672514619884, 0.2740705921291446}, {
            0.49772391652560494`, 1.4356419587090992`}], 
           $CellContext`ray[{-0.4868337292884251, 0.43771357208936196`}, {
            0.49772391652560494`, 1.4356419587090992`}], 
           $CellContext`ray[{-0.3723634457776698, 0.7678932893521799}, {
            0.5435537003312523, 0.8393743949252939}], 
           $CellContext`ray[{-0.000016870333695018225`, 
            1.3428837296257439`}, {0.5435537003312523, 0.8393743949252939}], 
           $CellContext`ray[{-0.5435655862598139, 0.5035170317909865}, {
            0.5435537003312523, 0.8393743949252939}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{-0.4713450292397661, -0.3}, {0., 1.}], 
           $CellContext`ray[{-0.4713450292397661, 0.1996622724111151}, {
            0.42458010327760237`, 1.4589477943327742`}], 
           $CellContext`ray[{-0.4020678105514983, 0.43771357208936196`}, {
            0.42458010327760237`, 1.4589477943327742`}], 
           $CellContext`ray[{-0.304408921384974, 0.773290345109582}, {
            0.4713507875711337, 0.8819458231978154}], 
           $CellContext`ray[{6.9319761029640325`*^-6, 1.3428837296257439`}, {
            0.4713507875711337, 0.8819458231978154}], 
           $CellContext`ray[{-0.47134539567420086`, 0.4609350247813345}, {
            0.4713507875711337, 0.8819458231978154}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{-0.3991228070175439, -0.3}, {0., 1.}], 
           $CellContext`ray[{-0.3991228070175439, 0.1396068656615343}, {
            0.3546257975429173, 1.477510566596644}], 
           $CellContext`ray[{-0.32757250415685313`, 0.43771357208936196`}, {
            0.3546257975429173, 1.477510566596644}], 
           $CellContext`ray[{-0.24589571586944875`, 0.7780112001143291}, {
            0.3991008520661022, 0.9169070344806561}], 
           $CellContext`ray[{-0.000024434093939373902`, 
            1.3428837296257439`}, {0.3991008520661022, 0.9169070344806561}], 
           $CellContext`ray[{-0.3991213941609889, 0.425985636747921}, {
            0.3991008520661022, 0.9169070344806561}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{-0.3269005847953217, -0.3}, {0., 1.}], 
           $CellContext`ray[{-0.3269005847953217, 0.09182057279990491}, {
            0.28727914888594225`, 1.492068236141717}], 
           $CellContext`ray[{-0.2603031973337183, 0.43771357208936196`}, {
            0.28727914888594225`, 1.492068236141717}], 
           $CellContext`ray[{-0.19402054907581107`, 0.7819718813209966}, {
            0.3269040701215139, 0.945057526787649}], 
           $CellContext`ray[{4.006036170373095*^-6, 1.3428837296257439`}, {
            0.3269040701215139, 0.945057526787649}], 
           $CellContext`ray[{-0.3269004921931481, 0.39782496520742605`}, {
            0.3269040701215139, 0.945057526787649}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{-0.2546783625730995, -0.3}, {0., 1.}], 
           $CellContext`ray[{-0.2546783625730995, 0.054894364379121374`}, {
            0.22187117487715796`, 1.5031866525639175`}], 
           $CellContext`ray[{-0.1981740374213684, 0.43771357208936196`}, {
            0.22187117487715796`, 1.5031866525639175`}], 
           $CellContext`ray[{-0.1468937993737366, 0.7851393673337376}, {
            0.25466977952584097`, 0.9670280778737809}], 
           $CellContext`ray[{-0.000010128644141127463`, 
            1.3428837296257439`}, {0.25466977952584097`, 0.9670280778737809}], 
           $CellContext`ray[{-0.2546792512473661, 0.37585814620817937`}, {
            0.25466977952584097`, 0.9670280778737809}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{-0.18245614035087726`, -0.3}, {0., 1.}], 
           $CellContext`ray[{-0.18245614035087726`, 0.027867202503460645`}, {
            0.1579485072374314, 1.51124094695358}], 
           $CellContext`ray[{-0.1396207325337, 0.43771357208936196`}, {
            0.1579485072374314, 1.51124094695358}], 
           $CellContext`ray[{-0.10306132063348511`, 0.787511624799627}, {
            0.18245576760607907`, 0.9832140625862085}], 
           $CellContext`ray[{-5.045315304569309*^-7, 1.3428837296257439`}, {
            0.18245576760607907`, 0.9832140625862085}], 
           $CellContext`ray[{-0.18245625534167836`, 0.3596697575491199}, {
            0.18245576760607907`, 0.9832140625862085}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{-0.11023391812865502`, -0.3}, {0., 1.}], 
           $CellContext`ray[{-0.11023391812865502`, 0.01009932727018199}, {
            0.0950275488876541, 1.5164981686899892`}], 
           $CellContext`ray[{-0.08343854547765199, 0.43771357208936196`}, {
            0.0950275488876541, 1.5164981686899892`}], 
           $CellContext`ray[{-0.06142020707994415, 0.7890934640109826}, {
            0.11023435919255711`, 0.9939056223069708}], 
           $CellContext`ray[{8.309814189255693*^-7, 1.3428837296257439`}, {
            0.11023435919255711`, 0.9939056223069708}], 
           $CellContext`ray[{-0.11023353830886595`, 0.34897801627466973`}, {
            0.11023435919255711`, 0.9939056223069708}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{-0.03801169590643283, -0.3}, {0., 1.}], 
           $CellContext`ray[{-0.03801169590643283, 0.001196618477247648}, {
            0.032699229318457354`, 1.519120696682678}], 
           $CellContext`ray[{-0.028615623560945908`, 0.43771357208936196`}, {
            0.032699229318457354`, 1.519120696682678}], 
           $CellContext`ray[{-0.02103493976200924, 0.7898923204573386}, {
            0.03801241560963256, 0.9992772669582356}], 
           $CellContext`ray[{8.027380193724454*^-7, 1.3428837296257439`}, {
            0.03801241560963256, 0.9992772669582356}], 
           $CellContext`ray[{-0.03801161403151222, 0.3436064321758724}, {
            0.03801241560963256, 0.9992772669582356}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{0.03421052631578936, -0.3}, {0., 1.}], 
           $CellContext`ray[{0.03421052631578936, 
            0.0009691773362203635}, {-0.029427550447402865`, 
            1.519187595381937}], 
           $CellContext`ray[{0.02575053246888902, 
            0.43771357208936196`}, {-0.029427550447402865`, 
            1.519187595381937}], 
           $CellContext`ray[{0.018928228216670884`, 
            0.7899127811406184}, {-0.03421112262935076, 
            0.9994146282141559}], 
           $CellContext`ray[{-6.091197377114388*^-7, 
            1.3428837296257439`}, {-0.03421112262935076, 0.9994146282141559}], 
           $CellContext`ray[{0.034210514222521006`, 
            0.34346908058530146`}, {-0.03421112262935076, 
            0.9994146282141559}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{0.10643274853801155`, -0.3}, {0., 1.}], 
           $CellContext`ray[{0.10643274853801155`, 
            0.009412223367749847}, {-0.0917349892671429, 
            1.5167009007816419`}], 
           $CellContext`ray[{0.08052769395023393, 
            0.43771357208936196`}, {-0.0917349892671429, 
            1.5167009007816419`}], 
           $CellContext`ray[{0.059271379103148315`, 
            0.7891549592136127}, {-0.10643285855671283`, 0.9943198914934003}], 
           $CellContext`ray[{-2.2594494203387328`*^-7, 
            1.3428837296257439`}, {-0.10643285855671283`, 
            0.9943198914934003}], 
           $CellContext`ray[{0.10643263517126185`, 
            0.348563814220998}, {-0.10643285855671283`, 
            0.9943198914934003}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{0.17865497076023384`, -0.3}, {0., 1.}], 
           $CellContext`ray[{0.17865497076023384`, 
            0.026705617226607883`}, {-0.1546138242582979, 1.511585755435632}], 
           $CellContext`ray[{0.13661467534636354`, 
            0.43771357208936196`}, {-0.1546138242582979, 
            1.511585755435632}], 
           $CellContext`ray[{0.10082476623767755`, 
            0.7876144755599795}, {-0.17865360186414542`, 0.9839120339445836}], 
           $CellContext`ray[{1.8788037656342071`*^-6, 
            1.3428837296257439`}, {-0.17865360186414542`, 
            0.9839120339445836}], 
           $CellContext`ray[{0.17865542070162033`, 
            0.3589720259378941}, {-0.17865360186414542`, 
            0.9839120339445836}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{0.25087719298245603`, -0.3}, {0., 1.}], 
           $CellContext`ray[{0.25087719298245603`, 
            0.05323194544141367}, {-0.21849411273244873`, 
            1.5036812339684718`}], 
           $CellContext`ray[{0.19500965272283377`, 
            0.43771357208936196`}, {-0.21849411273244873`, 
            1.5036812339684718`}], 
           $CellContext`ray[{0.14450544379558958`, 
            0.7852846359070547}, {-0.25088545194122963`, 0.9680167818815152}], 
           $CellContext`ray[{-0.000010129950689025113`, 
            1.3428837296257439`}, {-0.25088545194122963`, 
            0.9680167818815152}], 
           $CellContext`ray[{0.2508759595931308, 
            0.3748644876174946}, {-0.25088545194122963`, 
            0.9680167818815152}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{0.3230994152046782, -0.3}, {0., 1.}], 
           $CellContext`ray[{0.3230994152046782, 
            0.08961635798335697}, {-0.2837882207898725, 1.492736137577102}], 
           $CellContext`ray[{0.2569216852185895, 
            0.43771357208936196`}, {-0.2837882207898725, 
            1.492736137577102}], 
           $CellContext`ray[{0.1914383391081898, 
            0.7821583023054196}, {-0.32309810416752677`, 0.9463654764853535}], 
           $CellContext`ray[{1.3868658528259914`*^-6, 
            1.3428837296257439`}, {-0.32309810416752677`, 
            0.9463654764853535}], 
           $CellContext`ray[{0.32309934625486736`, 
            0.3965186772016398}, {-0.32309810416752677`, 
            0.9463654764853535}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{0.3953216374269005, -0.3}, {0., 1.}], 
           $CellContext`ray[{0.3953216374269005, 
            0.1368006717807515}, {-0.351057691112292, 1.4783624143621186`}], 
           $CellContext`ray[{0.32386568928997195`, 
            0.43771357208936196`}, {-0.351057691112292, 1.4783624143621186`}], 
           $CellContext`ray[{0.2430028719129695, 
            0.7782403657078787}, {-0.39534165704610946`, 0.9185341442777376}], 
           $CellContext`ray[{-0.000022435879922927393`, 
            1.3428837296257439`}, {-0.39534165704610946`, 
            0.9185341442777376}], 
           $CellContext`ray[{0.3953227276986683, 
            0.4243414382940466}, {-0.39534165704610946`, 
            0.9185341442777376}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{0.4675438596491227, -0.3}, {0., 1.}], 
           $CellContext`ray[{0.4675438596491227, 
            0.19616549497329094`}, {-0.42081615628379876`, 
            1.460037908171639}], 
           $CellContext`ray[{0.3979242060765539, 
            0.43771357208936196`}, {-0.42081615628379876`, 
            1.460037908171639}], 
           $CellContext`ray[{0.30112663502815434`, 
            0.7735564836297856}, {-0.46753838055701713`, 0.8839727726045195}], 
           $CellContext`ray[{6.117689523355008*^-6, 
            1.3428837296257439`}, {-0.46753838055701713`, 
            0.8839727726045195}], 
           $CellContext`ray[{0.46754316096087584`, 
            0.45891348542138555`}, {-0.46753838055701713`, 
            0.8839727726045195}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{0.5397660818713449, -0.3}, {0., 1.}], 
           $CellContext`ray[{0.5397660818713449, 
            0.26975172428009586`}, {-0.4937750001642061, 
            1.4370049338469664`}], 
           $CellContext`ray[{0.48205204103811217`, 
            0.43771357208936196`}, {-0.4937750001642061, 
            1.4370049338469664`}], 
           $CellContext`ray[{0.36849525974346165`, 
            0.7681913300518494}, {-0.5397434435502898, 0.8418295641900889}], 
           $CellContext`ray[{0.000028211396664146182`, 
            1.3428837296257439`}, {-0.5397434435502898, 
            0.8418295641900889}], 
           $CellContext`ray[{0.5397634361664567, 
            0.5010669841414435}, {-0.5397434435502898, 0.8418295641900889}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{0.6119883040935671, -0.3}, {0., 1.}], 
           $CellContext`ray[{0.6119883040935671, 
            0.36063386681285337`}, {-0.5705579022171396, 
            1.4082828589829757`}], 
           $CellContext`ray[{0.5807598937883816, 
            0.43771357208936196`}, {-0.5705579022171396, 
            1.4082828589829757`}], 
           $CellContext`ray[{0.4492408991885074, 
            0.7623360950724701}, {-0.6119790996955321, 0.7908739352993285}], 
           $CellContext`ray[{0.000012516677941498688`, 
            1.3428837296257439`}, {-0.6119790996955321, 
            0.7908739352993285}], 
           $CellContext`ray[{0.6119869286170616, 
            0.5520158524162473}, {-0.6119790996955321, 
            0.7908739352993285}]}]}, $CellContext`rayCongruenceGraphics[
         Pattern[$CellContext`rss, {
           BlankSequence[$CellContext`raySequence]}], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[Rule]]] := 
       Module[{$CellContext`rc, $CellContext`cnt}, $CellContext`rc = \
$CellContext`raySegmentCount[
             Part[$CellContext`rss, 1]] + If[
             ReplaceAll[
              ReplaceAll[$CellContext`removeLast, {$CellContext`opt}], 
              Options[$CellContext`rayCongruenceGraphics]], -1, 
             0]; $CellContext`cnt = ReplaceAll[
            ReplaceAll[$CellContext`rayCount, {$CellContext`opt}], 
            Options[$CellContext`rayCongruenceGraphics]]; 
         If[$CellContext`cnt > Length[$CellContext`rss], $CellContext`cnt = 
           Length[$CellContext`rss]]; Graphics[{Thin, 
            Map[$CellContext`rayLineToDraw[#, $CellContext`rc]& , 
             $CellContext`thinOutFromBothSide[$CellContext`rss, \
$CellContext`cnt]]}]], 
       Options[$CellContext`rayCongruenceGraphics] = {$CellContext`rayCount -> 
         12, $CellContext`removeLast -> False}, $CellContext`raySegmentCount[
         $CellContext`raySequence[
          Pattern[$CellContext`lambda, 
           Blank[]], 
          Pattern[$CellContext`rays, 
           Blank[List]]]] := 
       Length[$CellContext`rays], $CellContext`rayLineToDraw[
         Pattern[$CellContext`rs, 
          Blank[$CellContext`raySequence]]] := Line[
         $CellContext`reflectedPointsToDraw[$CellContext`rs]], \
$CellContext`rayLineToDraw[
         Pattern[$CellContext`rs, 
          Blank[$CellContext`raySequence]], {
          Pattern[$CellContext`from, 
           Blank[]], 
          Pattern[$CellContext`upto, 
           Blank[]]}] := Line[
         Take[
          $CellContext`reflectedPointsToDraw[$CellContext`rs], \
{$CellContext`from, $CellContext`upto}]], $CellContext`rayLineToDraw[
         Pattern[$CellContext`rs, 
          Blank[$CellContext`raySequence]], 
         Pattern[$CellContext`count, 
          Blank[]]] := Line[
         Take[
          $CellContext`reflectedPointsToDraw[$CellContext`rs], \
$CellContext`count]], $CellContext`reflectedPointsToDraw[
         Pattern[$CellContext`rs, 
          Blank[$CellContext`raySequence]]] := Map[Reverse, 
         Map[$CellContext`origin, 
          $CellContext`sequenceOfRays[$CellContext`rs]]], \
$CellContext`sequenceOfRays[
         $CellContext`raySequence[
          Pattern[$CellContext`lambda, 
           Blank[]], 
          Pattern[$CellContext`rays, 
           Blank[List]]]] := Cases[$CellContext`rays, 
         Except[$CellContext`untraceableRay]], \
$CellContext`thinOutFromBothSide[
         Pattern[$CellContext`lis, 
          Blank[List]], 
         Pattern[$CellContext`n, 
          Blank[]]] := 
       Module[{$CellContext`subs, $CellContext`nhalf}, $CellContext`nhalf = 
          Floor[$CellContext`n/2]; $CellContext`subs = 
          Partition[$CellContext`lis, 
            Floor[Length[$CellContext`lis]/2]]; Join[
           $CellContext`thinOut[
            Part[$CellContext`subs, 1], $CellContext`nhalf], 
           Reverse[
            $CellContext`thinOut[
             Reverse[
              
              Part[$CellContext`subs, 
               2]], $CellContext`nhalf]]]], $CellContext`thinOut[
         Pattern[$CellContext`lis, 
          Blank[List]], 
         Pattern[$CellContext`n, 
          Blank[]]] := Map[First, 
         Partition[$CellContext`lis, 
          Round[
          Length[$CellContext`lis]/$CellContext`n]]], \
$CellContext`opticsGraphics[
         PatternTest[
          Pattern[$CellContext`opti, 
           Blank[]], $CellContext`opticsQ], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[Rule]]] := 
       Module[{$CellContext`sus, $CellContext`osurfs, $CellContext`omeds, \
$CellContext`cnt, $CellContext`surs, $CellContext`bulks, $CellContext`meds, \
$CellContext`mbet, $CellContext`mpir}, $CellContext`sus = ReplaceAll[
            ReplaceAll[$CellContext`hideUselessSurface, {$CellContext`opt}], 
            
            Options[$CellContext`opticsGraphics]]; {$CellContext`osurfs, \
$CellContext`omeds} = If[$CellContext`sus, 
            $CellContext`removeUselessSurfaces[
             $CellContext`opti[$CellContext`surfaces], 
             $CellContext`opti[$CellContext`mediums]], {
             $CellContext`opti[$CellContext`surfaces], 
             $CellContext`opti[$CellContext`mediums]}]; $CellContext`cnt = 
          Length[$CellContext`osurfs] + If[
             And[
              ReplaceAll[
               ReplaceAll[$CellContext`removeLast, {$CellContext`opt}], 
               Options[$CellContext`opticsGraphics]], 
              Not[$CellContext`sus]], -1, 0]; $CellContext`surs = 
          Take[$CellContext`osurfs, $CellContext`cnt]; $CellContext`bulks = \
$CellContext`neighbouringPair[$CellContext`surs]; $CellContext`meds = 
          Append[$CellContext`omeds, $CellContext`atmosphere]; \
$CellContext`mbet = Take[
            Rest[$CellContext`meds], $CellContext`cnt - 
            1]; $CellContext`mpair = Take[
            $CellContext`neighbouringPair[$CellContext`meds], \
$CellContext`cnt]; Show[
           Thread[
            $CellContext`lensGraphics[$CellContext`bulks, $CellContext`mbet]], 
           Thread[
            $CellContext`singleSurfaceGraphics[$CellContext`surs, \
$CellContext`mpair]]]], 
       Options[$CellContext`opticsGraphics] = {$CellContext`removeLast -> 
         False, $CellContext`hideUselessSurface -> 
         True}, $CellContext`removeUselessSurfaces[
         Pattern[$CellContext`surfs, 
          Blank[]], 
         Pattern[$CellContext`meds, 
          Blank[]]] := 
       With[{$CellContext`poss = $CellContext`positionToDifferent[
            $CellContext`neighbouringPair[$CellContext`meds]]}, {
          Extract[$CellContext`surfs, $CellContext`poss], 
          
          Extract[$CellContext`meds, $CellContext`poss]}], \
$CellContext`positionToDifferent[
         Pattern[$CellContext`l, 
          Blank[List]]] := Position[$CellContext`l, 
         PatternTest[
          Blank[], Part[#, 1] =!= Part[#, 2]& ], 1, Heads -> 
         False], $CellContext`neighbouringPair[
         Pattern[$CellContext`l, 
          Blank[List]]] := Most[
         Transpose[{$CellContext`l, 
           
           RotateLeft[$CellContext`l]}]], $CellContext`mpair = \
{{$CellContext`atmosphere, $CellContext`n$bk7}, {$CellContext`n$bk7, \
$CellContext`atmosphere}}, $CellContext`lensGraphics[{
          PatternTest[
           Pattern[$CellContext`s1, 
            Blank[]], $CellContext`surfaceQ], 
          PatternTest[
           Pattern[$CellContext`s2, 
            
            Blank[]], $CellContext`surfaceQ]}, $CellContext`atmosphere] := \
{}, $CellContext`lensGraphics[{
          PatternTest[
           Pattern[$CellContext`s1, 
            Blank[]], $CellContext`surfaceQ], 
          PatternTest[
           Pattern[$CellContext`s2, 
            Blank[]], $CellContext`surfaceQ]}, 
         Blank[]] := $CellContext`bulkLensGraphics[$CellContext`s1, \
$CellContext`s2], $CellContext`bulkLensGraphics[
         PatternTest[
          Pattern[$CellContext`s1, 
           Blank[]], $CellContext`surfaceQ], 
         PatternTest[
          Pattern[$CellContext`s2, 
           Blank[]], $CellContext`surfaceQ]] := Show[
         Graphics[
          Join[$CellContext`lineStyles, {
            $CellContext`edgeConnectingLines[$CellContext`s1, \
$CellContext`s2]}]], 
         $CellContext`surfaceGraphics[$CellContext`s1], 
         $CellContext`surfaceGraphics[$CellContext`s2]], \
$CellContext`lineStyles = {
         CapForm["Round"], 
         JoinForm["Round"], 
         GrayLevel[0], 
         AbsoluteThickness[1.6]}, $CellContext`edgeConnectingLines[
         Pattern[$CellContext`s1, 
          Blank[]], 
         Pattern[$CellContext`s2, 
          Blank[]]] := 
       Module[{$CellContext`p1, $CellContext`p2}, $CellContext`p1 = \
$CellContext`marginalPosition[$CellContext`s1]; $CellContext`p2 = \
$CellContext`marginalPosition[$CellContext`s2]; {
           $CellContext`edgeLine[
            Part[$CellContext`p1, 1], 
            Part[$CellContext`p2, 1]], 
           $CellContext`edgeLine[
            Part[$CellContext`p1, 2], 
            Part[$CellContext`p2, 2]]}], $CellContext`edgeLine[
         Pattern[$CellContext`p1, {
           Blank[], 
           Blank[]}], 
         Pattern[$CellContext`p2, {
           Blank[], 
           Blank[]}]] := Line[{$CellContext`p1, 
          $CellContext`cornerPostion[$CellContext`p1, $CellContext`p2], \
$CellContext`p2}], $CellContext`cornerPostion[{
          Pattern[$CellContext`x1, 
           Blank[]], 
          Pattern[$CellContext`y1, 
           Blank[]]}, {
          Pattern[$CellContext`x2, 
           Blank[]], 
          Pattern[$CellContext`y2, 
           Blank[]]}] := 
       Condition[{$CellContext`x2, $CellContext`y1}, Abs[$CellContext`y1] >= 
         Abs[$CellContext`y2]], $CellContext`cornerPostion[{
          Pattern[$CellContext`x1, 
           Blank[]], 
          Pattern[$CellContext`y1, 
           Blank[]]}, {
          Pattern[$CellContext`x2, 
           Blank[]], 
          Pattern[$CellContext`y2, 
           Blank[]]}] := 
       Condition[{$CellContext`x1, $CellContext`y2}, Abs[$CellContext`y1] < 
         Abs[$CellContext`y2]], $CellContext`surfaceGraphics[
         PatternTest[
          Pattern[$CellContext`s, 
           Blank[]], $CellContext`surfaceQ]] := 
       Module[{$CellContext`h, $CellContext`isec}, $CellContext`isec = 
          Interval[
            $CellContext`domain[
             $CellContext`s[$CellContext`shape]]]; ParametricPlot[
           Evaluate[$CellContext`shapeFunctionToDraw[
              $CellContext`s[$CellContext`shape]][$CellContext`h] + Reverse[
              $CellContext`s[$CellContext`origin]]], 
           Evaluate[
            Flatten[
             Join[{$CellContext`h}, 
              MinMax[$CellContext`isec]]]], 
           PlotStyle :> $CellContext`lineStyles]], \
$CellContext`surfaceGraphics[
         PatternTest[
          Pattern[$CellContext`s, 
           Blank[]], $CellContext`surfaceQ], 
         Pattern[$CellContext`dom, {
           Blank[], 
           Blank[]}]] := 
       Module[{$CellContext`h, $CellContext`isec}, $CellContext`isec = 
          IntervalIntersection[
            Interval[$CellContext`dom], 
            Interval[
             $CellContext`domain[
              $CellContext`s[$CellContext`shape]]]]; ParametricPlot[
           Evaluate[$CellContext`shapeFunctionToDraw[
              $CellContext`s[$CellContext`shape]][$CellContext`h] + Reverse[
              $CellContext`s[$CellContext`origin]]], 
           Evaluate[
            Flatten[
             Join[{$CellContext`h}, 
              MinMax[$CellContext`isec]]]], 
           PlotStyle :> $CellContext`lineStyles]], \
$CellContext`surfaceGraphics[
         PatternTest[
          Pattern[$CellContext`s, 
           Blank[]], $CellContext`surfaceQ], 
         BlankNullSequence[]] := Condition[
         Graphics[], 
         $CellContext`hiddenQ[$CellContext`s]], \
$CellContext`singleSurfaceGraphics[
         PatternTest[
          Pattern[$CellContext`s, 
           
           Blank[]], $CellContext`surfaceQ], {$CellContext`atmosphere, \
$CellContext`atmosphere}] := $CellContext`surfaceGraphics[$CellContext`s], \
$CellContext`singleSurfaceGraphics[
         PatternTest[
          Pattern[$CellContext`s, 
           Blank[]], $CellContext`surfaceQ], {
          Blank[], 
          Blank[]}] := {}, $CellContext`showCoefficients[
         Pattern[$CellContext`result, 
          Blank[]], 
         Pattern[$CellContext`s1order, 
          Blank[]], 
         Pattern[$CellContext`s2order, 
          Blank[]]] := 
       Module[{$CellContext`fit1, $CellContext`fit2}, $CellContext`fit1 = \
$CellContext`fitAsphericalFormula[
            
            ReplaceAll[$CellContext`frontSurfaceShapeFunction, \
$CellContext`result], 
            
            ReplaceAll[$CellContext`frontSurfaceCurvature, \
$CellContext`result], $CellContext`s1order, $CellContext`conicSuggestion -> \
-1.]; $CellContext`fit2 = $CellContext`fitAsphericalFormula[
            
            ReplaceAll[$CellContext`backSurfaceShapeFunction, \
$CellContext`result], 
            
            ReplaceAll[$CellContext`backSurfaceCurvature, \
$CellContext`result], $CellContext`s2order]; MessageDialog[
           Grid[{{"Front Surface", "", ""}, {"", "Curvature", 
              
              ReplaceAll[$CellContext`curvature, $CellContext`fit1]}}]]], \
$CellContext`showCoefficients[
         Pattern[$CellContext`result, 
          Blank[]]] := 
       Module[{$CellContext`fit1, $CellContext`fit2}, $CellContext`fit1 = \
$CellContext`fitAsphericalFormula[
            
            ReplaceAll[$CellContext`frontSurfaceShapeFunction, \
$CellContext`result], 
            
            ReplaceAll[$CellContext`frontSurfaceCurvature, \
$CellContext`result], 10, $CellContext`conicSuggestion -> -1.]; 
         If[$CellContext`fit1 == $Failed, 
           MessageDialog["Sorry fitting procedure failed."]; 
           Return[]]; $CellContext`fit2 = $CellContext`fitAsphericalFormula[
            
            ReplaceAll[$CellContext`backSurfaceShapeFunction, \
$CellContext`result], 
            
            ReplaceAll[$CellContext`backSurfaceCurvature, \
$CellContext`result], 10, $CellContext`conicSuggestion -> 1.]; 
         If[$CellContext`fit2 == $Failed, 
           MessageDialog["Sorry fitting procedure failed."]; Return[]]; 
         MessageDialog[
           Grid[{{"Surface 1", "", ""}, {"", "curvature", 
              ReplaceAll[$CellContext`curvature, $CellContext`fit1]}, {
             "", "conic", 
              ReplaceAll[$CellContext`conicConstant, $CellContext`fit1]}, {
             "", "4th", 
              ReplaceAll[
               $CellContext`powerSeriesCoefficients[4], $CellContext`fit1]}, {
             "", "6th", 
              ReplaceAll[
               $CellContext`powerSeriesCoefficients[6], $CellContext`fit1]}, {
             "", "8th", 
              ReplaceAll[
               $CellContext`powerSeriesCoefficients[8], $CellContext`fit1]}, {
             "", "10th", 
              ReplaceAll[
               $CellContext`powerSeriesCoefficients[
               10], $CellContext`fit1]}, {"Surface 2", "", ""}, {
             "", "curvature", 
              ReplaceAll[$CellContext`curvature, $CellContext`fit2]}, {
             "", "conic", 
              ReplaceAll[$CellContext`conicConstant, $CellContext`fit2]}, {
             "", "4th", 
              ReplaceAll[
               $CellContext`powerSeriesCoefficients[4], $CellContext`fit2]}, {
             "", "6th", 
              ReplaceAll[
               $CellContext`powerSeriesCoefficients[6], $CellContext`fit2]}, {
             "", "8th", 
              ReplaceAll[
               $CellContext`powerSeriesCoefficients[8], $CellContext`fit2]}, {
             "", "10th", 
              ReplaceAll[
               $CellContext`powerSeriesCoefficients[10], $CellContext`fit2]}},
             Alignment -> {
             Right, Baseline}]]], $CellContext`fitAsphericalFormula["formula"][
         Pattern[$CellContext`y, 
          Blank[]]] = ($CellContext`curvature $CellContext`y^2)/(1 + 
         Sqrt[1 - ((
             1 + $CellContext`conicConstant) $CellContext`curvature^2) \
$CellContext`y^2]) + $CellContext`y^4 $CellContext`powerSeriesCoefficients[
          4] + $CellContext`y^6 $CellContext`powerSeriesCoefficients[
          6] + $CellContext`y^8 $CellContext`powerSeriesCoefficients[
          8] + $CellContext`y^10 $CellContext`powerSeriesCoefficients[
          10], $CellContext`fitAsphericalFormula[
         Pattern[$CellContext`fittedResult, {
           RepeatedNull[
            Blank[Rule]]}]][
         Pattern[$CellContext`y, 
          Blank[]]] := Condition[
         Module[{$CellContext`orders, $CellContext`quad, $CellContext`pw}, \
$CellContext`quad = 
           ReplaceAll[($CellContext`curvature $CellContext`y^2)/(1 + 
             Sqrt[1 - ($CellContext`curvature^2 (
                 1 + $CellContext`conicConstant)) $CellContext`y^2]), \
$CellContext`fittedResult]; $CellContext`orders = Cases[
             Map[
             First, $CellContext`fittedResult], \
$CellContext`powerSeriesCoefficients[
               Pattern[$CellContext`i, 
                Blank[]]] -> $CellContext`i]; $CellContext`pw = ReplaceAll[
             
             Map[$CellContext`powerSeriesCoefficients[#] $CellContext`y^#& , \
$CellContext`orders], $CellContext`fittedResult]; $CellContext`quad + 
           Apply[Plus, $CellContext`pw] + 
           ReplaceAll[$CellContext`constantOffset, \
$CellContext`fittedResult]], 
         Not[
          MemberQ[
           Map[
           First, $CellContext`fittedResult], \
$CellContext`normalizationRadius]]], $CellContext`fitAsphericalFormula[
         Pattern[$CellContext`fittedResult, {
           RepeatedNull[
            Blank[Rule]]}]][
         Pattern[$CellContext`y, 
          Blank[]]] := Condition[
         Module[{$CellContext`orders, $CellContext`quad, $CellContext`pw, \
$CellContext`rad}, $CellContext`rad = 
           ReplaceAll[$CellContext`normalizationRadius, \
$CellContext`fittedResult]; $CellContext`quad = 
           ReplaceAll[($CellContext`curvature $CellContext`y^2)/(1 + 
             Sqrt[1 - ($CellContext`curvature^2 (
                 1 + $CellContext`conicConstant)) $CellContext`y^2]), \
$CellContext`fittedResult]; $CellContext`orders = Cases[
             Map[
             First, $CellContext`fittedResult], \
$CellContext`powerSeriesCoefficients[
               Pattern[$CellContext`i, 
                Blank[]]] -> $CellContext`i]; $CellContext`pw = ReplaceAll[
             
             Map[$CellContext`powerSeriesCoefficients[#] \
($CellContext`y/$CellContext`rad)^#& , $CellContext`orders], \
$CellContext`fittedResult]; $CellContext`quad + Apply[Plus, $CellContext`pw] + 
           
           ReplaceAll[$CellContext`constantOffset, \
$CellContext`fittedResult]], 
         MemberQ[
          Map[
          First, $CellContext`fittedResult], \
$CellContext`normalizationRadius]], $CellContext`fitAsphericalFormula[
        "output"] = {$CellContext`constantOffset, $CellContext`curvature, \
$CellContext`conicConstant, $CellContext`powerSeriesCoefficients}, \
$CellContext`fitAsphericalFormula[
         Pattern[$CellContext`if, 
          Blank[InterpolatingFunction]], 
         PatternTest[
          Pattern[$CellContext`explicitCurvature, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`heighestOrder, 
           Blank[]], IntegerQ], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[Rule]]] := 
       Module[{$CellContext`orgv, $CellContext`quad, $CellContext`quadk, \
$CellContext`y, $CellContext`surfpnts, $CellContext`k, $CellContext`kini, \
$CellContext`ksol, $CellContext`fk, $CellContext`ppnt, $CellContext`spow, \
$CellContext`kval, $CellContext`csug, $CellContext`para, $CellContext`normr, \
$CellContext`ret}, $CellContext`csug = ReplaceAll[
            ReplaceAll[$CellContext`conicSuggestion, {$CellContext`opt}], 
            Options[$CellContext`fitAsphericalFormula]]; $CellContext`para = 
          ReplaceAll[
            ReplaceAll[$CellContext`forceParabolic, {$CellContext`opt}], 
            
            Options[$CellContext`fitAsphericalFormula]]; $CellContext`quad = \
($CellContext`explicitCurvature $CellContext`y^2)/(1 + 
           Sqrt[1 - ($CellContext`explicitCurvature^2 (
               1 + $CellContext`k)) $CellContext`y^2]); $CellContext`orgv = \
$CellContext`if[0]; $CellContext`surfpnts = 
          Map[{#, $CellContext`if[#] - $CellContext`orgv}& , 
            $CellContext`interpolationSectionPoints[$CellContext`if]]; \
$CellContext`ksol = 
          If[$CellContext`para, {{$CellContext`k -> -1}}, $CellContext`kini = 
             Check[
               
               FindFit[$CellContext`surfpnts, $CellContext`quad, \
{{$CellContext`k, $CellContext`csug}}, $CellContext`y], Message[
                 MessageName[$CellContext`fitAsphericalFormula, "cantfindk"]]; 
               Return[$Failed]]; \
$CellContext`minimize2ndCoefficient[$CellContext`surfpnts, $CellContext`quad, \
$CellContext`kini, $CellContext`y]]; $CellContext`quadk = 
          ReplaceAll[$CellContext`quad, 
            Part[$CellContext`ksol, -1]]; $CellContext`kval = 
          ReplaceAll[$CellContext`k, 
            Part[$CellContext`ksol, -1]]; $CellContext`ppnt = Map[{
             Part[#, 1], 
             ReplaceAll[
             Part[#, 2] - $CellContext`quadk, $CellContext`y -> 
              Part[#, 1]]}& , $CellContext`surfpnts]; $CellContext`spow = 
          If[$CellContext`heighestOrder < 4, {}, 
            If[$CellContext`heighestOrder <= 16, 
             CoefficientList[
              Fit[$CellContext`ppnt, 
               
               Table[$CellContext`y^$CellContext`n, {$CellContext`n, 
                 4, $CellContext`heighestOrder, 
                 2}], $CellContext`y], $CellContext`y], $CellContext`normr = 
              Max[
                Abs[
                 $CellContext`interpolationDomain[$CellContext`if]]]; 
             CoefficientList[
               Fit[
                $CellContext`normalizeRadius[$CellContext`ppnt, \
$CellContext`normr], 
                
                Table[$CellContext`y^$CellContext`n, {$CellContext`n, 
                  4, $CellContext`heighestOrder, 
                  2}], $CellContext`y], $CellContext`y]]]; $CellContext`ret = 
          Flatten[{$CellContext`constantOffset -> $CellContext`orgv, \
$CellContext`curvature -> $CellContext`explicitCurvature, \
$CellContext`conicConstant -> $CellContext`kval, 
             Select[
              
              MapIndexed[$CellContext`powerSeriesCoefficients[
                Part[#2, 1] - 1] -> #& , $CellContext`spow], Part[#, -1] =!= 
              0& ]}]; If[
           NumericQ[$CellContext`normr], 
           
           AppendTo[$CellContext`ret, $CellContext`normalizationRadius -> \
$CellContext`normr], $CellContext`ret]; If[
           ReplaceAll[
            
            ReplaceAll[$CellContext`outputMathematicaFunction, \
{$CellContext`opt}], 
            
            Options[$CellContext`fitAsphericalFormula]], \
$CellContext`fitAsphericalFormula[$CellContext`ret][#]& , $CellContext`ret]], 
       Options[$CellContext`fitAsphericalFormula] = \
{$CellContext`forceParabolic -> False, $CellContext`conicSuggestion -> 
         0, $CellContext`outputMathematicaFunction -> False}, 
       TagSet[$CellContext`fitAsphericalFormula, 
        MessageName[$CellContext`fitAsphericalFormula, "cantfindk"], 
        "can not find proper conic constant value. Try to specify \
suggestions."], 
       TagSet[$CellContext`fitAsphericalFormula, 
        MessageName[$CellContext`fitAsphericalFormula, "usage"], 
        "fitAsphericalFormula[if_InterpolatingFunction,explicitCurvature_?\
NumericQ,heighestOrder_,opt___] returns coefficients of aspherical formura \
from InterpolationFunction. This call needs to specify paraxial curvature of \
the function.\nfitAsphericalFormula[\"output\"] returns tag symbols of fitted \
coefficients.\nfitAsphericalFormula[fittedResult:{_Rule...}][y_] returns a \
Mathematica function for variable 'y' to give a result of fitted \
coefficients.\nfitAsphericalFormula[\"formula\"][y_] returns aspherical \
formula for variable y."], 
       TagSet[$CellContext`conicSuggestion, 
        MessageName[$CellContext`conicSuggestion, "usage"], 
        "conicSuggestion is an option of fitAsphericalFormula. It specifies \
initial value for conic constant. The default value is 0.0."], 
       TagSet[$CellContext`forceParabolic, 
        MessageName[$CellContext`forceParabolic, "usage"], 
        "forceParabolic is an option of fitAsphericalFormula. Fitting will be \
tried using conic constant = -1."], $CellContext`minimize2ndCoefficient[
         Pattern[$CellContext`pnts, {
           RepeatedNull[{
             Blank[], 
             Blank[]}]}], 
         Pattern[$CellContext`func, 
          Blank[]], {Pattern[$CellContext`coef, 
            Blank[Symbol]] -> PatternTest[
            Pattern[$CellContext`ival, 
             Blank[]], NumberQ]}, 
         Pattern[$CellContext`v, 
          Blank[Symbol]]] := Module[{$CellContext`x, $CellContext`fv}, 
         FindMinimum[$CellContext`fv = ReplaceAll[
             Fit[
              Map[{
                Part[#, 1], Part[#, 2] - 
                ReplaceAll[$CellContext`func, $CellContext`v -> 
                 Part[#, 
                   1]]}& , $CellContext`pnts], {$CellContext`x^2}, \
$CellContext`x], $CellContext`x -> 
             1]^2, {$CellContext`coef, $CellContext`ival}]], \
$CellContext`normalizeRadius[
         Pattern[$CellContext`pnts, {
           RepeatedNull[{
             Blank[], 
             Blank[]}]}], 
         Pattern[$CellContext`rad, 
          Blank[]]] := Map[{Part[#, 1]/$CellContext`rad, 
          Part[#, 2]}& , $CellContext`pnts], 
       TagSet[$CellContext`outputMathematicaFunction, 
        MessageName[$CellContext`outputMathematicaFunction, "usage"], 
        "outputMathematicaFunction is an option of fitAsphericalFormula. If \
it is specified True, fitAsphericalFormula returns Mathematica Function."]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.823291687989029*^9, {3.8233130492486773`*^9, 3.823313057655411*^9}, 
   3.823313095622357*^9, 3.823313248290296*^9, 3.823318815337562*^9, 
   3.8233193112900467`*^9, {3.823319478914151*^9, 3.823319492809099*^9}, {
   3.823319651020454*^9, 3.8233196723494263`*^9}, {3.823319703489818*^9, 
   3.82331971074615*^9}, {3.823319785408732*^9, 3.8233197921665497`*^9}, 
   3.8233198273208227`*^9, 3.823320049367628*^9, 3.823320162640717*^9, 
   3.823320233367013*^9, {3.823320263587097*^9, 3.82332029346671*^9}, 
   3.8233203266959*^9, {3.823320428164702*^9, 3.823320455003463*^9}, 
   3.823320515225607*^9, 3.8233205671550283`*^9, 3.8233206162828283`*^9, 
   3.823320954677079*^9, 3.8247773354955683`*^9, 3.824777420969677*^9, 
   3.824777504102038*^9},
 CellLabel->"Out[365]=",
 CellID->1990220094,ExpressionUUID->"6c6c93ff-cf83-4c1d-beb3-e30e5d47d61a"]
}, {2}]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Caption",
 Cell[BoxData[
  TemplateBox[{"Caption", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
        TextData[{
         "The caption provides all the information needed to understand the \
Demonstration. It should be between three and five sentences long, but \
clarity is more important than length. Include only text in this section \
\[LongDash] no code, graphics, etc. Do not change the cell style or copy \
cells from other sections. Do not copy text from books or the web. Write your \
ideas in your own words. If you want to refer to something on the web, link \
to it in the Details.", 
          StyleBox["\n", FontSize -> 4]}], "MoreInfoText"], Background -> 
       GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
       RoundingRadius -> 5]], "MoreInfoText", Deletable -> True, 
     CellTags -> {"SectionMoreInfoDefinition"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "a97b5d36-1c59-4018-b3f0-6bfc71662d3d"]
}], "ManipulateCaptionSection",
 CellTags->"Caption",ExpressionUUID->"3ed78bfd-4459-4d2a-906f-3e9e6aba33a4"],

Cell["\<\
An infinite conjugate bi-aspherical singlet lens with completely aplanatic, \
i.e., both no spherical aberration (stigmatic) and no coma aberration can be \
designed.\
\>", "ManipulateCaption",
 CellChangeTimes->{{3.8232861144671173`*^9, 3.823286367707864*^9}, {
  3.823286405693214*^9, 3.8232864292243643`*^9}, {3.823286496696278*^9, 
  3.823286505754135*^9}, {3.8232868994445353`*^9, 3.823287183289502*^9}, {
  3.823287468027835*^9, 3.8232874731931133`*^9}, {3.823287569839643*^9, 
  3.8232875840211563`*^9}, {3.8232876249988956`*^9, 3.8232876325055*^9}, {
  3.82328769112993*^9, 3.823287714380261*^9}, {3.8232877881189632`*^9, 
  3.823287788628418*^9}, {3.823287846441968*^9, 3.823287907626258*^9}, {
  3.823288454491268*^9, 3.8232884915712843`*^9}, {3.823291100178009*^9, 
  3.8232911008180847`*^9}, {3.823291515340019*^9, 
  3.8232915170712833`*^9}},ExpressionUUID->"71921e4e-c8c2-4f05-96e3-\
4e3047349e9a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Thumbnail",
 Cell[BoxData[
  TemplateBox[{"Thumbnail", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
        TextData[{
         "To create the thumbnail, copy and paste the output cell from the ", 
          
          StyleBox["Manipulate", "MRbig"], 
          " section and adjust the controls to the most visually appealing \
setting. Do not convert it to a bitmap. The thumbnail is what visitors see \
when browsing the Demonstrations site and while the Flash preview loads.", 
          StyleBox["\n", FontSize -> 4]}], "MoreInfoText"], Background -> 
       GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
       RoundingRadius -> 5]], "MoreInfoText", Deletable -> True, 
     CellTags -> {"SectionMoreInfoDefinition"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "5363174b-397a-4e31-b8e5-95e1af887bc9"]
}], "ThumbnailSection",
 CellTags->"Thumbnail",ExpressionUUID->"401cc3c4-8319-4e19-82e7-df5fcb711a42"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`cod$$ = 
    0.7799999999999999, $CellContext`g$$ = "N-SF15", $CellContext`nat$$ = 
    0.43700000000000006`, $CellContext`nrays$$ = 20.3, $CellContext`thk$$ = 
    0.42200000000000004`, $CellContext`wl$$ = 532., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"\:540d\:79f0\:672a\:5b9a\:7fa9\"", Typeset`specs$$ = {{{
       Hold[$CellContext`nat$$], 0.3, "Target N.A."}, 0.1, 0.99}, {{
       Hold[$CellContext`thk$$], 1., "Thickness"}, 0.1, 2}, {{
       Hold[$CellContext`cod$$], 0.5, "CSF"}, -0.95, 3}, {{
       Hold[$CellContext`nrays$$], 9, "Number of rays"}, 3, 61}, {{
       Hold[$CellContext`wl$$], 532., "Wavelength"}, 405., 800.}, {{
       Hold[$CellContext`g$$], "N-BK7", "Glass name"}, {
      "N-BK7", "N-K5", "N-SK2", "N-SF15", "N-LASF9", "N-SF11", "N-SF5", 
       "N-SF10", "N-BAK4", "BAFN10", "N-SF5"}}}, Typeset`size$$ = {
    360., {110., 114.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`cod$$ = 0.5, $CellContext`g$$ = 
        "N-BK7", $CellContext`nat$$ = 0.3, $CellContext`nrays$$ = 
        9, $CellContext`thk$$ = 1., $CellContext`wl$$ = 532.}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ($CellContext`result = Quiet[
          $CellContext`biasphericAplanatSolve[
           $CellContext`setupBiasphericAplanatParameters[{$CellContext`\
designWavelength -> $CellContext`wl$$ 
              1.*^-6, $CellContext`numericalApertureTarget -> \
$CellContext`nat$$, $CellContext`lensMediumSymbol -> \
$CellContext`mediumCatalog[$CellContext`g$$], \
$CellContext`lensMediumThickness -> $CellContext`thk$$, \
$CellContext`coddingtonShapeFactor -> $CellContext`cod$$, \
$CellContext`focalLength -> 
             1.}]]]; $CellContext`setOpticsFor2DRayTrace[$CellContext`op, \
$CellContext`result]; $CellContext`rs = 
        Map[$CellContext`traceRay[$CellContext`op][#, 
           ReplaceAll[$CellContext`designWavelength, $CellContext`result]]& , 
          
          Table[
           $CellContext`raySet[{$CellContext`h, -0.3}, {0, 1}], 
           Evaluate[
            
            ReplaceAll[{$CellContext`h, (-$CellContext`numericalAperture) (
               Round[$CellContext`nrays$$]/(Round[$CellContext`nrays$$] + 
               0.5)), $CellContext`numericalAperture, \
$CellContext`numericalAperture/
              Round[$CellContext`nrays$$]}, $CellContext`result]]]]; Show[
         Quiet[
          $CellContext`rayCongruenceGraphics[$CellContext`rs, \
$CellContext`removeLast -> True, $CellContext`rayCount -> 
           Round[$CellContext`nrays$$]]], 
         $CellContext`opticsGraphics[$CellContext`op, \
$CellContext`hideUselessSurface -> True], 
         Graphics[{{Red, 
            PointSize[Large], 
            Point[{
              
              ReplaceAll[$CellContext`thk$$ + \
$CellContext`paraxialWorkingDistance, $CellContext`result], 0.}]}, 
           Text[If[
              
              ReplaceAll[$CellContext`numericalApertureTarget > \
$CellContext`numericalAperture, $CellContext`result], " Maximum N.A.= ", 
              "N.A.= "] <> ToString[
              
              ReplaceAll[$CellContext`numericalAperture, \
$CellContext`result]], {$CellContext`thk$$ + 0.1, 
             
             ReplaceAll[$CellContext`numericalAperture + 
              0.05, $CellContext`result]}], 
           Text[
           "Thickness= " <> 
            ToString[$CellContext`thk$$], {$CellContext`thk$$ 0.5, 
             
             ReplaceAll[$CellContext`numericalAperture + 
              0.05, $CellContext`result]}], 
           Text[" R1= " <> ToString[
              ReplaceAll[
               NumberForm[
               1/$CellContext`frontSurfaceCurvature, 
                3], $CellContext`result]], {0., 
             
             ReplaceAll[-$CellContext`numericalAperture - 
              0.05, $CellContext`result]}, {-1, 0}], 
           Text[" R2= " <> ToString[
              ReplaceAll[
               NumberForm[
               1/$CellContext`backSurfaceCurvature, 
                3], $CellContext`result]], {$CellContext`thk$$, 
             
             ReplaceAll[-$CellContext`numericalAperture - 
              0.05, $CellContext`result]}, {-1, 0}], 
           Text["W.D.= " <> ToString[
              ReplaceAll[
               
               NumberForm[$CellContext`paraxialWorkingDistance, 
                3], $CellContext`result]], {
             
             ReplaceAll[$CellContext`thk$$ + 
              0.5 $CellContext`paraxialWorkingDistance, $CellContext`result], 
             
             ReplaceAll[
             0.5 $CellContext`numericalAperture, $CellContext`result]}, {-1, 
            0}]}], Axes -> True, PlotRange -> Evaluate[{{(-1)/5, 
             If[
             ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`paraxialWorkingDistance, $CellContext`result] > 1.5, 
              ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`paraxialWorkingDistance, $CellContext`result] + 0.2, 1.5]}, 
            If[
            ReplaceAll[$CellContext`numericalAperture, $CellContext`result] > 
             0.4, {-ReplaceAll[$CellContext`numericalAperture, \
$CellContext`result] - 0.1, 
              ReplaceAll[$CellContext`numericalAperture, $CellContext`result] + 
              0.1}, {-0.5, 0.5}]}]]), 
      "Specifications" :> {{{$CellContext`nat$$, 0.3, "Target N.A."}, 0.1, 
         0.99}, {{$CellContext`thk$$, 1., "Thickness"}, 0.1, 
         2}, {{$CellContext`cod$$, 0.5, "CSF"}, -0.95, 
         3}, {{$CellContext`nrays$$, 9, "Number of rays"}, 3, 
         61}, {{$CellContext`wl$$, 532., "Wavelength"}, 405., 
         800.}, {{$CellContext`g$$, "N-BK7", "Glass name"}, {
         "N-BK7", "N-K5", "N-SK2", "N-SF15", "N-LASF9", "N-SF11", "N-SF5", 
          "N-SF10", "N-BAK4", "BAFN10", "N-SF5"}}}, "Options" :> {}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{403., {223., 229.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`result = \
{$CellContext`frontSurfaceShapeFunction -> 
         InterpolatingFunction[{{-0.306, 0.306}}, {
           5, 7, 0, {45}, {4}, 0, 0, 0, 0, Automatic, {}, {}, 
            False}, CompressedData["
1:eJxTTMoPSmViYGBgBGJdINa/q8LWOPXy/umqEszfYi/t/5/LzZCtdnE/C1f6
+h+fzu3ntNgeJz3z9H6+NHY+O/sT+9fvXLzS9cnR/QG8Dq6+nYf3f0q48yBE
7+B+tcyPP3Ys27s/U0DL4MSHHftDV7QeDnDdtt/J4WHYzZmb9+vdsHmV+G7D
ftMHBr+vtK7Z/4PpVdfigyv271FdLFX0d8n+Bo+YVQ6WC/fXHdHlT/efsf/P
e9fJMyN69qf9kc28Vi4ApRn2M0ABlG8PlbeHqreH6reHmmcPNd8eap891H57
qHvsoe6zh7rXHup+e6h/7KH+s4f61x7qf3toeNhDw8ceGl720PCzh4anPTR8
7QHBorIK
           "], {
           Developer`PackedArrayForm, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 
            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 
            28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 
            44, 45}, CompressedData["
1:eJxTTMoPSmVkYGDQBWLrR3bxM/5vsZ83d7rwtMRN9ru+XeQSfbneXsz0xUvf
ayvtz+ilb2UsWmJ/Yb/vSq68+fbTeqeun9k7017s982t7b5T7PulIySUwvvt
+T//m9bg3W7/zp/txfmSBvtjty/NjrWssv/1fVnTQ58S+6QjJzvOuuXZT//4
xrGnItW+MWZD4WTtBPt0BedIXbtw+5PiPiv0vf3tJ7x/5qmmZW8vn/Ht5zs9
VfstKU8bzYtM7Rxf9DJ6zZCxY4ACGB8mD1MP0w8zD2Y+zD6Y/TD3wNwHcy/M
/TD/wPwH8y/M/7DwgIUPLLxg4QcLT1j4AgDeZKkM
            "]}, {
           Automatic}], $CellContext`backSurfaceShapeFunction -> 
         InterpolatingFunction[{{-0.13750057646650674`, 
           0.13750057646650674`}}, {
           5, 7, 0, {45}, {4}, 0, 0, 0, 0, Automatic, {}, {}, 
            False}, CompressedData["
1:eJxTTMoPSmViYGBgBGJdIH6Y2Zs/b+bB/bU70ooKkw7sP1zR+TMoed/+rM9l
l77o7d7/b7nO0j+8O/ZrqVVcu/d3y365I7WH2+9v2h9UU9XXc3zDfp4XL8+G
Za3dHxsULhrkv3L/1upze+fbLN3/1G+uyY0Pi/ZHGM/i4Fm+YH/3s4/NP/fO
2b+dRVTspsGM/fMY0ti6/0zZr3E2Jy3o5MT9m/c3h3Hq9e6vkq588Hxqy/65
kil3k/+X7193+MGJqIe/95kEfD8e9fD1PgYogPLtoPJ2UPX2UP32UPPsoebb
Q+2zh9pvD3WPPdR99lD32kPdbw/1jz3Uf/ZQ/9pD/W8PDQ97aPjYQ8PLHhp+
9tDwtIeGrz0AlJrCtg==
           "], {
           Developer`PackedArrayForm, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 
            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 
            28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 
            44, 45}, CompressedData["
1:eJxTTMoPSmVkYGDQBWLXl5439996b19XGuLNc/+9vff5vj6Fx+/tpcX/OEe/
eG/voFb5Xfrte/sm97TUmI/v7aPaHTi5vry3/9txc07Jt/f2a5Ru8Mz+8d7+
ydJFFTW/3ttf9/quKfHnvb0my33/R0A6d67B6al/39sLtmt3Gv17b3++RLtq
B5CetPydKed/oH6e631+QDoyfGJjB5BuW+lTdQRIewlYHXkNpD1Zr///D6Ql
wj+BaQYw+ADnw+Rh6mH6YebBzIfZB7Mf5h6Y+2Duhbkf5h+Y/2D+hfkfFh6w
8IGFFyz8YOEJC18A+ZjKhw==
            "]}, {
           Automatic}], $CellContext`numericalAperture -> 
         0.3, $CellContext`designWavelength -> 
         0.000532, $CellContext`numericalApertureTarget -> 
         0.3, $CellContext`lensMediumSymbol -> $CellContext`n$bk7, \
$CellContext`lensMediumThickness -> 1., $CellContext`coddingtonShapeFactor -> 
         0.5, $CellContext`focalLength -> 
         1., $CellContext`lensMediumRefractiveIndex -> 
         1.5194725830654814`, $CellContext`coverGlassExistence -> 
         False, $CellContext`mechanicalImageDistance -> 
         0.42324653988392896`, $CellContext`frontSurfaceCurvature -> 
         1.6870208330591572`, $CellContext`backSurfaceCurvature -> \
-0.5623402776863841, $CellContext`conjugateInfiniteness -> 
         True, $CellContext`paraxialWorkingDistance -> 
         0.42324653988392896`, $CellContext`marginRatio -> 1.02}, 
       UpSet[
        $CellContext`mediumQ[$CellContext`n$bk7], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`n$bk7], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            1.01046945/(-103.56065299999999` + 
             1000000 $CellContext`lambda$^2) + 
            0.231792344/(-0.0200179144 + 1000000 $CellContext`lambda$^2) + 
            1.03961212/(-0.00600069867 + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`n$bk7[$CellContext`lambdaDomain] = {0.00030000000000000003`, 
        0.0025}, $CellContext`n$bk7[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           1.01046945/(-103.56065299999999` + 1000000 $CellContext`lambda$^2) + 
           0.231792344/(-0.0200179144 + 1000000 $CellContext`lambda$^2) + 
           1.03961212/(-0.00600069867 + 
            1000000 $CellContext`lambda$^2))], \
$CellContext`n$bk7[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`n$bk7[$CellContext`mediumName] = 
       "N-BK7", $CellContext`n$bk7[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`n$bk7[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (1.03961212/($CellContext`lsq$ - 0.00600069867) + 
             0.231792344/($CellContext`lsq$ - 0.0200179144) + 
             1.01046945/($CellContext`lsq$ - 
              103.56065299999999`)) $CellContext`lsq$]]], $CellContext`mediumQ[
         Blank[]] := False, $CellContext`refractiveIndexValue[
         PatternTest[
          Pattern[$CellContext`medium, 
           Blank[]], $CellContext`mediumQ], 
         PatternTest[
          Pattern[$CellContext`lambda, 
           Blank[]], 
          NumberQ]] := \
$CellContext`refractiveIndexValue[$CellContext`medium][$CellContext`lambda], 
       TagSet[$CellContext`refractiveIndexValue, 
        MessageName[$CellContext`refractiveIndexValue, "outofrange"], 
        "wavelength `1` is not in range `2` to `3`"], 
       Attributes[$CellContext`lambda$] = {Temporary}, 
       Attributes[$CellContext`lsq$] = {
        Temporary}, $CellContext`paraxialWorkingDistance[
         PatternTest[
          Pattern[$CellContext`d, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`n, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`f, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`cod, 
           Blank[]], NumericQ]] := 
       With[{$CellContext`smsq = ($CellContext`n $CellContext`f) \
($CellContext`n $CellContext`f + ($CellContext`cod^2 - 1) $CellContext`d)}, 
         If[$CellContext`smsq < 0., 
          Message[
           
           MessageName[$CellContext`setupBiasphericAplanatParameters, 
            "inconsistent"]], 
          0.]], $CellContext`setupBiasphericAplanatParameters[
         Pattern[$CellContext`parameters, 
          BlankSequence[
          Rule]]] := \
$CellContext`setupBiasphericAplanatParameters[{$CellContext`parameters}], \
$CellContext`setupBiasphericAplanatParameters[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`wl, $CellContext`lm, $CellContext`n, \
$CellContext`icQ, $CellContext`ocQ, $CellContext`difid, $CellContext`difod, \
$CellContext`pwd, $CellContext`pod, $CellContext`poi, $CellContext`paramp, \
$CellContext`paraparm, $CellContext`conj, $CellContext`remp}, $CellContext`wl = 
          ReplaceAll[$CellContext`designWavelength, $CellContext`parameters]; 
         If[
           Not[
            NumericQ[$CellContext`wl]], Message[
             
             MessageName[$CellContext`setupBiasphericAplanatParameters, 
              "needslambda"]]; Return[$CellContext`$Fialed]]; $CellContext`lm = 
          ReplaceAll[$CellContext`lensMediumSymbol, $CellContext`parameters]; 
         If[
           Not[
            $CellContext`mediumQ[$CellContext`lm]], Message[
             
             MessageName[$CellContext`setupBiasphericAplanatParameters, 
              "notmedium"], $CellContext`lm, $CellContext`lensMediumSymbol]; 
           Return[$Failed]]; $CellContext`n = \
$CellContext`refractiveIndexValue[$CellContext`lm, $CellContext`wl]; \
$CellContext`icQ = \
$CellContext`hasImageSpaceCoverGlassPresentQ[$CellContext`parameters]; \
$CellContext`difid = If[$CellContext`icQ, 
            Check[
             $CellContext`differenceToParaxialCoverGlass[$CellContext`wl, \
{$CellContext`coverGlassMediumSymbol, $CellContext`coverGlassThickness}, \
$CellContext`parameters], 
             Return[$CellContext`parameters]], 0.]; $CellContext`pwd = 
          ReplaceAll[$CellContext`mechanicalImageDistance, \
$CellContext`parameters]; $CellContext`ocQ = \
$CellContext`hasObjectSpaceCoverGlassPresentQ[$CellContext`parameters]; \
$CellContext`difod = If[$CellContext`ocQ, 
            Check[
             $CellContext`differenceToParaxialCoverGlass[$CellContext`wl, \
{$CellContext`objectSideCoverGlassMediumSymbol, \
$CellContext`objectSideCoverGlassThickness}, $CellContext`parameters], 
             Return[$CellContext`parameters]], 0.]; $CellContext`pod = 
          ReplaceAll[$CellContext`mechanicalObjectDistance, \
$CellContext`parameters]; $CellContext`poi = 
          ReplaceAll[$CellContext`mechanicalObjectImageDistance, \
$CellContext`parameters]; $CellContext`paramp = 
          Flatten[{$CellContext`parameters, \
$CellContext`lensMediumRefractiveIndex -> $CellContext`n, 
             If[
              
              NumericQ[$CellContext`pwd], \
$CellContext`paraxialWorkingDistance -> $CellContext`pwd + $CellContext`difid,
               Nothing], 
             If[
              
              NumericQ[$CellContext`pod], $CellContext`paraxialObjectDistance -> \
$CellContext`pod + $CellContext`difod, Nothing], 
             If[
              
              NumericQ[$CellContext`poi], \
$CellContext`paraxialObjectImageDistance -> $CellContext`poi + \
$CellContext`difid + $CellContext`difod, Nothing]}]; $CellContext`paraparm = 
          Check[
            $CellContext`settleRemainedParaxialParameters[$CellContext`paramp]\
, 
            Return[$Failed]]; $CellContext`remp = {
            If[
             Not[
              
              NumericQ[$CellContext`pwd]], \
$CellContext`mechanicalImageDistance -> 
             ReplaceAll[$CellContext`paraxialWorkingDistance, \
$CellContext`paraparm] - $CellContext`difid, Nothing], 
            If[
             Not[
              
              ReplaceAll[$CellContext`conjugateInfiniteness, \
$CellContext`paraparm]], {
              If[
               Not[
                
                NumericQ[$CellContext`pod]], \
$CellContext`mechanicalObjectDistance -> 
               ReplaceAll[$CellContext`paraxialObjectDistance, \
$CellContext`paraparm] - $CellContext`difod, Nothing], 
              If[
               Not[
                
                NumericQ[$CellContext`poi]], \
$CellContext`mechanicalObjectImageDistance -> 
               ReplaceAll[$CellContext`paraxialObjectImageDistance, \
$CellContext`paraparm] - $CellContext`difid - $CellContext`difod, Nothing]}, 
             Nothing]}; Apply[Sequence, 
           
           Flatten[{$CellContext`paramp, $CellContext`coverGlassExistence -> \
$CellContext`icQ, 
             If[
              
              ReplaceAll[$CellContext`conjugateInfiniteness, \
$CellContext`paraparm], 
              Nothing, $CellContext`objectSideCoverGlassExistence -> \
$CellContext`ocQ], $CellContext`remp, $CellContext`paraparm, 
             Options[$CellContext`setupBiasphericAplanatParameters]}]]], 
       Options[$CellContext`setupBiasphericAplanatParameters] := \
{$CellContext`marginRatio -> $CellContext`$marginRatio}, 
       TagSet[$CellContext`setupBiasphericAplanatParameters, 
        MessageName[$CellContext`setupBiasphericAplanatParameters, 
         "needslambda"], 
        "design wavelength should be specified by 'designWavelength->x' with \
unit in milli meters."], 
       TagSet[$CellContext`setupBiasphericAplanatParameters, 
        MessageName[$CellContext`setupBiasphericAplanatParameters, 
         "notmedium"], 
        "`1` symbol for `2` is not a medium symbol."], \
$CellContext`hasImageSpaceCoverGlassPresentQ[
         Pattern[$CellContext`parameters, 
          BlankSequence[
          Rule]]] := \
$CellContext`hasImageSpaceCoverGlassPresentQ[{$CellContext`parameters}], \
$CellContext`hasImageSpaceCoverGlassPresentQ[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       With[{$CellContext`plist = Map[First, $CellContext`parameters]}, 
         If[
          
          SubsetQ[$CellContext`plist, {$CellContext`coverGlassMediumSymbol, \
$CellContext`coverGlassThickness}], 
          And[
          ReplaceAll[$CellContext`coverGlassMediumSymbol, \
$CellContext`parameters] =!= $CellContext`atmosphere, N[
             
             ReplaceAll[$CellContext`coverGlassThickness, \
$CellContext`parameters]] > 0.], False]], 
       UpSet[
        $CellContext`mediumQ[$CellContext`atmosphere], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`atmosphere], 
        Function[{$CellContext`lambda$}, 
         $CellContext`atmosphere[$CellContext`lastIndex]]], \
$CellContext`atmosphere[$CellContext`lambdaDomain] = 
       All, $CellContext`atmosphere[$CellContext`lastIndex] = 
       1., $CellContext`atmosphere[$CellContext`lastLambda] = 
       0., $CellContext`atmosphere[$CellContext`mediumName] = 
       "atmosphere", $CellContext`atmosphere[$CellContext`mediumType] = \
$CellContext`constantMedium, $CellContext`differenceToParaxialCoverGlass[
         Pattern[$CellContext`wavelength, 
          Blank[]], {
          Pattern[$CellContext`cgms, 
           Blank[]], 
          Pattern[$CellContext`cgt, 
           Blank[]]}, 
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`mc, $CellContext`nc, $CellContext`dc, \
$CellContext`wd}, $CellContext`mc = 
          ReplaceAll[$CellContext`cgms, $CellContext`parameters]; If[
           Not[
            $CellContext`mediumQ[$CellContext`mc]], Message[
             
             MessageName[$CellContext`setupBiasphericAplanatParameters, 
              "notmedium"], $CellContext`mc, $CellContext`cgms]; 
           Return[$Failed]]; $CellContext`nc = \
$CellContext`refractiveIndexValue[$CellContext`mc, $CellContext`wavelength]; \
$CellContext`dc = 
          ReplaceAll[$CellContext`cgt, $CellContext`parameters]; \
$CellContext`paraxialThickessDifferenceFromMechanical[$CellContext`nc, \
$CellContext`dc]], $CellContext`paraxialThickessDifferenceFromMechanical[
         Pattern[$CellContext`ncg, 
          Blank[]], 
         Pattern[$CellContext`dcg, 
          Blank[]]] = $CellContext`dcg (-1. + 
         1./$CellContext`ncg), $CellContext`hasObjectSpaceCoverGlassPresentQ[
         Pattern[$CellContext`parameters, 
          BlankSequence[
          Rule]]] := \
$CellContext`hasObjectSpaceCoverGlassPresentQ[{$CellContext`parameters}], \
$CellContext`hasObjectSpaceCoverGlassPresentQ[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       With[{$CellContext`plist = Map[First, $CellContext`parameters]}, 
         If[
          
          SubsetQ[$CellContext`plist, \
{$CellContext`objectSideCoverGlassMediumSymbol, \
$CellContext`objectSideCoverGlassThickness}], 
          And[
          ReplaceAll[$CellContext`objectSideCoverGlassMediumSymbol, \
$CellContext`parameters] =!= $CellContext`atmosphere, N[
             
             ReplaceAll[$CellContext`objectSideCoverGlassThickness, \
$CellContext`parameters]] > 0.], 
          False]], $CellContext`settleRemainedParaxialParameters[
         Pattern[$CellContext`parameterSet, 
          BlankSequence[
          Rule]]] := \
$CellContext`settleRemainedParaxialParameters[{$CellContext`parameterSet}], \
$CellContext`settleRemainedParaxialParameters[
         Pattern[$CellContext`parameterSet, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`f, $CellContext`n, $CellContext`d, \
$CellContext`c, $CellContext`i, $CellContext`o, $CellContext`oi, \
$CellContext`\[Beta], $CellContext`ret}, $CellContext`f = ReplaceAll[
            ReplaceAll[$CellContext`focalLength, $CellContext`parameterSet], 
            
            Options[$CellContext`settleRemainedParaxialParameters]]; \
$CellContext`n = ReplaceAll[
            
            ReplaceAll[$CellContext`lensMediumRefractiveIndex, \
$CellContext`parameterSet], 
            
            Options[$CellContext`settleRemainedParaxialParameters]]; \
$CellContext`d = ReplaceAll[
            
            ReplaceAll[$CellContext`lensMediumThickness, \
$CellContext`parameterSet], 
            
            Options[$CellContext`settleRemainedParaxialParameters]]; \
$CellContext`c = ReplaceAll[
            
            ReplaceAll[$CellContext`coddingtonShapeFactor, \
$CellContext`parameterSet], 
            
            Options[$CellContext`settleRemainedParaxialParameters]]; \
$CellContext`i = ReplaceAll[
            
            ReplaceAll[$CellContext`paraxialWorkingDistance, \
$CellContext`parameterSet], 
            
            Options[$CellContext`settleRemainedParaxialParameters]]; \
$CellContext`o = ReplaceAll[
            
            ReplaceAll[$CellContext`paraxialObjectDistance, \
$CellContext`parameterSet], 
            
            Options[$CellContext`settleRemainedParaxialParameters]]; \
$CellContext`oi = ReplaceAll[
            
            ReplaceAll[$CellContext`paraxialObjectImageDistance, \
$CellContext`parameterSet], 
            
            Options[$CellContext`settleRemainedParaxialParameters]]; \
$CellContext`\[Beta] = ReplaceAll[
            
            ReplaceAll[$CellContext`lateralMagnification, \
$CellContext`parameterSet], 
            Options[$CellContext`settleRemainedParaxialParameters]]; If[
           $CellContext`infiniteParameterSetQ[$CellContext`f, $CellContext`n, \
$CellContext`d, $CellContext`c, $CellContext`i, $CellContext`o, \
$CellContext`oi, $CellContext`\[Beta]], 
           Return[
            $CellContext`settleRemainedParaxialParametersInfinite[$\
CellContext`d, $CellContext`n, $CellContext`f, $CellContext`i, \
$CellContext`c]]]; 
         Check[$CellContext`ret = $CellContext`tautologyCheck[$CellContext`d, \
$CellContext`i, $CellContext`o, $CellContext`oi], 
           Return[$Failed]]; If[
           Not[
            NumericQ[$CellContext`i]], $CellContext`i = ReplaceAll[
             ReplaceAll[
              
              ReplaceAll[$CellContext`paraxialWorkingDistance, \
$CellContext`ret], $CellContext`parameterSet], 
             Options[$CellContext`settleRemainedParaxialParameters]]]; If[
           Not[
            NumericQ[$CellContext`o]], $CellContext`o = ReplaceAll[
             ReplaceAll[
              
              ReplaceAll[$CellContext`paraxialObjectDistance, \
$CellContext`ret], $CellContext`parameterSet], 
             Options[$CellContext`settleRemainedParaxialParameters]]]; 
         Flatten[{$CellContext`ret, 
            $CellContext`settleRemainedParaxialParametersFinite[$CellContext`\
d, $CellContext`n, $CellContext`f, $CellContext`i, $CellContext`c, \
$CellContext`o, $CellContext`\[Beta]]}]], 
       Options[$CellContext`settleRemainedParaxialParameters] = \
{$CellContext`focalLength -> $CellContext`fParm, \
$CellContext`lensMediumRefractiveIndex -> $CellContext`nParm, \
$CellContext`lensMediumThickness -> $CellContext`dParm, \
$CellContext`coddingtonShapeFactor -> $CellContext`cParm, \
$CellContext`paraxialWorkingDistance -> $CellContext`iParm, \
$CellContext`paraxialObjectDistance -> $CellContext`oParm, \
$CellContext`paraxialObjectImageDistance -> $CellContext`oiParm, \
$CellContext`lateralMagnification -> $CellContext`bParm}, 
       TagSet[$CellContext`settleRemainedParaxialParameters, 
        MessageName[$CellContext`settleRemainedParaxialParameters, 
         "compalsory"], 
        "numerical rule for `1` is needed for consistency between \
parameters."], 
       TagSet[$CellContext`settleRemainedParaxialParameters, 
        MessageName[$CellContext`settleRemainedParaxialParameters, 
         "inconsistent"], "paraxial parameter set is inconsistent."], 
       TagSet[$CellContext`settleRemainedParaxialParameters, 
        MessageName[$CellContext`settleRemainedParaxialParameters, 
         "meybepositive"], "a paraxial parameter `1` may be positive."], 
       TagSet[$CellContext`settleRemainedParaxialParameters, 
        MessageName[$CellContext`settleRemainedParaxialParameters, 
         "notenough"], 
        "paraxial parameter set is insufficient to fix paraxial condition."], 
       
       TagSet[$CellContext`settleRemainedParaxialParameters, 
        MessageName[$CellContext`settleRemainedParaxialParameters, 
         "notimplemented"], 
        "sorry, a result for the parameter set is currently not \
implemented."], 
       TagSet[$CellContext`settleRemainedParaxialParameters, 
        MessageName[$CellContext`settleRemainedParaxialParameters, 
         "tautology"], "distances are not consistent each other."], 
       TagSet[$CellContext`settleRemainedParaxialParameters, 
        MessageName[$CellContext`settleRemainedParaxialParameters, 
         "tautoloy"], "parameter set includes tautology."], 
       TagSet[$CellContext`settleRemainedParaxialParameters, 
        MessageName[$CellContext`settleRemainedParaxialParameters, "toomuch"],
         "paraxial parameter set is excessive and no solution."], \
$CellContext`infiniteParameterSetQ[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := 
       With[{$CellContext`absents = \
$CellContext`absentParameter[$CellContext`d, $CellContext`n, $CellContext`f, \
$CellContext`mid, $CellContext`cod, $CellContext`mod, $CellContext`oid, \
$CellContext`beta]}, 
         Or[
          
          SubsetQ[$CellContext`absents, {$CellContext`oiParm, \
$CellContext`bParm}], 
          
          SubsetQ[$CellContext`absents, {$CellContext`oParm, \
$CellContext`bParm}]]], $CellContext`absentParameter[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          
          Blank[]]] := $CellContext`checkNumeric[{$CellContext`d, \
$CellContext`n, $CellContext`f, $CellContext`m, $CellContext`cod}, \
{$CellContext`dParm, $CellContext`nParm, $CellContext`fParm, \
$CellContext`iParm, $CellContext`cParm}], $CellContext`absentParameter[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          
          Blank[]]] := $CellContext`checkNumeric[{$CellContext`d, \
$CellContext`n, $CellContext`f, $CellContext`mid, $CellContext`cod, \
$CellContext`mod, $CellContext`oid, $CellContext`beta}, \
$CellContext`allParametersForFinite], 
       Attributes[$CellContext`checkNumeric] = {
        Listable}, $CellContext`checkNumeric[
         PatternTest[
          Pattern[$CellContext`n, 
           Blank[]], NumericQ], 
         Blank[]] := Nothing, $CellContext`checkNumeric[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`ret, 
          
          Blank[]]] := $CellContext`ret, $CellContext`allParametersForFinite = \
{$CellContext`dParm, $CellContext`nParm, $CellContext`fParm, \
$CellContext`iParm, $CellContext`cParm, $CellContext`oParm, \
$CellContext`oiParm, $CellContext`bParm}, \
$CellContext`settleRemainedParaxialParametersInfinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]]] := Condition[Message[
           MessageName[$CellContext`settleRemainedParaxialParameters, 
            "notenough"]]; $Failed, Length[
           $CellContext`absentParameter[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`m, $CellContext`cod]] >= 
         2], $CellContext`settleRemainedParaxialParametersInfinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]]] := Condition[Message[
           
           MessageName[$CellContext`settleRemainedParaxialParameters, 
            "compalsory"], $CellContext`lensMediumSymbol]; $Failed, \
$CellContext`absentParameter[$CellContext`d, $CellContext`n, $CellContext`f, \
$CellContext`m, $CellContext`cod] === {$CellContext`nParm}], \
$CellContext`settleRemainedParaxialParametersInfinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]]] := Condition[Message[
           
           MessageName[$CellContext`settleRemainedParaxialParameters, 
            "notenough"]]; $Failed, 
         And[$CellContext`absentParameter[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`m, $CellContext`cod] === {$CellContext`dParm}, 
          Abs[
            N[$CellContext`cod]] === 
          1.]], $CellContext`settleRemainedParaxialParametersInfinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]]] := Condition[
         Module[{$CellContext`sd, $CellContext`ddep}, $CellContext`sd = \
($CellContext`cod + 1.) $CellContext`f - ($CellContext`cod - 
             1.) $CellContext`m; $CellContext`ddep = ($CellContext`n \
$CellContext`sd) (($CellContext`f - $CellContext`m)/(($CellContext`cod + 
              1.) $CellContext`f)); Flatten[{
             $CellContext`curvaturesInfinite[$CellContext`ddep, \
$CellContext`n, $CellContext`f, $CellContext`m, $CellContext`cod], \
$CellContext`paraxialWorkingDistance -> $CellContext`m, \
$CellContext`lensMediumThickness -> $CellContext`ddep}]], 
         And[$CellContext`absentParameter[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`m, $CellContext`cod] === {$CellContext`dParm}, 
          Abs[
            N[$CellContext`cod]] =!= 
          1.]], $CellContext`settleRemainedParaxialParametersInfinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]]] := Condition[
         Module[{$CellContext`sd, $CellContext`fdep}, $CellContext`sd = \
($CellContext`cod + 1.)^2 $CellContext`d^2 + ((
               4 $CellContext`n) $CellContext`m) (($CellContext`cod \
($CellContext`cod + 1.)) $CellContext`d + $CellContext`n $CellContext`m); 
          If[$CellContext`sd < 0., Message[
              
              MessageName[$CellContext`settleRemainedParaxialParameters, 
               "inconsistent"]]; Return[$Failed]]; $CellContext`fdep = 
           If[N[$CellContext`cod] =!= -1., (
              Sqrt[$CellContext`sd] + ((
                 2. $CellContext`n) $CellContext`cod) $CellContext`m + \
($CellContext`cod + 1.) $CellContext`d)/((2 $CellContext`n) ($CellContext`cod + 
              1.)), $CellContext`d/$CellContext`n + $CellContext`m]; 
          Flatten[{
             $CellContext`curvaturesInfinite[$CellContext`d, $CellContext`n, \
$CellContext`fdep, $CellContext`m, $CellContext`cod], \
$CellContext`paraxialWorkingDistance -> $CellContext`m, \
$CellContext`focalLength -> $CellContext`fdep}]], \
$CellContext`absentParameter[$CellContext`d, $CellContext`n, $CellContext`f, \
$CellContext`m, $CellContext`cod] === {$CellContext`fParm}], \
$CellContext`settleRemainedParaxialParametersInfinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]]] := Condition[
         Module[{$CellContext`sm, $CellContext`mdep}, $CellContext`sm = \
($CellContext`n $CellContext`f) ($CellContext`n $CellContext`f + \
($CellContext`cod^2 - 1.) $CellContext`d); If[$CellContext`sm < 0., Message[
              
              MessageName[$CellContext`settleRemainedParaxialParameters, 
               "inconsistent"]]; Return[$Failed]]; $CellContext`mdep = 
           If[N[$CellContext`cod] =!= 
             1., (($CellContext`n $CellContext`cod) $CellContext`f - 
              Sqrt[$CellContext`sm])/($CellContext`n ($CellContext`cod - 
              1.)), $CellContext`f - $CellContext`d/$CellContext`n]; 
          Flatten[{
             $CellContext`curvaturesInfinite[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`mdep, $CellContext`cod], \
$CellContext`paraxialWorkingDistance -> $CellContext`mdep}]], \
$CellContext`absentParameter[$CellContext`d, $CellContext`n, $CellContext`f, \
$CellContext`m, $CellContext`cod] === {$CellContext`iParm}], \
$CellContext`settleRemainedParaxialParametersInfinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]]] := Condition[
         With[{$CellContext`curvs = \
$CellContext`curvaturesInfinite[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`m, $CellContext`cod]}, 
          
          Flatten[{$CellContext`curvs, $CellContext`paraxialWorkingDistance -> \
$CellContext`m, $CellContext`coddingtonShapeFactor -> ReplaceAll[
              $CellContext`CSF[$CellContext`frontSurfaceCurvature, \
$CellContext`backSurfaceCurvature], $CellContext`curvs]}]], \
$CellContext`absentParameter[$CellContext`d, $CellContext`n, $CellContext`f, \
$CellContext`m, $CellContext`cod] === {$CellContext`cParm}], \
$CellContext`settleRemainedParaxialParametersInfinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]]] := 
       If[$CellContext`cod =!= -($CellContext`d $CellContext`f - \
$CellContext`n (($CellContext`f^2 - $CellContext`m^2)/((($CellContext`n - 
              1.) $CellContext`d) $CellContext`f))), Message[
           
           MessageName[$CellContext`settleRemainedParaxialParameters, 
            "inconsistent"]]; $Failed, 
         Flatten[{
           $CellContext`curvaturesInfinite[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`m, $CellContext`cod], \
$CellContext`paraxialWorkingDistance -> $CellContext`m}]], \
$CellContext`curvaturesInfinite[
         PatternTest[
          Blank[], NumericQ], 
         PatternTest[
          Pattern[$CellContext`n, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`f, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`m, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`cod, 
           Blank[]], N[#] === -1.& ]] := {$CellContext`frontSurfaceCurvature -> 
         0, $CellContext`backSurfaceCurvature -> (-1.)/(($CellContext`n - 
           1) $CellContext`f)}, $CellContext`curvaturesInfinite[
         PatternTest[
          Blank[], NumericQ], 
         PatternTest[
          Pattern[$CellContext`n, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`f, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`m, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`cod, 
           Blank[]], N[#] === 1.& ]] := {$CellContext`frontSurfaceCurvature -> 
         1./(($CellContext`n - 
           1) $CellContext`f), $CellContext`backSurfaceCurvature -> 
         0}, $CellContext`curvaturesInfinite[
         PatternTest[
          Pattern[$CellContext`d, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`n, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`f, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`m, 
           Blank[]], NumericQ], 
         Blank[]] := {$CellContext`frontSurfaceCurvature -> $CellContext`n \
(($CellContext`f - $CellContext`m)/((($CellContext`n - 
             1) $CellContext`d) $CellContext`f)), \
$CellContext`backSurfaceCurvature -> ($CellContext`n ($CellContext`f - \
$CellContext`m) - $CellContext`d)/((($CellContext`n - 
            1) $CellContext`d) $CellContext`m), \
$CellContext`conjugateInfiniteness -> True}, $CellContext`CSF[
         Pattern[$CellContext`c1, 
          Blank[]], 
         Pattern[$CellContext`c2, 
          
          Blank[]]] := ($CellContext`c1 + $CellContext`c2)/($CellContext`c1 - \
$CellContext`c2), $CellContext`tautologyCheck[
         PatternTest[
          Pattern[$CellContext`d, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mid, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mod, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`oid, 
           Blank[]], NumericQ]] := 
       Condition[{}, $CellContext`oid == $CellContext`d + $CellContext`mid + \
$CellContext`mod], $CellContext`tautologyCheck[
         PatternTest[
          Pattern[$CellContext`d, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mid, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mod, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`oid, 
           Blank[]], NumericQ]] := Condition[Message[
           
           MessageName[$CellContext`settleRemainedParaxialParameters, 
            "tautology"]]; $Failed, $CellContext`oid =!= $CellContext`d + \
$CellContext`mid + $CellContext`mod], $CellContext`tautologyCheck[
         PatternTest[
          Blank[], Not[
           NumericQ[#]]& ], 
         PatternTest[
          Pattern[$CellContext`mid, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mod, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`oid, 
           Blank[]], 
          NumericQ]] := {$CellContext`lensMediumThickness -> $CellContext`oid - \
$CellContext`mid - $CellContext`mod}, $CellContext`tautologyCheck[
         PatternTest[
          Pattern[$CellContext`d, 
           Blank[]], NumericQ], 
         PatternTest[
          Blank[], Not[
           NumericQ[#]]& ], 
         PatternTest[
          Pattern[$CellContext`mod, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`oid, 
           Blank[]], 
          NumericQ]] := {$CellContext`paraxialWorkingDistance -> \
$CellContext`oid - $CellContext`d - $CellContext`mod}, \
$CellContext`tautologyCheck[
         PatternTest[
          Pattern[$CellContext`d, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mid, 
           Blank[]], NumericQ], 
         PatternTest[
          Blank[], Not[
           NumericQ[#]]& ], 
         PatternTest[
          Pattern[$CellContext`oid, 
           Blank[]], 
          NumericQ]] := {$CellContext`paraxialObjectDistance -> \
$CellContext`oid - $CellContext`d - $CellContext`mid}, \
$CellContext`tautologyCheck[
         PatternTest[
          Pattern[$CellContext`d, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mid, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mod, 
           Blank[]], NumericQ], 
         PatternTest[
          Blank[], Not[
           
           NumericQ[#]]& ]] := {$CellContext`paraxialObjectImageDistance -> \
$CellContext`mid + $CellContext`d + $CellContext`mod}, \
$CellContext`tautologyCheck[
         BlankSequence[]] := 
       Sequence[], $CellContext`settleRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := 
       Module[{$CellContext`nc, $CellContext`da, $CellContext`na, \
$CellContext`fa, $CellContext`ia, $CellContext`ca, $CellContext`oa, \
$CellContext`ba}, $CellContext`nc = \
$CellContext`boundingConditionCount[{$CellContext`f, $CellContext`mid, \
$CellContext`cod, $CellContext`mod, $CellContext`beta}]; 
         If[$CellContext`nc <= 2, Message[
             
             MessageName[$CellContext`settleRemainedParaxialParameters, 
              "notenough"]]; Return[$Failed], 
           If[$CellContext`nc >= 4, Message[
              
              MessageName[$CellContext`settleRemainedParaxialParameters, 
               "toomuch"]]; Return[$Failed]]]; 
         Flatten[{$CellContext`conjugateInfiniteness -> False, 
            $CellContext`fixRemainedParaxialParametersFinite[$CellContext`d, \
$CellContext`n, $CellContext`f, $CellContext`mid, $CellContext`cod, \
$CellContext`mod, $CellContext`beta]}]], \
$CellContext`settleRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := Condition[
         If[$CellContext`oid === $CellContext`mod + $CellContext`d + \
$CellContext`mid, 
          $CellContext`settleRemainedParaxialParametersFinite[$CellContext`d, \
$CellContext`n, $CellContext`f, $CellContext`mid, $CellContext`cod, \
$CellContext`oParm, $CellContext`oid, $CellContext`beta], Message[
            
            MessageName[$CellContext`settleRemainedParaxialParameters, 
             "tautoloy"]]; $Failed], 
         $CellContext`tautologyParametersMatchQ[$CellContext`d, \
$CellContext`n, $CellContext`f, $CellContext`mid, $CellContext`cod, \
$CellContext`mod, $CellContext`oid, $CellContext`beta]], \
$CellContext`settleRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]]] := Condition[Message[
           
           MessageName[$CellContext`settleRemainedParaxialParameters, 
            "compalsory"], $CellContext`lensMediumSymbol]; $Failed, \
$CellContext`absentParameter[$CellContext`d, $CellContext`n, $CellContext`f, \
$CellContext`m, $CellContext`cod] === {$CellContext`nParm}], \
$CellContext`settleRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := Condition[
         $CellContext`settleRemainedParaxialForMostProbableParameters[$\
CellContext`d, $CellContext`n, $CellContext`mid, $CellContext`oid, \
$CellContext`beta], 
         $CellContext`setEqualQ[
          $CellContext`containedParameter[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`mid, $CellContext`cod, $CellContext`mod, \
$CellContext`oid, $CellContext`beta], \
$CellContext`mostProbableParameterList]], \
$CellContext`settleRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := Condition[
         $CellContext`settleRemainedParaxialForFixedFocalLength[$CellContext`\
d, $CellContext`n, $CellContext`f, $CellContext`oid, $CellContext`beta], 
         $CellContext`setEqualQ[
          $CellContext`containedParameter[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`mid, $CellContext`cod, $CellContext`mod, \
$CellContext`oid, $CellContext`beta], \
$CellContext`fixedFocalLengthParameterList]], \
$CellContext`settleRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := Condition[
         $CellContext`settleRemainedParaxialForlackOfOIAndWD[$CellContext`d, \
$CellContext`n, $CellContext`f, $CellContext`mod, $CellContext`beta], 
         $CellContext`setEqualQ[
          $CellContext`containedParameter[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`mid, $CellContext`cod, $CellContext`mod, \
$CellContext`oid, $CellContext`beta], \
$CellContext`lackOfOIAndWDParameterList]], \
$CellContext`settleRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := Condition[
         $CellContext`settleRemainedParaxialForlackOfOIAndOD[$CellContext`d, \
$CellContext`n, $CellContext`f, $CellContext`mod, $CellContext`beta], 
         $CellContext`setEqualQ[
          $CellContext`containedParameter[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`mid, $CellContext`cod, $CellContext`mod, \
$CellContext`oid, $CellContext`beta], \
$CellContext`lackOfOIAndODParameterList]], \
$CellContext`settleRemainedParaxialParametersFinite[
         BlankSequence[]] := (Message[
          
          MessageName[$CellContext`settleRemainedParaxialParameters, 
           "notimplemented"]]; $Failed), $CellContext`boundingConditionCount[
         Pattern[$CellContext`params, {
           BlankSequence[]}]] := Apply[Plus, 
         $CellContext`numericCount[$CellContext`params]], 
       Attributes[$CellContext`numericCount] = {
        Listable}, $CellContext`numericCount[
         Pattern[$CellContext`c, 
          Blank[]]] := Condition[1, 
         NumericQ[$CellContext`c]], $CellContext`numericCount[
         Pattern[$CellContext`c, 
          Blank[]]] := Condition[0, 
         Not[
          
          NumericQ[$CellContext`c]]], \
$CellContext`fixRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Blank[], 
         PatternTest[
          Pattern[$CellContext`mid, 
           Blank[]], NumericQ], 
         Blank[], 
         PatternTest[
          Pattern[$CellContext`mod, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`beta, 
           Blank[]], NumericQ]] := 
       With[{$CellContext`c1 = ($CellContext`beta ($CellContext`d + \
$CellContext`n $CellContext`mod) + $CellContext`n \
$CellContext`mid)/((($CellContext`beta ($CellContext`n - 
              1.)) $CellContext`d) $CellContext`mod), $CellContext`c2 = \
(-($CellContext`d + ($CellContext`beta $CellContext`n) $CellContext`mod + \
$CellContext`n $CellContext`mid))/((($CellContext`n - 
             1.) $CellContext`d) $CellContext`mid)}, 
         Flatten[{$CellContext`frontSurfaceCurvature -> $CellContext`c1, \
$CellContext`backSurfaceCurvature -> $CellContext`c2, \
$CellContext`focalLength -> (((-$CellContext`beta) $CellContext`n) \
$CellContext`mid) ($CellContext`mod/($CellContext`beta (($CellContext`beta \
$CellContext`n) $CellContext`mod + $CellContext`d) + $CellContext`n \
$CellContext`mid)), $CellContext`coddingtonShapeFactor -> \
$CellContext`CSF[$CellContext`c1, $CellContext`c2], 
           $CellContext`additionalTermsOfPricipals[$CellContext`d, \
$CellContext`n, $CellContext`c1, $CellContext`c2, $CellContext`mid, \
$CellContext`mod]}]], $CellContext`fixRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         PatternTest[
          Pattern[$CellContext`f, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mid, 
           Blank[]], NumericQ], 
         Blank[], 
         Blank[], 
         PatternTest[
          Pattern[$CellContext`beta, 
           Blank[]], NumericQ]] := 
       With[{$CellContext`c1 = (((
               1. - $CellContext`beta) $CellContext`f) $CellContext`n - \
$CellContext`n $CellContext`mid)/((($CellContext`n - 
             1.) $CellContext`d) $CellContext`f), $CellContext`c2 = (((
               1. - $CellContext`beta) $CellContext`f) $CellContext`n - \
$CellContext`n $CellContext`mid - $CellContext`d)/((($CellContext`n - 
             1.) ($CellContext`beta $CellContext`f + $CellContext`mid)) \
$CellContext`d), $CellContext`mod = (-(($CellContext`beta $CellContext`d) \
$CellContext`f + ($CellContext`f $CellContext`n) \
$CellContext`mid))/(($CellContext`beta $CellContext`n) ($CellContext`beta \
$CellContext`f + $CellContext`mid))}, 
         Flatten[{$CellContext`frontSurfaceCurvature -> $CellContext`c1, \
$CellContext`backSurfaceCurvature -> $CellContext`c2, \
$CellContext`paraxialObjectDistance -> $CellContext`mod, \
$CellContext`coddingtonShapeFactor -> $CellContext`CSF[$CellContext`c1, \
$CellContext`c2], 
           $CellContext`additionalTermsOfPricipals[$CellContext`d, \
$CellContext`n, $CellContext`c1, $CellContext`c2, $CellContext`mid, \
$CellContext`mod]}]], $CellContext`fixRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         PatternTest[
          Pattern[$CellContext`f, 
           Blank[]], NumericQ], 
         Blank[], 
         Blank[], 
         PatternTest[
          Pattern[$CellContext`mod, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`beta, 
           Blank[]], NumericQ]] := 
       With[{$CellContext`c1 = ($CellContext`beta $CellContext`d + ((
               1. - $CellContext`beta) $CellContext`n) $CellContext`f + \
($CellContext`beta $CellContext`n) $CellContext`mod)/((($CellContext`d \
($CellContext`n - 
              1.)) ($CellContext`beta $CellContext`f + $CellContext`mod)) \
$CellContext`d), $CellContext`c2 = (((
               1. - $CellContext`beta) $CellContext`f) $CellContext`n - \
$CellContext`n $CellContext`mod - $CellContext`d)/((($CellContext`n - 
             1.) ($CellContext`beta $CellContext`f + $CellContext`mod)) \
$CellContext`d), $CellContext`mid = (-(($CellContext`beta $CellContext`f) \
(($CellContext`beta $CellContext`n) $CellContext`mod + \
$CellContext`d)))/($CellContext`n ($CellContext`f + $CellContext`beta \
$CellContext`mod))}, 
         Flatten[{$CellContext`frontSurfaceCurvature -> $CellContext`c1, \
$CellContext`backSurfaceCurvature -> $CellContext`c2, \
$CellContext`paraxialWorkingDistance -> $CellContext`mid, \
$CellContext`coddingtonShapeFactor -> $CellContext`CSF[$CellContext`c1, \
$CellContext`c2], 
           $CellContext`additionalTermsOfPricipals[$CellContext`d, \
$CellContext`n, $CellContext`c1, $CellContext`c2, $CellContext`mid, \
$CellContext`mod]}]], $CellContext`fixRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         PatternTest[
          Pattern[$CellContext`f, 
           Blank[]], NumericQ], 
         Blank[], 
         PatternTest[
          Pattern[$CellContext`cod, 
           Blank[]], NumericQ], 
         Blank[], 
         PatternTest[
          Pattern[$CellContext`beta, 
           Blank[]], NumericQ]] := 
       Module[{$CellContext`s, $CellContext`sq, $CellContext`rc, \
$CellContext`rm, $CellContext`c1, $CellContext`c2, $CellContext`mod, \
$CellContext`mid}, $CellContext`s = ((($CellContext`cod^2 - 
               1.) $CellContext`d + $CellContext`n $CellContext`f) \
$CellContext`n) $CellContext`f; If[$CellContext`s < 0., Message[
             
             MessageName[$CellContext`settleRemainedParaxialParameters, 
              "inconsistent"]]; Return[$Failed]]; $CellContext`sq = 
          Sqrt[$CellContext`s]; $CellContext`rc = ($CellContext`sq - \
$CellContext`n $CellContext`f)/((($CellContext`n - 
             1.) $CellContext`d) $CellContext`f); $CellContext`rm = \
((($CellContext`cod ($CellContext`beta - 1.) - 
               1.) $CellContext`n) $CellContext`f + $CellContext`beta \
$CellContext`sq)/($CellContext`beta $CellContext`n); $CellContext`c1 = \
$CellContext`rc/($CellContext`cod - 
           1.); $CellContext`c2 = $CellContext`rc/($CellContext`cod + 
           1.); $CellContext`mod = $CellContext`rm/($CellContext`cod + 
           1.); $CellContext`mid = $CellContext`rm/($CellContext`cod - 1.); 
         Flatten[{$CellContext`frontSurfaceCurvature -> $CellContext`c1, \
$CellContext`backSurfaceCurvature -> $CellContext`c2, \
$CellContext`paraxialObjectDistance -> $CellContext`mod, \
$CellContext`paraxialWorkingDistance -> $CellContext`mid, 
            $CellContext`additionalTermsOfPricipals[$CellContext`d, \
$CellContext`n, $CellContext`c1, $CellContext`c2, $CellContext`mid, \
$CellContext`mod]}]], $CellContext`fixRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         PatternTest[
          Pattern[$CellContext`f, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mid, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`cod, 
           Blank[]], NumericQ], 
         Blank[], 
         Blank[]] := 
       Module[{$CellContext`s, $CellContext`sq, $CellContext`c1, \
$CellContext`c2, $CellContext`mod}, $CellContext`s = (($CellContext`n \
(($CellContext`cod^2 - 
                1.) $CellContext`d + $CellContext`n $CellContext`f)) \
$CellContext`n) $CellContext`f; If[$CellContext`s < 0., Message[
             
             MessageName[$CellContext`settleRemainedParaxialParameters, 
              "inconsistent"]]; Return[$Failed]]; $CellContext`sq = 
          Sqrt[$CellContext`s]; $CellContext`c1 = ($CellContext`sq - \
$CellContext`n $CellContext`f)/(((($CellContext`cod - 1.) ($CellContext`n - 
              1.)) $CellContext`d) $CellContext`f); $CellContext`c2 = \
($CellContext`sq - $CellContext`n $CellContext`f)/(((($CellContext`cod + 
              1.) ($CellContext`n - 
              1.)) $CellContext`d) $CellContext`f); $CellContext`mod = \
((($CellContext`c2 $CellContext`d) ($CellContext`n - 
               1.)) $CellContext`mid + $CellContext`d + $CellContext`n \
$CellContext`mid)/(($CellContext`n - 
             1.) ($CellContext`c1 ((($CellContext`c2 $CellContext`d) \
($CellContext`n - 
                  1.)) $CellContext`mid + $CellContext`d + $CellContext`n \
$CellContext`mid) - ($CellContext`c2 $CellContext`n) $CellContext`mid) - \
$CellContext`n); 
         Flatten[{$CellContext`frontSurfaceCurvature -> $CellContext`c1, \
$CellContext`backSurfaceCurvature -> $CellContext`c2, \
$CellContext`paraxialObjectDistance -> $CellContext`mod, \
$CellContext`lateralMagnification -> (($CellContext`cod $CellContext`n) \
($CellContext`f - $CellContext`mid) + $CellContext`n $CellContext`mid - \
$CellContext`sq)/((($CellContext`cod - 1.) $CellContext`n) $CellContext`f), 
            $CellContext`additionalTermsOfPricipals[$CellContext`d, \
$CellContext`n, $CellContext`c1, $CellContext`c2, $CellContext`mid, \
$CellContext`mod]}]], $CellContext`fixRemainedParaxialParametersFinite[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         PatternTest[
          Pattern[$CellContext`f, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`mid, 
           Blank[]], NumericQ], 
         Blank[], 
         PatternTest[
          Pattern[$CellContext`mod, 
           Blank[]], NumericQ], 
         Blank[]] := 
       Module[{$CellContext`s, $CellContext`sq, $CellContext`c1, \
$CellContext`c2}, $CellContext`s = ($CellContext`d $CellContext`f)^2 + ((((
                2. $CellContext`d) $CellContext`f) $CellContext`n) \
$CellContext`mid) $CellContext`mod + (($CellContext`n^2 $CellContext`mid) \
$CellContext`mod) ($CellContext`mid $CellContext`mod - 4. $CellContext`f^2); 
         If[$CellContext`s < 0., Message[
             
             MessageName[$CellContext`settleRemainedParaxialParameters, 
              "inconsistent"]]; Return[$Failed]]; $CellContext`sq = 
          Sqrt[$CellContext`s]; $CellContext`c1 = ($CellContext`sq - \
$CellContext`d $CellContext`f + ($CellContext`n $CellContext`mod) \
($CellContext`mid - 2. $CellContext`f))/((((
              2. $CellContext`d) $CellContext`f) ($CellContext`n - 
             1.)) $CellContext`mod); $CellContext`c2 = ($CellContext`sq + \
$CellContext`d $CellContext`f + ((
               2. $CellContext`f) $CellContext`n) $CellContext`mid - \
($CellContext`n $CellContext`mod) $CellContext`mid)/((((
              2. $CellContext`d) $CellContext`f) $CellContext`mid) (
            1. - $CellContext`n)); 
         Flatten[{$CellContext`frontSurfaceCurvature -> $CellContext`c1, \
$CellContext`backSurfaceCurvature -> $CellContext`c2, \
$CellContext`lateralMagnification -> ($CellContext`sq - ($CellContext`f \
$CellContext`d) $CellContext`f - ($CellContext`n $CellContext`mid) \
$CellContext`mod)/(((
               2. $CellContext`f) $CellContext`n) $CellContext`mod), \
$CellContext`coddingtonShapeFactor -> $CellContext`CSF[$CellContext`c1, \
$CellContext`c2], 
            $CellContext`additionalTermsOfPricipals[$CellContext`d, \
$CellContext`n, $CellContext`c1, $CellContext`c2, $CellContext`mid, \
$CellContext`mod]}]], $CellContext`fixRemainedParaxialParametersFinite[
         BlankSequence[]] := (Message[
          
          MessageName[$CellContext`settleRemainedParaxialParameters, 
           "notimplemented"]]; $Failed), \
$CellContext`additionalTermsOfPricipals[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`c1, 
          Blank[]], 
         Pattern[$CellContext`c2, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          
          Blank[]]] := \
{$CellContext`paraxialDistanceBetweenObjectAndPrincipal -> $CellContext`mod - \
$CellContext`objectPrincipalPlanePosition[$CellContext`c1, $CellContext`c2, \
$CellContext`n, $CellContext`d], \
$CellContext`paraxialDistanceBetweenPrincipalAndImage -> $CellContext`mid - \
$CellContext`imagePrincipalPlanePosition[$CellContext`c1, $CellContext`c2, \
$CellContext`n, $CellContext`d]}, $CellContext`objectPrincipalPlanePosition[
         Pattern[$CellContext`c1, 
          Blank[]], 
         Pattern[$CellContext`c2, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`d, 
          
          Blank[]]] := $CellContext`c2 ($CellContext`d/($CellContext`c1 \
(($CellContext`c2 $CellContext`d) ($CellContext`n - 
             1) + $CellContext`n) - $CellContext`n $CellContext`c2)), \
$CellContext`imagePrincipalPlanePosition[
         Pattern[$CellContext`c1, 
          Blank[]], 
         Pattern[$CellContext`c2, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`d, 
          
          Blank[]]] := (-$CellContext`c1) ($CellContext`d/($CellContext`c1 \
(($CellContext`c2 $CellContext`d) ($CellContext`n - 
             1) + $CellContext`n) - $CellContext`n $CellContext`c2)), \
$CellContext`tautologyParametersMatchQ[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := Intersection[
          $CellContext`absentParameter[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`mid, $CellContext`cod, $CellContext`mod, \
$CellContext`oid, $CellContext`beta], $CellContext`tautologyParameterList] === \
{}, $CellContext`tautologyParameterList = {$CellContext`dParm, \
$CellContext`iParm, $CellContext`oParm, $CellContext`oiParm}, \
$CellContext`settleRemainedParaxialForMostProbableParameters[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := 
       Module[{$CellContext`c1, $CellContext`c2, $CellContext`mod, \
$CellContext`f, $CellContext`cod}, $CellContext`mod = $CellContext`oid - \
$CellContext`d - $CellContext`mid; If[$CellContext`mod < 0., 
           Message[
            
            MessageName[$CellContext`settleRemainedParaxialParameters, 
             "meybepositive"], $CellContext`paraxialObjectDistance]]; \
$CellContext`c1 = ($CellContext`beta $CellContext`d + $CellContext`n \
($CellContext`beta $CellContext`mod + $CellContext`mid))/((($CellContext`beta \
($CellContext`n - 
              1.)) $CellContext`d) $CellContext`mod); $CellContext`c2 = \
(-($CellContext`d + $CellContext`n ($CellContext`beta $CellContext`mod + \
$CellContext`mid)))/((($CellContext`n - 
             
             1.) $CellContext`d) $CellContext`mid); $CellContext`f = \
(((-$CellContext`beta) $CellContext`n) $CellContext`mid) \
($CellContext`mod/($CellContext`n $CellContext`mid + $CellContext`beta \
($CellContext`d + ($CellContext`beta $CellContext`n) $CellContext`mod))); 
         If[$CellContext`mod < 0., 
           Message[
            
            MessageName[$CellContext`settleRemainedParaxialParameters, 
             "meybepositive"], $CellContext`focalLength]]; $CellContext`cod = \
($CellContext`c1 + $CellContext`c2)/($CellContext`c1 - $CellContext`c2); \
{$CellContext`frontSurfaceCurvature -> $CellContext`c1, \
$CellContext`backSurfaceCurvature -> $CellContext`c2, \
$CellContext`focalLength -> $CellContext`f, \
$CellContext`paraxialObjectDistance -> $CellContext`mod, \
$CellContext`coddingtonShapeFactor -> $CellContext`cod, \
$CellContext`paraxialDistanceBetweenObjectAndPrincipal -> $CellContext`mod - \
$CellContext`objectPrincipalPlanePosition[$CellContext`c1, $CellContext`c2, \
$CellContext`n, $CellContext`d], \
$CellContext`paraxialDistanceBetweenPrincipalAndImage -> $CellContext`mid - \
$CellContext`imagePrincipalPlanePosition[$CellContext`c1, $CellContext`c2, \
$CellContext`n, $CellContext`d], $CellContext`conjugateInfiniteness -> 
           False}], $CellContext`setEqualQ[
         Pattern[$CellContext`a, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]]] := 
       Sort[$CellContext`a] === 
        Sort[$CellContext`b], $CellContext`containedParameter[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`cod, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := Complement[$CellContext`allParametersForFinite, 
         $CellContext`absentParameter[$CellContext`d, $CellContext`n, \
$CellContext`f, $CellContext`mid, $CellContext`cod, $CellContext`mod, \
$CellContext`oid, $CellContext`beta]], $CellContext`mostProbableParameterList = \
{$CellContext`nParm, $CellContext`dParm, $CellContext`iParm, \
$CellContext`bParm, $CellContext`oiParm}, \
$CellContext`settleRemainedParaxialForFixedFocalLength[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`oid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := 
       Module[{$CellContext`sq, $CellContext`mid}, $CellContext`sq = \
(($CellContext`oid - $CellContext`d) $CellContext`beta)^2 + \
(($CellContext`beta^2 - 1.) $CellContext`f)^2 + ((
              2 $CellContext`beta) $CellContext`f) (($CellContext`oid - \
$CellContext`d) ($CellContext`beta^2 + 1.) + (
               2. $CellContext`beta) ($CellContext`d/$CellContext`n)); 
         If[$CellContext`sq < 0., 
           Message[
            
            MessageName[$CellContext`settleRemainedParaxialParameters, 
             "inconsistent"], 
            
            Return[$Failed]]]; $CellContext`mid = ((
              1 - $CellContext`beta^2) $CellContext`f + $CellContext`beta \
($CellContext`oid - $CellContext`d) + Sqrt[$CellContext`sq])/(
           2 $CellContext`beta); If[$CellContext`mid < 0., 
           Message[
            
            MessageName[$CellContext`settleRemainedParaxialParameters, 
             "meybepositive"], $CellContext`paraxialWorkingDistance]]; 
         Flatten[{$CellContext`paraxialWorkingDistance -> $CellContext`mid, 
            $CellContext`settleRemainedParaxialForMostProbableParameters[$\
CellContext`d, $CellContext`n, $CellContext`mid, $CellContext`oid, \
$CellContext`beta]}]], $CellContext`fixedFocalLengthParameterList = \
{$CellContext`nParm, $CellContext`dParm, $CellContext`fParm, \
$CellContext`bParm, $CellContext`oiParm}, \
$CellContext`settleRemainedParaxialForlackOfOIAndWD[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mod, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := 
       Module[{$CellContext`mid, $CellContext`oid}, $CellContext`mid = \
(-(($CellContext`beta $CellContext`f) (($CellContext`beta $CellContext`n) \
$CellContext`mod + $CellContext`d)))/($CellContext`n ($CellContext`beta \
$CellContext`mod + $CellContext`f)); If[$CellContext`mid < 0., 
           Message[
            
            MessageName[$CellContext`settleRemainedParaxialParameters, 
             "meybepositive"], $CellContext`paraxialWorkingDistance]]; \
$CellContext`oid = $CellContext`d + $CellContext`mod + $CellContext`mid; 
         Flatten[{$CellContext`paraxialWorkingDistance -> $CellContext`mid, \
$CellContext`paraxialObjectImageDistance -> $CellContext`oid, 
            $CellContext`settleRemainedParaxialForMostProbableParameters[$\
CellContext`d, $CellContext`n, $CellContext`mid, $CellContext`oid, \
$CellContext`beta]}]], $CellContext`lackOfOIAndWDParameterList = \
{$CellContext`nParm, $CellContext`dParm, $CellContext`fParm, \
$CellContext`bParm, $CellContext`oParm}, \
$CellContext`settleRemainedParaxialForlackOfOIAndOD[
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`mid, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]]] := 
       Module[{$CellContext`mod, $CellContext`oid}, $CellContext`mod = \
(-$CellContext`f) (($CellContext`n $CellContext`mid + $CellContext`beta \
$CellContext`d)/(($CellContext`beta $CellContext`n) ($CellContext`mid + \
$CellContext`beta $CellContext`f))); If[$CellContext`mod < 0., 
           Message[
            
            MessageName[$CellContext`settleRemainedParaxialParameters, 
             "meybepositive"], $CellContext`paraxialObjectDistance]]; \
$CellContext`oid = $CellContext`d + $CellContext`mod + $CellContext`mid; 
         Flatten[{$CellContext`paraxialWorkingDistance -> $CellContext`mid, \
$CellContext`paraxialObjectImageDistance -> $CellContext`oid, 
            $CellContext`settleRemainedParaxialForMostProbableParameters[$\
CellContext`d, $CellContext`n, $CellContext`mid, $CellContext`oid, \
$CellContext`beta]}]], $CellContext`lackOfOIAndODParameterList = \
{$CellContext`nParm, $CellContext`dParm, $CellContext`fParm, \
$CellContext`bParm, $CellContext`iParm}, $CellContext`$marginRatio = 
       1.02, $CellContext`biasphericAplanatSolve[
         Pattern[$CellContext`parameters, 
          BlankSequence[
          Rule]]] := \
$CellContext`biasphericAplanatSolve[{$CellContext`parameters}], \
$CellContext`biasphericAplanatSolve[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`wl, $CellContext`ml, $CellContext`na, \
$CellContext`iconj, $CellContext`cgi, $CellContext`cgo}, $CellContext`iconj = 
          ReplaceAll[$CellContext`conjugateInfiniteness, \
$CellContext`parameters]; If[
           Not[
            TrueQ[
             Element[$CellContext`iconj, Booleans]]], Message[
             MessageName[$CellContext`biasphericAplanatSolve, "usesetup"]]; 
           Return[$CellContext`parameters]]; $CellContext`wl = 
          ReplaceAll[$CellContext`designWavelength, $CellContext`parameters]; 
         If[
           Not[
            NumericQ[$CellContext`wl]], Message[
             MessageName[$CellContext`biasphericAplanatSolve, "usesetup"]]; 
           Return[$CellContext`parameters]]; $CellContext`ml = 
          ReplaceAll[$CellContext`lensMediumSymbol, $CellContext`parameters]; 
         If[
           Not[
            $CellContext`mediumQ[$CellContext`ml]], Message[
             MessageName[$CellContext`biasphericAplanatSolve, "usesetup"]]; 
           Return[$CellContext`parameters]]; $CellContext`na = 
          ReplaceAll[$CellContext`numericalApertureTarget, \
$CellContext`parameters]; If[
           Not[
            NumericQ[$CellContext`na]], Message[
             MessageName[$CellContext`biasphericAplanatSolve, "usesetup"]]; 
           Return[$CellContext`parameters]]; $CellContext`cgi = 
          ReplaceAll[$CellContext`coverGlassExistence, \
$CellContext`parameters]; If[
           Not[$CellContext`iconj], $CellContext`cgo = 
           ReplaceAll[$CellContext`objectSideCoverGlassExistence, \
$CellContext`parameters]]; $CellContext`branchSolver[$CellContext`iconj, \
$CellContext`cgi, $CellContext`cgo, $CellContext`parameters]], 
       TagSet[$CellContext`biasphericAplanatSolve, 
        MessageName[$CellContext`biasphericAplanatSolve, "usesetup"], 
        "use 'setupBiasphericAplanatParameters' function to set parameter \
arguments."], $CellContext`branchSolver[
         Pattern[$CellContext`iconj, 
          Blank[]], 
         Pattern[$CellContext`cgi, 
          Blank[]], 
         Pattern[$CellContext`cgo, 
          Blank[]], 
         Pattern[$CellContext`parameters, 
          Blank[]]] := 
       Switch[{$CellContext`iconj, $CellContext`cgi, $CellContext`cgo}, {
         True, False, 
          Blank[]}, 
         $CellContext`biasphericAplanatSolveInfinite[$CellContext`parameters],\
 {True, True, 
          Blank[]}, 
         $CellContext`biasphericAplanatSolveInfiniteWithCoverGlass[$\
CellContext`parameters], {False, False, False}, 
         $CellContext`biasphericAplanatSolveFinite[$CellContext`parameters], {
         False, True, False}, 
         $CellContext`biasphericAplanatSolveFiniteWithImageCoverGlass[$\
CellContext`parameters], {False, False, True}, 
         $CellContext`biasphericAplanatSolveFiniteWithObjectCoverGlass[$\
CellContext`parameters], {False, True, True}, 
         $CellContext`\
biasphericAplanatSolveFiniteWithBothImageAndObjectCoverGlass[$CellContext`\
parameters]], $CellContext`biasphericAplanatSolveInfinite[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`mr, \
$CellContext`na, $CellContext`n, $CellContext`d, $CellContext`m, \
$CellContext`f, $CellContext`shps, $CellContext`secpnts, $CellContext`ana}, \
{$CellContext`mr, $CellContext`na, $CellContext`n, $CellContext`d, \
$CellContext`m} = $CellContext`commonParameters[$CellContext`parameters]; \
$CellContext`f = 
          ReplaceAll[$CellContext`focalLength, $CellContext`parameters]; \
{$CellContext`x1, $CellContext`x2} = \
$CellContext`SolveInfinite[$CellContext`mr $CellContext`na, $CellContext`n, \
$CellContext`d, $CellContext`m, $CellContext`f, 
            $CellContext`filterNDSolveOptions[$CellContext`parameters]]; \
$CellContext`secpnts = \
$CellContext`interpolationSectionPoints[$CellContext`x1]; $CellContext`ana = 
          ReplaceAll[
           Last[$CellContext`secpnts]/$CellContext`mr, \
$CellContext`parameters]; 
         Flatten[{$CellContext`frontSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               Map[{$CellContext`f #, 
                 $CellContext`x1[#]}& , $CellContext`secpnts]]], \
$CellContext`backSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{# (($CellContext`m - $CellContext`x2[#])/Sqrt[
                  1. - #^2]), $CellContext`x2[#] + $CellContext`d}& , \
$CellContext`secpnts]]], $CellContext`numericalAperture -> $CellContext`ana, \
$CellContext`parameters}]], $CellContext`commonParameters[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       ReplaceAll[{$CellContext`marginRatio, \
$CellContext`numericalApertureTarget, 
          $CellContext`refractiveIndexValue[$CellContext`lensMediumSymbol, \
$CellContext`designWavelength], $CellContext`lensMediumThickness, \
$CellContext`mechanicalImageDistance}, $CellContext`parameters], \
$CellContext`SolveInfinite[
         Pattern[$CellContext`na, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`t, \
$CellContext`sols}, $CellContext`sols = Flatten[
            
            NDSolve[{
             Derivative[
               1][$CellContext`x1][$CellContext`t] == -(((($CellContext`f \
$CellContext`n) $CellContext`t) (-$CellContext`m + $CellContext`f 
                   Sqrt[1 - $CellContext`t^2] + \
$CellContext`x2[$CellContext`t]))/(
                Sqrt[1 - $CellContext`t^2] (-($CellContext`d $CellContext`n) + \
$CellContext`n $CellContext`x1[$CellContext`t] - $CellContext`n \
$CellContext`x2[$CellContext`t] + 
                 Sqrt[-(($CellContext`t^2 (-$CellContext`m + $CellContext`f 
                    Sqrt[1 - $CellContext`t^2] + \
$CellContext`x2[$CellContext`t])^2)/(-1 + $CellContext`t^2)) + \
($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2]))), 
              Derivative[
               1][$CellContext`x2][$CellContext`t] == (($CellContext`t \
($CellContext`m - $CellContext`x2[$CellContext`t])) ($CellContext`m \
$CellContext`n - ($CellContext`f $CellContext`n) 
                 Sqrt[1 - $CellContext`t^2] - $CellContext`n \
$CellContext`x2[$CellContext`t] + 
                 Sqrt[1 - $CellContext`t^2] 
                  Sqrt[-(($CellContext`t^2 (-$CellContext`m + $CellContext`f 
                    Sqrt[1 - $CellContext`t^2] + \
$CellContext`x2[$CellContext`t])^2)/(-1 + $CellContext`t^2)) + \
($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2]))/((-1 + $CellContext`t^2) \
($CellContext`d $CellContext`n - ($CellContext`d $CellContext`n) \
$CellContext`t^2 - ($CellContext`m $CellContext`n) $CellContext`t^2 + \
(($CellContext`f $CellContext`n) $CellContext`t^2) 
                 Sqrt[1 - $CellContext`t^2] - $CellContext`n \
$CellContext`x1[$CellContext`t] + ($CellContext`n $CellContext`t^2) \
$CellContext`x1[$CellContext`t] + $CellContext`n \
$CellContext`x2[$CellContext`t] - Sqrt[1 - $CellContext`t^2] 
                Sqrt[-(($CellContext`t^2 (-$CellContext`m + $CellContext`f 
                    Sqrt[1 - $CellContext`t^2] + \
$CellContext`x2[$CellContext`t])^2)/(-1 + $CellContext`t^2)) + \
($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2])), $CellContext`x1[0] == 
              0, $CellContext`x2[0] == 
              0}, {$CellContext`x1, $CellContext`x2}, {$CellContext`t, 
              0, $CellContext`na}, $CellContext`opt]]; {
           ReplaceAll[$CellContext`x1, $CellContext`sols], 
           ReplaceAll[$CellContext`x2, $CellContext`sols]}], 
       Attributes[Derivative] = {NHoldAll}, $CellContext`filterNDSolveOptions[
        
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := Apply[Sequence, 
         FilterRules[$CellContext`parameters, 
          Options[NDSolve]]], $CellContext`interpolationSectionPoints[
         Pattern[$CellContext`itf, 
          Blank[InterpolatingFunction]]] := Flatten[
         Part[$CellContext`itf, 3]], $CellContext`mirroredData[
         Pattern[$CellContext`l, {
           RepeatedNull[{
             Blank[], 
             Blank[]}]}]] := Union[
         Join[
          Map[{-Part[#, 1], 
            Part[#, 2]}& , $CellContext`l], $CellContext`l], 
         SameTest -> (Abs[Part[#, 1] - Part[#2, 1]] < 
          10^(-10)& )], \
$CellContext`biasphericAplanatSolveInfiniteWithCoverGlass[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`mr, \
$CellContext`na, $CellContext`n, $CellContext`d, $CellContext`m, \
$CellContext`f, $CellContext`dc, $CellContext`mc, $CellContext`nc, \
$CellContext`shps, $CellContext`secpnts, $CellContext`ana}, {$CellContext`mr, \
$CellContext`na, $CellContext`n, $CellContext`d, $CellContext`m} = \
$CellContext`commonParameters[$CellContext`parameters]; $CellContext`f = 
          ReplaceAll[$CellContext`focalLength, $CellContext`parameters]; \
$CellContext`dc = 
          ReplaceAll[$CellContext`coverGlassThickness, \
$CellContext`parameters]; $CellContext`mc = 
          ReplaceAll[$CellContext`coverGlassMediumSymbol, \
$CellContext`parameters]; $CellContext`nc = \
$CellContext`refractiveIndexValue[$CellContext`mc, 
            
            ReplaceAll[$CellContext`designWavelength, \
$CellContext`parameters]]; {$CellContext`x1, $CellContext`x2} = \
$CellContext`SolveInfiniteWithCoverGlass[$CellContext`mr $CellContext`na, \
$CellContext`n, $CellContext`d, $CellContext`m, $CellContext`f, \
$CellContext`dc, $CellContext`nc, 
            $CellContext`filterNDSolveOptions[$CellContext`parameters]]; \
$CellContext`secpnts = \
$CellContext`interpolationSectionPoints[$CellContext`x1]; $CellContext`ana = 
          ReplaceAll[
           Last[$CellContext`secpnts]/$CellContext`mr, \
$CellContext`parameters]; 
         Flatten[{$CellContext`frontSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               Map[{$CellContext`f #, 
                 $CellContext`x1[#]}& , $CellContext`secpnts]]], \
$CellContext`backSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{# ($CellContext`dc (-(1/Sqrt[1 - #^2]) + 
                    1/Sqrt[-#^2 + $CellContext`nc^2]) + ($CellContext`m - \
$CellContext`x2[#])/Sqrt[
                   1 - #^2]), $CellContext`d + $CellContext`x2[#]}& , \
$CellContext`secpnts]]], $CellContext`numericalAperture -> $CellContext`ana, \
$CellContext`parameters}]], $CellContext`SolveInfiniteWithCoverGlass[
         Pattern[$CellContext`na, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`f, 
          Blank[]], 
         Pattern[$CellContext`dc, 
          Blank[]], 
         Pattern[$CellContext`nc, 
          Blank[]], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`t, \
$CellContext`sols}, $CellContext`sols = Flatten[
            
            NDSolve[{
             Derivative[
               1][$CellContext`x1][$CellContext`t] == ((($CellContext`f \
$CellContext`n) $CellContext`t) (-$CellContext`f + ($CellContext`m - \
$CellContext`dc)/Sqrt[1 - $CellContext`t^2] + $CellContext`dc/(
                  Sqrt[1 - $CellContext`t^2/$CellContext`nc^2] \
$CellContext`nc) - $CellContext`x2[$CellContext`t]/Sqrt[
                 1 - $CellContext`t^2]))/(-($CellContext`n ($CellContext`d - \
$CellContext`x1[$CellContext`t] + $CellContext`x2[$CellContext`t])) + 
               Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + $CellContext`t^2 ($CellContext`f + \
(-$CellContext`m + $CellContext`dc)/Sqrt[
                    1 - $CellContext`t^2] - $CellContext`dc/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2] \
$CellContext`nc) + $CellContext`x2[$CellContext`t]/Sqrt[
                    1 - $CellContext`t^2])^2]), 
              Derivative[
               1][$CellContext`x2][$CellContext`t] == -((($CellContext`t \
(($CellContext`m - $CellContext`dc)/(1 - $CellContext`t^2)^(3/
                    2) + ($CellContext`t^2 $CellContext`dc)/((
                    1 - $CellContext`t^2/$CellContext`nc^2)^(3/
                    2) $CellContext`nc^3) + $CellContext`dc/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2] \
$CellContext`nc) - $CellContext`x2[$CellContext`t]/(1 - $CellContext`t^2)^(3/
                    2))) ($CellContext`f $CellContext`n + ($CellContext`n \
(-$CellContext`m + $CellContext`dc))/Sqrt[
                   1 - $CellContext`t^2] - ($CellContext`n $CellContext`dc)/(
                  Sqrt[1 - $CellContext`t^2/$CellContext`nc^2] \
$CellContext`nc) + ($CellContext`n $CellContext`x2[$CellContext`t])/Sqrt[
                   1 - $CellContext`t^2] - 
                  
                  Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + $CellContext`t^2 ($CellContext`f + \
(-$CellContext`m + $CellContext`dc)/Sqrt[
                    1 - $CellContext`t^2] - $CellContext`dc/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2] \
$CellContext`nc) + $CellContext`x2[$CellContext`t]/Sqrt[
                    1 - $CellContext`t^2])^2]))/(-($CellContext`n \
($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])) + (($CellContext`n $CellContext`t^2) \
(-$CellContext`f + ($CellContext`m - $CellContext`dc)/Sqrt[
                    1 - $CellContext`t^2] + $CellContext`dc/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2] \
$CellContext`nc) - $CellContext`x2[$CellContext`t]/Sqrt[
                   1 - $CellContext`t^2]))/Sqrt[1 - $CellContext`t^2] + 
                Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + $CellContext`t^2 ($CellContext`f + \
(-$CellContext`m + $CellContext`dc)/Sqrt[
                    1 - $CellContext`t^2] - $CellContext`dc/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2] \
$CellContext`nc) + $CellContext`x2[$CellContext`t]/Sqrt[
                    1 - $CellContext`t^2])^2]/Sqrt[
                 1 - $CellContext`t^2])), $CellContext`x1[0] == 
              0, $CellContext`x2[0] == 
              0}, {$CellContext`x1, $CellContext`x2}, {$CellContext`t, 
              0, $CellContext`na}, $CellContext`opt]]; {
           ReplaceAll[$CellContext`x1, $CellContext`sols], 
           
           ReplaceAll[$CellContext`x2, $CellContext`sols]}], \
$CellContext`biasphericAplanatSolveFinite[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`mr, \
$CellContext`na, $CellContext`n, $CellContext`d, $CellContext`m1, \
$CellContext`m2, $CellContext`oi, $CellContext`beta, $CellContext`shps, \
$CellContext`secpnts, $CellContext`ana}, {$CellContext`mr, $CellContext`na, \
$CellContext`n, $CellContext`d, $CellContext`m2} = \
$CellContext`commonParameters[$CellContext`parameters]; $CellContext`oi = 
          
          ReplaceAll[$CellContext`mechanicalObjectImageDistance, \
$CellContext`parameters]; $CellContext`m1 = If[
            
            NumericQ[$CellContext`oi], $CellContext`oi - $CellContext`m2 - \
$CellContext`d, 
            
            ReplaceAll[$CellContext`mechanicalObjectDistance, \
$CellContext`parameters]]; $CellContext`beta = 
          ReplaceAll[-$CellContext`lateralMagnification, \
$CellContext`parameters]; {$CellContext`x1, $CellContext`x2} = \
$CellContext`SolveFinite[($CellContext`mr $CellContext`na) $CellContext`beta, \
$CellContext`n, $CellContext`d, $CellContext`m1, $CellContext`m2, \
$CellContext`beta, 
            $CellContext`filterNDSolveOptions[$CellContext`parameters]]; \
$CellContext`secpnts = \
$CellContext`interpolationSectionPoints[$CellContext`x1]; $CellContext`ana = 
          ReplaceAll[(
             Last[$CellContext`secpnts]/$CellContext`mr)/$CellContext`beta, \
$CellContext`parameters]; 
         Flatten[{$CellContext`frontSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{(# ($CellContext`m1 + $CellContext`x1[#]))/Sqrt[
                 1 - #^2], 
                 $CellContext`x1[#]}& , $CellContext`secpnts]]], \
$CellContext`backSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{(# ($CellContext`m2 - $CellContext`x2[#]))/
                 Sqrt[-#^2 + $CellContext`beta^2], $CellContext`d + \
$CellContext`x2[#]}& , $CellContext`secpnts]]], \
$CellContext`numericalAperture -> $CellContext`ana, \
$CellContext`parameters}]], $CellContext`SolveFinite[
         Pattern[$CellContext`na, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`m1, 
          Blank[]], 
         Pattern[$CellContext`m2, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`t, \
$CellContext`sols}, $CellContext`sols = Flatten[
            
            NDSolve[{
             Derivative[
               1][$CellContext`x1][$CellContext`t] == -((($CellContext`m1 + \
$CellContext`x1[$CellContext`t]) (-($CellContext`n (-(($CellContext`t \
$CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2]) + ($CellContext`t \
$CellContext`m2)/(Sqrt[
                    1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))) + $CellContext`t 
                   Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t $CellContext`m2)/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + ($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2]))/((1 - $CellContext`t^2)^(3/
                  2) (-($CellContext`n ($CellContext`d - \
$CellContext`x1[$CellContext`t] + $CellContext`x2[$CellContext`t])) - \
(($CellContext`n $CellContext`t) (-(($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2]) + ($CellContext`t \
$CellContext`m2)/(Sqrt[
                    1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                   1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta)))/Sqrt[1 - $CellContext`t^2] + 
                 Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t $CellContext`m2)/(
                    Sqrt[
                    1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + ($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2]/Sqrt[1 - $CellContext`t^2]))), 
              Derivative[
               1][$CellContext`x2][$CellContext`t] == -((($CellContext`beta^2 \
($CellContext`m2 - $CellContext`x2[$CellContext`t])) (-($CellContext`n \
(-(($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2]) + ($CellContext`t \
$CellContext`m2)/(Sqrt[
                    1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))) - ($CellContext`t 
                   Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t $CellContext`m2)/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + ($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2])/$CellContext`beta))/((-$CellContext`t^2 + \
$CellContext`beta^2)^(3/
                  2) (-($CellContext`n ($CellContext`d - \
$CellContext`x1[$CellContext`t] + $CellContext`x2[$CellContext`t])) + \
(($CellContext`n $CellContext`t^2) ((
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) $CellContext`m1 - 
                    Sqrt[1 - $CellContext`t^2] $CellContext`m2 + (
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) $CellContext`x1[$CellContext`t] + 
                    Sqrt[1 - $CellContext`t^2] \
$CellContext`x2[$CellContext`t]))/(
                  Sqrt[1 - $CellContext`t^2] ($CellContext`t^2 - \
$CellContext`beta^2)) + 
                 Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t $CellContext`m2)/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + ($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2]/Sqrt[
                  1 - $CellContext`t^2/$CellContext`beta^2]))), \
$CellContext`x1[0] == 0, $CellContext`x2[0] == 
              0}, {$CellContext`x1, $CellContext`x2}, {$CellContext`t, 
              0, $CellContext`na}, $CellContext`opt]]; {
           ReplaceAll[$CellContext`x1, $CellContext`sols], 
           
           ReplaceAll[$CellContext`x2, $CellContext`sols]}], \
$CellContext`biasphericAplanatSolveFiniteWithImageCoverGlass[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`mr, \
$CellContext`na, $CellContext`n, $CellContext`d, $CellContext`m1, \
$CellContext`m2, $CellContext`oi, $CellContext`beta, $CellContext`mc, \
$CellContext`dc, $CellContext`nc, $CellContext`shps, $CellContext`secpnts, \
$CellContext`ana}, {$CellContext`mr, $CellContext`na, $CellContext`n, \
$CellContext`d, $CellContext`m2} = \
$CellContext`commonParameters[$CellContext`parameters]; $CellContext`oi = 
          ReplaceAll[$CellContext`mechanicalObjectImageDistance, \
$CellContext`parameters]; $CellContext`m1 = If[
            
            NumericQ[$CellContext`oi], $CellContext`oi - $CellContext`m2 - \
$CellContext`d, 
            
            ReplaceAll[$CellContext`mechanicalObjectDistance, \
$CellContext`parameters]]; $CellContext`beta = 
          ReplaceAll[-$CellContext`lateralMagnification, \
$CellContext`parameters]; $CellContext`dc = 
          ReplaceAll[$CellContext`coverGlassThickness, \
$CellContext`parameters]; $CellContext`mc = 
          
          ReplaceAll[$CellContext`coverGlassMediumSymbol, \
$CellContext`parameters]; $CellContext`nc = \
$CellContext`refractiveIndexValue[$CellContext`mc, 
            
            ReplaceAll[$CellContext`designWavelength, \
$CellContext`parameters]]; {$CellContext`x1, $CellContext`x2} = \
$CellContext`SolveFiniteWithCoverGlass[($CellContext`mr $CellContext`na) \
$CellContext`beta, $CellContext`n, $CellContext`d, $CellContext`m1, \
$CellContext`m2, $CellContext`beta, $CellContext`dc, $CellContext`nc, 
            $CellContext`filterNDSolveOptions[$CellContext`parameters]]; \
$CellContext`secpnts = \
$CellContext`interpolationSectionPoints[$CellContext`x1]; $CellContext`ana = 
          ReplaceAll[(
             Last[$CellContext`secpnts]/$CellContext`mr)/$CellContext`beta, \
$CellContext`parameters]; 
         Flatten[{$CellContext`frontSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{(# ($CellContext`m1 + $CellContext`x1[#]))/Sqrt[
                 1 - #^2], 
                 $CellContext`x1[#]}& , $CellContext`secpnts]]], \
$CellContext`backSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{# ($CellContext`dc (-(1/Sqrt[-#^2 + $CellContext`beta^2]) + 
                    1/Sqrt[-#^2 + $CellContext`beta^2 $CellContext`nc^2]) + \
($CellContext`m2 - $CellContext`x2[#])/
                   Sqrt[-#^2 + $CellContext`beta^2]), $CellContext`d + \
$CellContext`x2[#]}& , $CellContext`secpnts]]], \
$CellContext`numericalAperture -> $CellContext`ana, \
$CellContext`parameters}]], $CellContext`SolveFiniteWithCoverGlass[
         Pattern[$CellContext`na, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`m1, 
          Blank[]], 
         Pattern[$CellContext`m2, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]], 
         Pattern[$CellContext`dc, 
          Blank[]], 
         Pattern[$CellContext`nc, 
          Blank[]], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`t, \
$CellContext`sols}, $CellContext`sols = Flatten[
            
            NDSolve[{
             Derivative[
               1][$CellContext`x1][$CellContext`t] == -((($CellContext`m1 + \
$CellContext`x1[$CellContext`t]) ((($CellContext`n $CellContext`t) \
$CellContext`m1)/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
($CellContext`dc - $CellContext`m2))/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - (($CellContext`n $CellContext`t) \
$CellContext`dc)/(($CellContext`beta 
                   Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc^2)]) $CellContext`nc) + (($CellContext`n $CellContext`t) \
$CellContext`x1[$CellContext`t])/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
$CellContext`x2[$CellContext`t])/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + $CellContext`t 
                   Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t ($CellContext`dc - \
$CellContext`m2))/(Sqrt[
                    1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc^2)]) $CellContext`nc) + ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2]))/((1 - $CellContext`t^2)^(3/
                  2) (-($CellContext`n ($CellContext`d - \
$CellContext`x1[$CellContext`t] + $CellContext`x2[$CellContext`t])) - \
(($CellContext`n $CellContext`t) (-(($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2]) + ($CellContext`t \
(-$CellContext`dc + $CellContext`m2))/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + ($CellContext`t $CellContext`dc)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc^2)]) $CellContext`nc) - ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                   1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta)))/Sqrt[1 - $CellContext`t^2] + 
                 Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t ($CellContext`dc - \
$CellContext`m2))/(Sqrt[
                    1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc^2)]) $CellContext`nc) + ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2]/Sqrt[1 - $CellContext`t^2]))), 
              Derivative[
               1][$CellContext`x2][$CellContext`t] == -((($CellContext`beta^2 \
($CellContext`m2 - ($CellContext`dc ($CellContext`t^4 - ((
                    2 $CellContext`t^2) $CellContext`beta^2) \
$CellContext`nc^2 + (((Sqrt[
                    1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta^2) ($CellContext`t^2 - $CellContext`beta^2)) 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc^2)]) $CellContext`nc^3 + $CellContext`beta^4 \
$CellContext`nc^4))/($CellContext`t^2 - $CellContext`beta^2 \
$CellContext`nc^2)^2 - $CellContext`x2[$CellContext`t])) ((($CellContext`n \
$CellContext`t) $CellContext`m1)/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
($CellContext`dc - $CellContext`m2))/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - (($CellContext`n $CellContext`t) \
$CellContext`dc)/(($CellContext`beta 
                   Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc^2)]) $CellContext`nc) + (($CellContext`n $CellContext`t) \
$CellContext`x1[$CellContext`t])/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
$CellContext`x2[$CellContext`t])/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t 
                   Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t ($CellContext`dc - \
$CellContext`m2))/(Sqrt[
                    1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc^2)]) $CellContext`nc) + ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2])/$CellContext`beta))/((-$CellContext`t^2 + \
$CellContext`beta^2)^(3/
                  2) (-($CellContext`n ($CellContext`d - \
$CellContext`x1[$CellContext`t] + $CellContext`x2[$CellContext`t])) + \
(($CellContext`n $CellContext`t) (-(($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2]) + ($CellContext`t \
(-$CellContext`dc + $CellContext`m2))/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + ($CellContext`t $CellContext`dc)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc^2)]) $CellContext`nc) - ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta)))/(
                  Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + 
                 Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t $CellContext`m1)/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t ($CellContext`dc - \
$CellContext`m2))/(Sqrt[
                    1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc^2)]) $CellContext`nc) + ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2]/Sqrt[
                  1 - $CellContext`t^2/$CellContext`beta^2]))), \
$CellContext`x1[0] == 0, $CellContext`x2[0] == 
              0}, {$CellContext`x1, $CellContext`x2}, {$CellContext`t, 
              0, $CellContext`na}, $CellContext`opt]]; {
           ReplaceAll[$CellContext`x1, $CellContext`sols], 
           
           ReplaceAll[$CellContext`x2, $CellContext`sols]}], \
$CellContext`biasphericAplanatSolveFiniteWithObjectCoverGlass[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`mr, \
$CellContext`na, $CellContext`n, $CellContext`d, $CellContext`m1, \
$CellContext`m2, $CellContext`oi, $CellContext`beta, $CellContext`mc, \
$CellContext`dc, $CellContext`nc, $CellContext`shps, $CellContext`secpnts, \
$CellContext`ana}, {$CellContext`mr, $CellContext`na, $CellContext`n, \
$CellContext`d, $CellContext`m2} = \
$CellContext`commonParameters[$CellContext`parameters]; $CellContext`oi = 
          ReplaceAll[$CellContext`mechanicalObjectImageDistance, \
$CellContext`parameters]; $CellContext`m1 = If[
            
            NumericQ[$CellContext`oi], $CellContext`oi - $CellContext`m2 - \
$CellContext`d, 
            
            ReplaceAll[$CellContext`mechanicalObjectDistance, \
$CellContext`parameters]]; $CellContext`beta = 
          ReplaceAll[-$CellContext`lateralMagnification, \
$CellContext`parameters]; $CellContext`dc = 
          
          ReplaceAll[$CellContext`objectSideCoverGlassThickness, \
$CellContext`parameters]; $CellContext`mc = 
          ReplaceAll[$CellContext`objectSideCoverGlassMediumSymbol, \
$CellContext`parameters]; $CellContext`nc = \
$CellContext`refractiveIndexValue[$CellContext`mc, 
            
            ReplaceAll[$CellContext`designWavelength, \
$CellContext`parameters]]; {$CellContext`x1, $CellContext`x2} = \
$CellContext`SolveFiniteWithObjectSpaceCoverGlass[($CellContext`mr \
$CellContext`na) $CellContext`beta, $CellContext`n, $CellContext`d, \
$CellContext`m1, $CellContext`m2, $CellContext`beta, $CellContext`dc, \
$CellContext`nc, 
            $CellContext`filterNDSolveOptions[$CellContext`parameters]]; \
$CellContext`secpnts = \
$CellContext`interpolationSectionPoints[$CellContext`x1]; $CellContext`ana = 
          ReplaceAll[(
             Last[$CellContext`secpnts]/$CellContext`mr)/$CellContext`beta, \
$CellContext`parameters]; 
         Flatten[{$CellContext`frontSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{# ((-(1/Sqrt[1 - #^2]) + 
                    1/Sqrt[$CellContext`nc^2 - #^2]) $CellContext`dc + \
($CellContext`m1 + $CellContext`x1[#])/Sqrt[1 - #^2]), 
                 $CellContext`x1[#]}& , $CellContext`secpnts]]], \
$CellContext`backSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{(# ($CellContext`m2 - $CellContext`x2[#]))/
                 Sqrt[$CellContext`beta^2 - #^2], $CellContext`d + \
$CellContext`x2[#]}& , $CellContext`secpnts]]], \
$CellContext`numericalAperture -> $CellContext`ana, \
$CellContext`parameters}]], $CellContext`SolveFiniteWithObjectSpaceCoverGlass[
        
         Pattern[$CellContext`na, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`m1, 
          Blank[]], 
         Pattern[$CellContext`m2, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]], 
         Pattern[$CellContext`dc, 
          Blank[]], 
         Pattern[$CellContext`nc, 
          Blank[]], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`t, \
$CellContext`sols}, $CellContext`sols = Flatten[
            
            NDSolve[{
             Derivative[
               1][$CellContext`x1][$CellContext`t] == -((((-$CellContext`dc + \
$CellContext`m1)/(1 - $CellContext`t^2)^(3/
                    2) + ($CellContext`dc \
$CellContext`t^2)/($CellContext`nc^3 (
                    1 - $CellContext`t^2/$CellContext`nc^2)^(3/
                    2)) + $CellContext`dc/($CellContext`nc 
                   Sqrt[1 - $CellContext`t^2/$CellContext`nc^2]) + \
$CellContext`x1[$CellContext`t]/(1 - $CellContext`t^2)^(3/
                    2)) ((((-$CellContext`dc + $CellContext`m1) \
$CellContext`n) $CellContext`t)/Sqrt[
                   1 - $CellContext`t^2] - (($CellContext`m2 $CellContext`n) \
$CellContext`t)/($CellContext`beta 
                  Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) + \
(($CellContext`dc $CellContext`n) $CellContext`t)/($CellContext`nc 
                   Sqrt[1 - $CellContext`t^2/$CellContext`nc^2]) + \
(($CellContext`n $CellContext`t) $CellContext`x1[$CellContext`t])/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
$CellContext`x2[$CellContext`t])/($CellContext`beta 
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) + \
$CellContext`t 
                   Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (((-$CellContext`dc + $CellContext`m1) \
$CellContext`t)/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`m2 \
$CellContext`t)/($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) + \
($CellContext`dc $CellContext`t)/($CellContext`nc 
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2]) + \
($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/($CellContext`beta 
                    Sqrt[1 - \
$CellContext`t^2/$CellContext`beta^2]))^2]))/(-($CellContext`n \
($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])) - (($CellContext`n $CellContext`t) \
((($CellContext`dc - $CellContext`m1) $CellContext`t)/Sqrt[
                   1 - $CellContext`t^2] + ($CellContext`m2 \
$CellContext`t)/($CellContext`beta 
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) - \
($CellContext`dc $CellContext`t)/($CellContext`nc 
                  Sqrt[1 - $CellContext`t^2/$CellContext`nc^2]) - \
($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                  1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/($CellContext`beta 
                  Sqrt[1 - $CellContext`t^2/$CellContext`beta^2])))/Sqrt[
                1 - $CellContext`t^2] + 
                Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (((-$CellContext`dc + $CellContext`m1) \
$CellContext`t)/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`m2 \
$CellContext`t)/($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) + \
($CellContext`dc $CellContext`t)/($CellContext`nc 
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2]) + \
($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]))^2]/Sqrt[
                 1 - $CellContext`t^2])), 
              Derivative[
               1][$CellContext`x2][$CellContext`t] == -((($CellContext`beta^2 \
($CellContext`m2 - $CellContext`x2[$CellContext`t])) ((((-$CellContext`dc + \
$CellContext`m1) $CellContext`n) $CellContext`t)/Sqrt[
                   1 - $CellContext`t^2] - (($CellContext`m2 $CellContext`n) \
$CellContext`t)/($CellContext`beta 
                  Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) + \
(($CellContext`dc $CellContext`n) $CellContext`t)/($CellContext`nc 
                   Sqrt[1 - $CellContext`t^2/$CellContext`nc^2]) + \
(($CellContext`n $CellContext`t) $CellContext`x1[$CellContext`t])/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
$CellContext`x2[$CellContext`t])/($CellContext`beta 
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) - \
($CellContext`t 
                   Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (((-$CellContext`dc + $CellContext`m1) \
$CellContext`t)/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`m2 \
$CellContext`t)/($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) + \
($CellContext`dc $CellContext`t)/($CellContext`nc 
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2]) + \
($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/($CellContext`beta 
                    Sqrt[1 - \
$CellContext`t^2/$CellContext`beta^2]))^2])/$CellContext`beta))/(($\
CellContext`beta^2 - $CellContext`t^2)^(3/
                  2) (-($CellContext`n ($CellContext`d - \
$CellContext`x1[$CellContext`t] + $CellContext`x2[$CellContext`t])) + \
(($CellContext`n $CellContext`t) ((($CellContext`dc - $CellContext`m1) \
$CellContext`t)/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`m2 \
$CellContext`t)/($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) - \
($CellContext`dc $CellContext`t)/($CellContext`nc 
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2]) - \
($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/($CellContext`beta 
                    Sqrt[1 - \
$CellContext`t^2/$CellContext`beta^2])))/($CellContext`beta 
                  Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) + 
                 Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (((-$CellContext`dc + $CellContext`m1) \
$CellContext`t)/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`m2 \
$CellContext`t)/($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]) + \
($CellContext`dc $CellContext`t)/($CellContext`nc 
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc^2]) + \
($CellContext`t $CellContext`x1[$CellContext`t])/Sqrt[
                    
                    1 - $CellContext`t^2] + ($CellContext`t \
$CellContext`x2[$CellContext`t])/($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2]))^2]/Sqrt[
                  1 - $CellContext`t^2/$CellContext`beta^2]))), \
$CellContext`x1[0] == 0, $CellContext`x2[0] == 
              0}, {$CellContext`x1, $CellContext`x2}, {$CellContext`t, 
              0, $CellContext`na}, $CellContext`opt]]; {
           ReplaceAll[$CellContext`x1, $CellContext`sols], 
           
           ReplaceAll[$CellContext`x2, $CellContext`sols]}], \
$CellContext`biasphericAplanatSolveFiniteWithBothImageAndObjectCoverGlass[
         Pattern[$CellContext`parameters, {
           BlankSequence[Rule]}]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`mr, \
$CellContext`na, $CellContext`n, $CellContext`d, $CellContext`m1, \
$CellContext`m2, $CellContext`oi, $CellContext`beta, $CellContext`mc1, \
$CellContext`dc1, $CellContext`nc1, $CellContext`mc2, $CellContext`nc2, \
$CellContext`dc2, $CellContext`shps, $CellContext`secpnts, $CellContext`ana}, \
{$CellContext`mr, $CellContext`na, $CellContext`n, $CellContext`d, \
$CellContext`m2} = $CellContext`commonParameters[$CellContext`parameters]; \
$CellContext`oi = 
          ReplaceAll[$CellContext`mechanicalObjectImageDistance, \
$CellContext`parameters]; $CellContext`m1 = If[
            
            NumericQ[$CellContext`oi], $CellContext`oi - $CellContext`m2 - \
$CellContext`d, 
            
            ReplaceAll[$CellContext`mechanicalObjectDistance, \
$CellContext`parameters]]; $CellContext`beta = 
          ReplaceAll[-$CellContext`lateralMagnification, \
$CellContext`parameters]; $CellContext`dc2 = 
          ReplaceAll[$CellContext`coverGlassThickness, \
$CellContext`parameters]; $CellContext`mc2 = 
          ReplaceAll[$CellContext`coverGlassMediumSymbol, \
$CellContext`parameters]; $CellContext`nc2 = \
$CellContext`refractiveIndexValue[$CellContext`mc2, 
            
            ReplaceAll[$CellContext`designWavelength, \
$CellContext`parameters]]; $CellContext`dc1 = 
          
          ReplaceAll[$CellContext`objectSideCoverGlassThickness, \
$CellContext`parameters]; $CellContext`mc1 = 
          ReplaceAll[$CellContext`objectSideCoverGlassMediumSymbol, \
$CellContext`parameters]; $CellContext`nc1 = \
$CellContext`refractiveIndexValue[$CellContext`mc1, 
            
            ReplaceAll[$CellContext`designWavelength, \
$CellContext`parameters]]; {$CellContext`x1, $CellContext`x2} = \
$CellContext`SolveFiniteWithBothSpaceCoverGlass[($CellContext`mr \
$CellContext`na) $CellContext`beta, $CellContext`n, $CellContext`d, \
$CellContext`m1, $CellContext`m2, $CellContext`beta, $CellContext`dc1, \
$CellContext`nc1, $CellContext`dc2, $CellContext`nc2, 
            $CellContext`filterNDSolveOptions[$CellContext`parameters]]; \
$CellContext`secpnts = \
$CellContext`interpolationSectionPoints[$CellContext`x1]; $CellContext`ana = 
          ReplaceAll[(
             Last[$CellContext`secpnts]/$CellContext`mr)/$CellContext`beta, \
$CellContext`parameters]; 
         Flatten[{$CellContext`frontSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{# ($CellContext`dc1/($CellContext`nc1 
                   Sqrt[1 - #^2/$CellContext`nc1^2]) + (-$CellContext`dc1 + \
$CellContext`m1)/Sqrt[1 - #^2] + $CellContext`x1[#]/Sqrt[1 - #^2]), 
                 $CellContext`x1[#]}& , $CellContext`secpnts]]], \
$CellContext`backSurfaceShapeFunction -> Interpolation[
              $CellContext`mirroredData[
               
               Map[{# ($CellContext`dc2/(($CellContext`beta $CellContext`nc2) 
                   Sqrt[1 - #^2/($CellContext`beta^2 $CellContext`nc2^2)]) + \
(-$CellContext`dc2 + $CellContext`m2)/
                   Sqrt[$CellContext`beta^2 - #^2] - $CellContext`x2[#]/
                  Sqrt[$CellContext`beta^2 - #^2]), $CellContext`d + \
$CellContext`x2[#]}& , $CellContext`secpnts]]], \
$CellContext`numericalAperture -> $CellContext`ana, \
$CellContext`parameters}]], $CellContext`SolveFiniteWithBothSpaceCoverGlass[
         Pattern[$CellContext`na, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`d, 
          Blank[]], 
         Pattern[$CellContext`m1, 
          Blank[]], 
         Pattern[$CellContext`m2, 
          Blank[]], 
         Pattern[$CellContext`beta, 
          Blank[]], 
         Pattern[$CellContext`dc1, 
          Blank[]], 
         Pattern[$CellContext`nc1, 
          Blank[]], 
         Pattern[$CellContext`dc2, 
          Blank[]], 
         Pattern[$CellContext`nc2, 
          Blank[]], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[]]] := 
       Module[{$CellContext`x1, $CellContext`x2, $CellContext`t, \
$CellContext`sols}, $CellContext`sols = Flatten[
            
            NDSolve[{
             Derivative[
               1][$CellContext`x1][$CellContext`t] == -((((-$CellContext`dc1 + \
$CellContext`m1)/(1 - $CellContext`t^2)^(3/
                    2) + ($CellContext`t^2 $CellContext`dc1)/((
                    1 - $CellContext`t^2/$CellContext`nc1^2)^(3/
                    2) $CellContext`nc1^3) + $CellContext`dc1/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`nc1^2] \
$CellContext`nc1) + $CellContext`x1[$CellContext`t]/(1 - $CellContext`t^2)^(3/
                    2)) ((($CellContext`n $CellContext`t) (-$CellContext`dc1 + \
$CellContext`m1))/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
($CellContext`dc2 - $CellContext`m2))/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + (($CellContext`n $CellContext`t) $CellContext`dc1)/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`nc1^2] \
$CellContext`nc1) - (($CellContext`n $CellContext`t) \
$CellContext`dc2)/(($CellContext`beta 
                   Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc2^2)]) $CellContext`nc2) + (($CellContext`n $CellContext`t) \
$CellContext`x1[$CellContext`t])/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
$CellContext`x2[$CellContext`t])/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + $CellContext`t 
                   
                   Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t ($CellContext`dc1 - \
$CellContext`m1))/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
(-$CellContext`dc2 + $CellContext`m2))/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc1)/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc1^2] \
$CellContext`nc1) + ($CellContext`t $CellContext`dc2)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc2^2)]) $CellContext`nc2) - ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2]))/(-($CellContext`n ($CellContext`d - \
$CellContext`x1[$CellContext`t] + $CellContext`x2[$CellContext`t])) - \
(($CellContext`n $CellContext`t) (($CellContext`t ($CellContext`dc1 - \
$CellContext`m1))/Sqrt[
                   1 - $CellContext`t^2] + ($CellContext`t (-$CellContext`dc2 + \
$CellContext`m2))/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc1)/(
                  Sqrt[1 - $CellContext`t^2/$CellContext`nc1^2] \
$CellContext`nc1) + ($CellContext`t $CellContext`dc2)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc2^2)]) $CellContext`nc2) - ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                  1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                  Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta)))/Sqrt[1 - $CellContext`t^2] + 
                Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t ($CellContext`dc1 - \
$CellContext`m1))/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
(-$CellContext`dc2 + $CellContext`m2))/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc1)/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc1^2] \
$CellContext`nc1) + ($CellContext`t $CellContext`dc2)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc2^2)]) $CellContext`nc2) - ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2]/Sqrt[1 - $CellContext`t^2])), 
              Derivative[
               1][$CellContext`x2][$CellContext`t] == -((($CellContext`beta^2 \
($CellContext`m2 - ($CellContext`dc2 ($CellContext`t^4 - ((
                    2 $CellContext`t^2) $CellContext`beta^2) \
$CellContext`nc2^2 + (((Sqrt[
                    1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta^2) ($CellContext`t^2 - $CellContext`beta^2)) 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc2^2)]) $CellContext`nc2^3 + $CellContext`beta^4 \
$CellContext`nc2^4))/($CellContext`t^2 - $CellContext`beta^2 \
$CellContext`nc2^2)^2 - $CellContext`x2[$CellContext`t])) ((($CellContext`n \
$CellContext`t) (-$CellContext`dc1 + $CellContext`m1))/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
($CellContext`dc2 - $CellContext`m2))/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + (($CellContext`n $CellContext`t) $CellContext`dc1)/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`nc1^2] \
$CellContext`nc1) - (($CellContext`n $CellContext`t) \
$CellContext`dc2)/(($CellContext`beta 
                   Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc2^2)]) $CellContext`nc2) + (($CellContext`n $CellContext`t) \
$CellContext`x1[$CellContext`t])/Sqrt[
                   1 - $CellContext`t^2] + (($CellContext`n $CellContext`t) \
$CellContext`x2[$CellContext`t])/(
                   Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t 
                   Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t ($CellContext`dc1 - \
$CellContext`m1))/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
(-$CellContext`dc2 + $CellContext`m2))/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc1)/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc1^2] \
$CellContext`nc1) + ($CellContext`t $CellContext`dc2)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc2^2)]) $CellContext`nc2) - ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2])/$CellContext`beta))/((-$CellContext`t^2 + \
$CellContext`beta^2)^(3/
                  2) (-($CellContext`n ($CellContext`d - \
$CellContext`x1[$CellContext`t] + $CellContext`x2[$CellContext`t])) + \
(($CellContext`n $CellContext`t) (($CellContext`t ($CellContext`dc1 - \
$CellContext`m1))/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
(-$CellContext`dc2 + $CellContext`m2))/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc1)/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc1^2] \
$CellContext`nc1) + ($CellContext`t $CellContext`dc2)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc2^2)]) $CellContext`nc2) - ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta)))/(
                  Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) + 
                 Sqrt[($CellContext`d - $CellContext`x1[$CellContext`t] + \
$CellContext`x2[$CellContext`t])^2 + (($CellContext`t ($CellContext`dc1 - \
$CellContext`m1))/Sqrt[
                    1 - $CellContext`t^2] + ($CellContext`t \
(-$CellContext`dc2 + $CellContext`m2))/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta) - ($CellContext`t $CellContext`dc1)/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`nc1^2] \
$CellContext`nc1) + ($CellContext`t $CellContext`dc2)/(($CellContext`beta 
                    Sqrt[1 - $CellContext`t^2/($CellContext`beta^2 \
$CellContext`nc2^2)]) $CellContext`nc2) - ($CellContext`t \
$CellContext`x1[$CellContext`t])/Sqrt[
                    1 - $CellContext`t^2] - ($CellContext`t \
$CellContext`x2[$CellContext`t])/(
                    Sqrt[1 - $CellContext`t^2/$CellContext`beta^2] \
$CellContext`beta))^2]/Sqrt[
                  1 - $CellContext`t^2/$CellContext`beta^2]))), \
$CellContext`x1[0] == 0, $CellContext`x2[0] == 
              0}, {$CellContext`x1, $CellContext`x2}, {$CellContext`t, 
              0, $CellContext`na}, $CellContext`opt]]; {
           ReplaceAll[$CellContext`x1, $CellContext`sols], 
           
           ReplaceAll[$CellContext`x2, $CellContext`sols]}], \
$CellContext`mediumCatalog[] = {
        "SCHOTTOExtracted"}, $CellContext`mediumCatalog[
        "BAFN10"] = $CellContext`bafn10, $CellContext`mediumCatalog[
        "N-BAK4"] = $CellContext`n$bak4, $CellContext`mediumCatalog[
        "N-BK7"] = $CellContext`n$bk7, $CellContext`mediumCatalog[
        "N-K5"] = $CellContext`n$k5, $CellContext`mediumCatalog[
        "N-LASF9"] = $CellContext`n$lasf9, $CellContext`mediumCatalog[
        "N-SF10"] = $CellContext`n$sf10, $CellContext`mediumCatalog[
        "N-SF11"] = $CellContext`n$sf11, $CellContext`mediumCatalog[
        "N-SF15"] = $CellContext`n$sf15, $CellContext`mediumCatalog[
        "N-SF5"] = $CellContext`n$sf5, $CellContext`mediumCatalog[
        "N-SK2"] = $CellContext`n$sk2, $CellContext`mediumCatalog[
        "SCHOTTOExtracted"] = {
        "N-BK7", "N-K5", "N-SK2", "N-SF15", "N-LASF9", "N-SF11", "N-SF5", 
         "N-SF10", "N-BAK4", "BAFN10", "N-SF5"}, 
       UpSet[
        $CellContext`mediumQ[$CellContext`bafn10], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`bafn10], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            1.0727052/(-108.53942700000002` + 1000000 $CellContext`lambda$^2) + 
            0.123762468/(-0.0451639792 + 1000000 $CellContext`lambda$^2) + 
            1.60477289/(-0.00947021617 + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`bafn10[$CellContext`lambdaDomain] = {0.00033400000000000004`, 
        0.0023250000000000002`}, $CellContext`bafn10[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           1.0727052/(-108.53942700000002` + 1000000 $CellContext`lambda$^2) + 
           0.123762468/(-0.0451639792 + 1000000 $CellContext`lambda$^2) + 
           1.60477289/(-0.00947021617 + 
            1000000 $CellContext`lambda$^2))], \
$CellContext`bafn10[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`bafn10[$CellContext`mediumName] = 
       "BAFN10", $CellContext`bafn10[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`bafn10[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (1.60477289/($CellContext`lsq$ - 0.00947021617) + 
             0.123762468/($CellContext`lsq$ - 0.0451639792) + 
             1.0727052/($CellContext`lsq$ - 
              108.53942700000002`)) $CellContext`lsq$]]], 
       UpSet[
        $CellContext`mediumQ[$CellContext`n$bak4], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`n$bak4], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            0.9453953730000001/(-105.96587500000001` + 
             1000000 $CellContext`lambda$^2) + 
            0.132817724/(-0.0315631177 + 1000000 $CellContext`lambda$^2) + 
            1.28834642/(-0.007799806260000001 + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`n$bak4[$CellContext`lambdaDomain] = {0.00033400000000000004`, 
        0.0025}, $CellContext`n$bak4[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           0.9453953730000001/(-105.96587500000001` + 
            1000000 $CellContext`lambda$^2) + 
           0.132817724/(-0.0315631177 + 1000000 $CellContext`lambda$^2) + 
           1.28834642/(-0.007799806260000001 + 
            
            1000000 $CellContext`lambda$^2))], \
$CellContext`n$bak4[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`n$bak4[$CellContext`mediumName] = 
       "N-BAK4", $CellContext`n$bak4[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`n$bak4[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (1.28834642/($CellContext`lsq$ - 0.007799806260000001) + 
             0.132817724/($CellContext`lsq$ - 0.0315631177) + 
             0.9453953730000001/($CellContext`lsq$ - 
              105.96587500000001`)) $CellContext`lsq$]]], 
       UpSet[
        $CellContext`mediumQ[$CellContext`n$k5], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`n$k5], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            0.9305116630000001/(-111.98277699999998` + 
             1000000 $CellContext`lambda$^2) + 
            0.19956200500000001`/(-0.024110866 + 
             1000000 $CellContext`lambda$^2) + 
            1.08511833/(-0.00661099503 + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`n$k5[$CellContext`lambdaDomain] = {0.00031000000000000005`, 
        0.0025}, $CellContext`n$k5[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           0.9305116630000001/(-111.98277699999998` + 
            1000000 $CellContext`lambda$^2) + 
           0.19956200500000001`/(-0.024110866 + 
            1000000 $CellContext`lambda$^2) + 
           1.08511833/(-0.00661099503 + 
            1000000 $CellContext`lambda$^2))], \
$CellContext`n$k5[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`n$k5[$CellContext`mediumName] = 
       "N-K5", $CellContext`n$k5[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`n$k5[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (1.08511833/($CellContext`lsq$ - 0.00661099503) + 
             0.19956200500000001`/($CellContext`lsq$ - 0.024110866) + 
             0.9305116630000001/($CellContext`lsq$ - 
              111.98277699999998`)) $CellContext`lsq$]]], 
       UpSet[
        $CellContext`mediumQ[$CellContext`n$lasf9], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`n$lasf9], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            1.80691843/(-156.53082899999998` + 
             1000000 $CellContext`lambda$^2) + 
            0.298926886/(-0.053873623600000003` + 
             1000000 $CellContext`lambda$^2) + 
            2.00029547/(-0.0121426017 + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`n$lasf9[$CellContext`lambdaDomain] = {0.000365, 
        0.0025}, $CellContext`n$lasf9[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           1.80691843/(-156.53082899999998` + 1000000 $CellContext`lambda$^2) + 
           0.298926886/(-0.053873623600000003` + 
            1000000 $CellContext`lambda$^2) + 
           2.00029547/(-0.0121426017 + 
            1000000 $CellContext`lambda$^2))], \
$CellContext`n$lasf9[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`n$lasf9[$CellContext`mediumName] = 
       "N-LASF9", $CellContext`n$lasf9[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`n$lasf9[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (2.00029547/($CellContext`lsq$ - 0.0121426017) + 
             0.298926886/($CellContext`lsq$ - 0.053873623600000003`) + 
             1.80691843/($CellContext`lsq$ - 
              156.53082899999998`)) $CellContext`lsq$]]], 
       UpSet[
        $CellContext`mediumQ[$CellContext`n$sf10], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`n$sf10], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            1.64447552/(-147.468793 + 1000000 $CellContext`lambda$^2) + 
            0.25628784200000004`/(-0.059573677500000005` + 
             1000000 $CellContext`lambda$^2) + 
            1.62153902/(-0.0122241457 + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`n$sf10[$CellContext`lambdaDomain] = {0.00038, 
        0.0025}, $CellContext`n$sf10[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           1.64447552/(-147.468793 + 1000000 $CellContext`lambda$^2) + 
           0.25628784200000004`/(-0.059573677500000005` + 
            1000000 $CellContext`lambda$^2) + 
           1.62153902/(-0.0122241457 + 
            1000000 $CellContext`lambda$^2))], \
$CellContext`n$sf10[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`n$sf10[$CellContext`mediumName] = 
       "N-SF10", $CellContext`n$sf10[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`n$sf10[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (1.62153902/($CellContext`lsq$ - 0.0122241457) + 
             0.25628784200000004`/($CellContext`lsq$ - 0.059573677500000005`) + 
             1.64447552/($CellContext`lsq$ - 
              147.468793)) $CellContext`lsq$]]], 
       UpSet[
        $CellContext`mediumQ[$CellContext`n$sf11], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`n$sf11], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            1.89878101/(-155.23629 + 1000000 $CellContext`lambda$^2) + 
            0.313747346/(-0.0623068142 + 1000000 $CellContext`lambda$^2) + 
            1.73759695/(-0.013188707 + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`n$sf11[$CellContext`lambdaDomain] = {0.00037000000000000005`, 
        0.0025}, $CellContext`n$sf11[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           1.89878101/(-155.23629 + 1000000 $CellContext`lambda$^2) + 
           0.313747346/(-0.0623068142 + 1000000 $CellContext`lambda$^2) + 
           1.73759695/(-0.013188707 + 
            1000000 $CellContext`lambda$^2))], \
$CellContext`n$sf11[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`n$sf11[$CellContext`mediumName] = 
       "N-SF11", $CellContext`n$sf11[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`n$sf11[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (1.73759695/($CellContext`lsq$ - 0.013188707) + 
             0.313747346/($CellContext`lsq$ - 0.0623068142) + 
             1.89878101/($CellContext`lsq$ - 155.23629)) $CellContext`lsq$]]], 
       UpSet[
        $CellContext`mediumQ[$CellContext`n$sf15], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`n$sf15], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            1.50824017/(-132.709339 + 1000000 $CellContext`lambda$^2) + 
            0.21898709400000002`/(-0.059785689700000005` + 
             1000000 $CellContext`lambda$^2) + 
            1.57055634/(-0.011650701400000001` + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`n$sf15[$CellContext`lambdaDomain] = {0.00037000000000000005`, 
        0.0025}, $CellContext`n$sf15[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           1.50824017/(-132.709339 + 1000000 $CellContext`lambda$^2) + 
           0.21898709400000002`/(-0.059785689700000005` + 
            1000000 $CellContext`lambda$^2) + 
           1.57055634/(-0.011650701400000001` + 
            1000000 $CellContext`lambda$^2))], \
$CellContext`n$sf15[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`n$sf15[$CellContext`mediumName] = 
       "N-SF15", $CellContext`n$sf15[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`n$sf15[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (1.57055634/($CellContext`lsq$ - 0.011650701400000001`) + 
             0.21898709400000002`/($CellContext`lsq$ - 0.059785689700000005`) + 
             1.50824017/($CellContext`lsq$ - 
              132.709339)) $CellContext`lsq$]]], 
       UpSet[
        $CellContext`mediumQ[$CellContext`n$sf5], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`n$sf5], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            1.42729015/(-129.141675 + 1000000 $CellContext`lambda$^2) + 
            0.18708552700000003`/(-0.0588995392 + 
             1000000 $CellContext`lambda$^2) + 
            1.52481889/(-0.011254756 + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`n$sf5[$CellContext`lambdaDomain] = {0.00037000000000000005`, 
        0.0025}, $CellContext`n$sf5[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           1.42729015/(-129.141675 + 1000000 $CellContext`lambda$^2) + 
           0.18708552700000003`/(-0.0588995392 + 
            1000000 $CellContext`lambda$^2) + 
           1.52481889/(-0.011254756 + 
            1000000 $CellContext`lambda$^2))], \
$CellContext`n$sf5[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`n$sf5[$CellContext`mediumName] = 
       "N-SF5", $CellContext`n$sf5[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`n$sf5[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (1.52481889/($CellContext`lsq$ - 0.011254756) + 
             0.18708552700000003`/($CellContext`lsq$ - 0.0588995392) + 
             1.42729015/($CellContext`lsq$ - 
              129.141675)) $CellContext`lsq$]]], 
       UpSet[
        $CellContext`mediumQ[$CellContext`n$sk2], True], 
       UpSet[
        $CellContext`refractiveIndexValue[$CellContext`n$sk2], 
        Function[{$CellContext`lambda$}, 
         Sqrt[
         1 + (1000000 $CellContext`lambda$^2) (
            0.96818604/(-110.377773 + 1000000 $CellContext`lambda$^2) + 
            0.257738258/(-0.024282352700000003` + 
             1000000 $CellContext`lambda$^2) + 
            1.28189012/(-0.007271916400000001 + 
             1000000 $CellContext`lambda$^2))]]], \
$CellContext`n$sk2[$CellContext`lambdaDomain] = {0.00031000000000000005`, 
        0.0025}, $CellContext`n$sk2[$CellContext`lastIndex] = 
       Sqrt[1 + (1000000 $CellContext`lambda$^2) (
           0.96818604/(-110.377773 + 1000000 $CellContext`lambda$^2) + 
           0.257738258/(-0.024282352700000003` + 
            1000000 $CellContext`lambda$^2) + 
           1.28189012/(-0.007271916400000001 + 
            1000000 $CellContext`lambda$^2))], \
$CellContext`n$sk2[$CellContext`lastLambda] = $CellContext`lambda$, \
$CellContext`n$sk2[$CellContext`mediumName] = 
       "N-SK2", $CellContext`n$sk2[$CellContext`mediumType] = \
$CellContext`dispersiveMedium, \
$CellContext`n$sk2[$CellContext`refractiveIndex] = 
       Function[{$CellContext`lambda$}, 
         With[{$CellContext`lsq$ = (1000 $CellContext`lambda$)^2}, 
          Sqrt[
          1 + (1.28189012/($CellContext`lsq$ - 0.007271916400000001) + 
             0.257738258/($CellContext`lsq$ - 0.024282352700000003`) + 
             0.96818604/($CellContext`lsq$ - 
              110.377773)) $CellContext`lsq$]]], \
$CellContext`setOpticsFor2DRayTrace[
         Pattern[$CellContext`op, 
          Blank[Symbol]], 
         Pattern[$CellContext`solverResult, {
           BlankSequence[Rule]}], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[Rule]]] := If[
         ReplaceAll[$CellContext`conjugateInfiniteness, \
$CellContext`solverResult], 
         $CellContext`setOpticsFor2DRayTraceInfinite[$CellContext`op, \
$CellContext`solverResult, $CellContext`opt], 
         $CellContext`setOpticsFor2DRayTraceFinite[$CellContext`op, \
$CellContext`solverResult, $CellContext`opt]], 
       Options[$CellContext`setOpticsFor2DRayTrace] = \
{$CellContext`tracingWavelength -> $CellContext`designWavelength, \
$CellContext`decenterBetweenAspherics -> 0}, 
       UpSet[
        $CellContext`opticsQ[$CellContext`op], 
        True], $CellContext`op[$CellContext`mediums] = \
{$CellContext`atmosphere, $CellContext`n$bk7, $CellContext`n$bk7, \
$CellContext`atmosphere, $CellContext`atmosphere}, \
$CellContext`op[$CellContext`surfaces] = {$CellContext`s1$38733606, \
$CellContext`pup$38733606, $CellContext`s2$38733606, \
$CellContext`img$38733606, $CellContext`ref$38733606}, $CellContext`opticsQ[
         Blank[]] := False, 
       Attributes[$CellContext`s1$38733606] = {Temporary}, 
       UpSet[
        $CellContext`surfaceQ[$CellContext`s1$38733606], 
        True], $CellContext`s1$38733606[$CellContext`origin] = {0, 
        0}, $CellContext`s1$38733606[$CellContext`shape] = \
$CellContext`parametric[{
          
          InterpolatingFunction[{{-0.306, 0.306}}, {
           5, 7, 0, {45}, {4}, 0, 0, 0, 0, Automatic, {}, {}, 
            False}, CompressedData["
1:eJxTTMoPSmViYGBgBGJdINa/q8LWOPXy/umqEszfYi/t/5/LzZCtdnE/C1f6
+h+fzu3ntNgeJz3z9H6+NHY+O/sT+9fvXLzS9cnR/QG8Dq6+nYf3f0q48yBE
7+B+tcyPP3Ys27s/U0DL4MSHHftDV7QeDnDdtt/J4WHYzZmb9+vdsHmV+G7D
ftMHBr+vtK7Z/4PpVdfigyv271FdLFX0d8n+Bo+YVQ6WC/fXHdHlT/efsf/P
e9fJMyN69qf9kc28Vi4ApRn2M0ABlG8PlbeHqreH6reHmmcPNd8eap891H57
qHvsoe6zh7rXHup+e6h/7KH+s4f61x7qf3toeNhDw8ceGl720PCzh4anPTR8
7QHBorIK
           "], {
           Developer`PackedArrayForm, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 
            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 
            28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 
            44, 45}, CompressedData["
1:eJxTTMoPSmVkYGDQBWLrR3bxM/5vsZ83d7rwtMRN9ru+XeQSfbneXsz0xUvf
ayvtz+ilb2UsWmJ/Yb/vSq68+fbTeqeun9k7017s982t7b5T7PulIySUwvvt
+T//m9bg3W7/zp/txfmSBvtjty/NjrWssv/1fVnTQ58S+6QjJzvOuuXZT//4
xrGnItW+MWZD4WTtBPt0BedIXbtw+5PiPiv0vf3tJ7x/5qmmZW8vn/Ht5zs9
VfstKU8bzYtM7Rxf9DJ6zZCxY4ACGB8mD1MP0w8zD2Y+zD6Y/TD3wNwHcy/M
/TD/wPwH8y/M/7DwgIUPLLxg4QcLT1j4AgDeZKkM
            "]}, {Automatic}], 
          
          InterpolatingFunction[{{-0.306, 0.306}}, {
           5, 7, 0, {45}, {4}, {1}, 0, 0, 0, Automatic, {}, {}, 
            False}, CompressedData["
1:eJxTTMoPSmViYGBgBGJdINa/q8LWOPXy/umqEszfYi/t/5/LzZCtdnE/C1f6
+h+fzu3ntNgeJz3z9H6+NHY+O/sT+9fvXLzS9cnR/QG8Dq6+nYf3f0q48yBE
7+B+tcyPP3Ys27s/U0DL4MSHHftDV7QeDnDdtt/J4WHYzZmb9+vdsHmV+G7D
ftMHBr+vtK7Z/4PpVdfigyv271FdLFX0d8n+Bo+YVQ6WC/fXHdHlT/efsf/P
e9fJMyN69qf9kc28Vi4ApRn2M0ABlG8PlbeHqreH6reHmmcPNd8eap891H57
qHvsoe6zh7rXHup+e6h/7KH+s4f61x7qf3toeNhDw8ceGl720PCzh4anPTR8
7QHBorIK
           "], {
           Developer`PackedArrayForm, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 
            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 
            28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 
            44, 45}, CompressedData["
1:eJxTTMoPSmVkYGDQBWLrR3bxM/5vsZ83d7rwtMRN9ru+XeQSfbneXsz0xUvf
ayvtz+ilb2UsWmJ/Yb/vSq68+fbTeqeun9k7017s982t7b5T7PulIySUwvvt
+T//m9bg3W7/zp/txfmSBvtjty/NjrWssv/1fVnTQ58S+6QjJzvOuuXZT//4
xrGnItW+MWZD4WTtBPt0BedIXbtw+5PiPiv0vf3tJ7x/5qmmZW8vn/Ht5zs9
VfstKU8bzYtM7Rxf9DJ6zZCxY4ACGB8mD1MP0w8zD2Y+zD6Y/TD3wNwHcy/M
/TD/wPwH8y/M/7DwgIUPLLxg4QcLT1j4AgDeZKkM
            "]}, {
           Automatic}]}, {-0.306, 0.306}, {-0.3, 
         0.3}], $CellContext`s1$38733606[$CellContext`solverAsphericalSurface]\
 = $CellContext`frontSolverAsphericalSurface, \
$CellContext`s1$38733606[$CellContext`surfaceComment] = 
       "surfaceComment", $CellContext`surfaceQ[
         Blank[]] := False, $CellContext`origin[
         $CellContext`stoppedRay[$CellContext`noIntersection]] := 
       Sequence[], $CellContext`origin[
         $CellContext`ray[
          Pattern[$CellContext`org, 
           Blank[]], 
          Pattern[$CellContext`dir, 
           Blank[]], 
          BlankNullSequence[]]] := $CellContext`org, $CellContext`origin[
         $CellContext`stoppedRay[
          Pattern[$CellContext`org, {
            Blank[], 
            Blank[]}], 
          BlankSequence[]]] := $CellContext`org, 
       Attributes[$CellContext`pup$38733606] = {Temporary}, 
       UpSet[
        $CellContext`surfaceQ[$CellContext`pup$38733606], 
        True], $CellContext`pup$38733606[$CellContext`origin] = {
        0, 0.08202507329304691}, \
$CellContext`pup$38733606[$CellContext`pupilSurface] = 
       True, $CellContext`pup$38733606[$CellContext`shape] = \
$CellContext`plane[{}, $CellContext`domainAll, {-0.2994028801286226, 
         0.2994028801286226}], \
$CellContext`pup$38733606[$CellContext`surfaceComment] = "surfaceComment", 
       UpSet[
        Between[$CellContext`domainAll], 
        Between[{-Infinity, Infinity}]], 
       UpSet[
        Interval[$CellContext`domainAll], 
        Interval[{-Infinity, Infinity}]], 
       Attributes[$CellContext`s2$38733606] = {Temporary}, 
       UpSet[
        $CellContext`surfaceQ[$CellContext`s2$38733606], 
        True], $CellContext`s2$38733606[$CellContext`origin] = {0, 
        0}, $CellContext`s2$38733606[$CellContext`shape] = \
$CellContext`parametric[{
          
          InterpolatingFunction[{{-0.13750057646650674`, 
           0.13750057646650674`}}, {
           5, 7, 0, {45}, {4}, 0, 0, 0, 0, Automatic, {}, {}, 
            False}, CompressedData["
1:eJxTTMoPSmViYGBgBGJdIH6Y2Zs/b+bB/bU70ooKkw7sP1zR+TMoed/+rM9l
l77o7d7/b7nO0j+8O/ZrqVVcu/d3y365I7WH2+9v2h9UU9XXc3zDfp4XL8+G
Za3dHxsULhrkv3L/1upze+fbLN3/1G+uyY0Pi/ZHGM/i4Fm+YH/3s4/NP/fO
2b+dRVTspsGM/fMY0ti6/0zZr3E2Jy3o5MT9m/c3h3Hq9e6vkq588Hxqy/65
kil3k/+X7193+MGJqIe/95kEfD8e9fD1PgYogPLtoPJ2UPX2UP32UPPsoebb
Q+2zh9pvD3WPPdR99lD32kPdbw/1jz3Uf/ZQ/9pD/W8PDQ97aPjYQ8PLHhp+
9tDwtIeGrz0AlJrCtg==
           "], {
           Developer`PackedArrayForm, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 
            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 
            28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 
            44, 45}, CompressedData["
1:eJxTTMoPSmVkYGDQBWLXl5439996b19XGuLNc/+9vff5vj6Fx+/tpcX/OEe/
eG/voFb5Xfrte/sm97TUmI/v7aPaHTi5vry3/9txc07Jt/f2a5Ru8Mz+8d7+
ydJFFTW/3ttf9/quKfHnvb0my33/R0A6d67B6al/39sLtmt3Gv17b3++RLtq
B5CetPydKed/oH6e631+QDoyfGJjB5BuW+lTdQRIewlYHXkNpD1Zr///D6Ql
wj+BaQYw+ADnw+Rh6mH6YebBzIfZB7Mf5h6Y+2Duhbkf5h+Y/2D+hfkfFh6w
8IGFFyz8YOEJC18A+ZjKhw==
            "]}, {Automatic}], 
          
          InterpolatingFunction[{{-0.13750057646650674`, 
           0.13750057646650674`}}, {
           5, 7, 0, {45}, {4}, {1}, 0, 0, 0, Automatic, {}, {}, 
            False}, CompressedData["
1:eJxTTMoPSmViYGBgBGJdIH6Y2Zs/b+bB/bU70ooKkw7sP1zR+TMoed/+rM9l
l77o7d7/b7nO0j+8O/ZrqVVcu/d3y365I7WH2+9v2h9UU9XXc3zDfp4XL8+G
Za3dHxsULhrkv3L/1upze+fbLN3/1G+uyY0Pi/ZHGM/i4Fm+YH/3s4/NP/fO
2b+dRVTspsGM/fMY0ti6/0zZr3E2Jy3o5MT9m/c3h3Hq9e6vkq588Hxqy/65
kil3k/+X7193+MGJqIe/95kEfD8e9fD1PgYogPLtoPJ2UPX2UP32UPPsoebb
Q+2zh9pvD3WPPdR99lD32kPdbw/1jz3Uf/ZQ/9pD/W8PDQ97aPjYQ8PLHhp+
9tDwtIeGrz0AlJrCtg==
           "], {
           Developer`PackedArrayForm, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 
            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 
            28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 
            44, 45}, CompressedData["
1:eJxTTMoPSmVkYGDQBWLXl5439996b19XGuLNc/+9vff5vj6Fx+/tpcX/OEe/
eG/voFb5Xfrte/sm97TUmI/v7aPaHTi5vry3/9txc07Jt/f2a5Ru8Mz+8d7+
ydJFFTW/3ttf9/quKfHnvb0my33/R0A6d67B6al/39sLtmt3Gv17b3++RLtq
B5CetPydKed/oH6e631+QDoyfGJjB5BuW+lTdQRIewlYHXkNpD1Zr///D6Ql
wj+BaQYw+ADnw+Rh6mH6YebBzIfZB7Mf5h6Y+2Duhbkf5h+Y/2D+hfkfFh6w
8IGFFyz8YOEJC18A+ZjKhw==
            "]}, {
           Automatic}]}, {-0.13750057646650674`, 
         0.13750057646650674`}, {-0.1344832880564887, 
         0.1344832880564887}], \
$CellContext`s2$38733606[$CellContext`solverAsphericalSurface] = \
$CellContext`backSolverAsphericalSurface, \
$CellContext`s2$38733606[$CellContext`surfaceComment] = "surfaceComment", 
       Attributes[$CellContext`img$38733606] = {Temporary}, 
       UpSet[
        $CellContext`surfaceQ[$CellContext`img$38733606], 
        True], $CellContext`img$38733606[$CellContext`origin] = {
        0, 1.423246539883929}, $CellContext`img$38733606[$CellContext`shape] = \
$CellContext`plane[{}, $CellContext`domainAll, {-2.1650514209214933`*^-6, 
         2.1650514209214933`*^-6}], \
$CellContext`img$38733606[$CellContext`surfaceComment] = "surfaceComment", 
       Attributes[$CellContext`ref$38733606] = {Temporary}, 
       UpSet[
        $CellContext`surfaceQ[$CellContext`ref$38733606], 
        True], $CellContext`ref$38733606[$CellContext`origin] = {
        0, 
         0.42324653988392896`}, $CellContext`ref$38733606[$CellContext`shape] = \
$CellContext`spherical[{1.}, {-1., 1.}, {-0.30000021779025793`, 
         0.30000021779025793`}], \
$CellContext`ref$38733606[$CellContext`surfaceComment] = 
       "surfaceComment", $CellContext`setOpticsFor2DRayTraceInfinite[
         Pattern[$CellContext`op, 
          Blank[Symbol]], 
         Pattern[$CellContext`solverResult, {
           BlankSequence[Rule]}], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[Rule]]] := 
       Module[{$CellContext`wl, $CellContext`s1, $CellContext`pup, \
$CellContext`s2, $CellContext`img, $CellContext`ref, $CellContext`cgi, \
$CellContext`cgo, $CellContext`bod, $CellContext`ncg, $CellContext`dec, \
$CellContext`mrg}, $CellContext`wl = ReplaceAll[
            
            ReplaceAll[$CellContext`tracingWavelength, {$CellContext`opt}], \
{$CellContext`tracingWavelength -> 
             ReplaceAll[$CellContext`designWavelength, \
$CellContext`solverResult]}]; $CellContext`dec = ReplaceAll[
            
            ReplaceAll[$CellContext`decenterBetweenAspherics, \
{$CellContext`opt}], 
            
            Options[$CellContext`setOpticsFor2DRayTrace]]; \
$CellContext`createSurface[$CellContext`s1, 
           $CellContext`parametricShape[
            
            ReplaceAll[$CellContext`frontSurfaceShapeFunction, \
$CellContext`solverResult]], {0, 
           0}]; $CellContext`attachAttributeToSurface[$CellContext`s1, \
$CellContext`solverAsphericalSurface, \
$CellContext`frontSolverAsphericalSurface]; \
$CellContext`createSurface[$CellContext`pup, 
           $CellContext`planeShape[], {0, 
            Part[
             $CellContext`marginalPositionOfSurface[$CellContext`s1], -1, 
             1]}]; $CellContext`createSurface[$CellContext`s2, 
           $CellContext`parametricShape[
            
            ReplaceAll[$CellContext`backSurfaceShapeFunction, \
$CellContext`solverResult]], {$CellContext`dec, 
            0}]; $CellContext`attachAttributeToSurface[$CellContext`s2, \
$CellContext`solverAsphericalSurface, \
$CellContext`backSolverAsphericalSurface]; \
$CellContext`createSurface[$CellContext`img, 
           $CellContext`planeShape[{-2, 2}], {0, 
            
            ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`mechanicalImageDistance, $CellContext`solverResult]}]; \
$CellContext`createSurface[$CellContext`ref, 
           $CellContext`sphericalShape[
            ReplaceAll[
            1/$CellContext`focalLength, $CellContext`solverResult]], {0, 
            
            ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`mechanicalImageDistance - $CellContext`focalLength, \
$CellContext`solverResult]}]; $CellContext`bod = 
          ReplaceAll[$CellContext`lensMediumSymbol, \
$CellContext`solverResult]; Clear[$CellContext`op]; If[
           
           ReplaceAll[$CellContext`coverGlassExistence, \
$CellContext`solverResult], $CellContext`createSurface[$CellContext`cgi, 
             $CellContext`planeShape[], {0, 
              
              ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`mechanicalImageDistance/2 - $CellContext`coverGlassThickness/
               2, $CellContext`solverResult]}]; \
$CellContext`createSurface[$CellContext`cgo, 
             $CellContext`planeShape[], {0, 
              
              ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`mechanicalImageDistance/2 + $CellContext`coverGlassThickness/
                2, $CellContext`solverResult]}]; $CellContext`ncg = 
            ReplaceAll[$CellContext`coverGlassMediumSymbol, \
$CellContext`solverResult]; $CellContext`createOptics[$CellContext`op, \
{$CellContext`atmosphere, $CellContext`s1, $CellContext`bod, \
$CellContext`pup, $CellContext`bod, $CellContext`s2, $CellContext`atmosphere, \
$CellContext`cgi, $CellContext`ncg, $CellContext`cgo, \
$CellContext`atmosphere, $CellContext`img, $CellContext`atmosphere, \
$CellContext`ref, $CellContext`atmosphere}], 
           $CellContext`createOptics[$CellContext`op, \
{$CellContext`atmosphere, $CellContext`s1, $CellContext`bod, \
$CellContext`pup, $CellContext`bod, $CellContext`s2, $CellContext`atmosphere, \
$CellContext`img, $CellContext`atmosphere, $CellContext`ref, \
$CellContext`atmosphere}]]; $CellContext`mrg = 
          ReplaceAll[$CellContext`numericalAperture $CellContext`focalLength, \
$CellContext`solverResult]; $CellContext`traceRay[$CellContext`op][
           $CellContext`markRayAsDomainDefinedMarginal[
            $CellContext`raySet[{$CellContext`mrg, -0.3}, {0, 
             1}]], $CellContext`wl]; $CellContext`setPupil[$CellContext`op, \
$CellContext`pup]; $CellContext`op], $CellContext`createSurface[
         PatternTest[
          Pattern[$CellContext`surfaceSymbol, 
           Blank[]], $CellContext`canBeObjectSymbol], 
         Pattern[$CellContext`surfaceShape, 
          Blank[]], 
         Pattern[$CellContext`position, {
           Blank[], 
           Blank[]}], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[]]] := Module[{}, UpSet[
           $CellContext`surfaceQ[$CellContext`surfaceSymbol], 
           True]; $CellContext`surfaceSymbol[$CellContext`shape] = \
$CellContext`surfaceShape; $CellContext`surfaceSymbol[$CellContext`origin] = \
$CellContext`position; \
$CellContext`surfaceSymbol[$CellContext`surfaceComment] = ReplaceAll[
            
            ReplaceAll[$CellContext`surfaceComment, {$CellContext`opt}], \
{$CellContext`surfaceComment -> 
             ToString[$CellContext`surfaceComment]}]; \
$CellContext`surfaceSymbol], 
       Options[$CellContext`createSurface] = {$CellContext`surfaceComment -> 
         ""}, $CellContext`canBeObjectSymbol[
         Pattern[$CellContext`s, 
          Blank[Symbol]]] := ContainsOnly[
         Attributes[$CellContext`s], {
         Temporary}], $CellContext`canBeObjectSymbol[
         Pattern[$CellContext`s, 
          Blank[Symbol]][
          
          BlankNullSequence[]]] := \
$CellContext`canBeObjectSymbol[$CellContext`s], $CellContext`canBeObjectSymbol[
         Blank[]] := False, $CellContext`parametricShape[
         Pattern[$CellContext`f, 
          Blank[Function]], 
         Pattern[$CellContext`dom, {
           Blank[], 
           Blank[]}]] := $CellContext`parametric[{$CellContext`f, 
          Evaluate[
           Derivative[
           1][$CellContext`f]]}, $CellContext`dom, $CellContext`dom], \
$CellContext`parametricShape[
         Pattern[$CellContext`f, 
          Blank[
          InterpolatingFunction]]] := $CellContext`parametric[{$CellContext`f, 
          Evaluate[
           Derivative[1][$CellContext`f]]}, 
         $CellContext`interpolationDomain[$CellContext`f], 
         $CellContext`interpolationDomain[$CellContext`f]], \
$CellContext`parametricShape[
         Pattern[$CellContext`f, 
          Blank[InterpolatingFunction]], 
         Pattern[$CellContext`dom, {
           Blank[], 
           Blank[]}]] := $CellContext`parametric[{$CellContext`f, 
          Evaluate[
           Derivative[1][$CellContext`f]]}, 
         $CellContext`interpolationDomain[$CellContext`f], $CellContext`dom], \
$CellContext`interpolationDomain[
         Pattern[$CellContext`itf, 
          Blank[InterpolatingFunction]]] := Flatten[
         $CellContext`itf["Domain"]], $CellContext`attachAttributeToSurface[
         PatternTest[
          Pattern[$CellContext`surfaceSymbol, 
           Blank[]], $CellContext`surfaceQ], 
         Pattern[$CellContext`attributeSymbol, 
          Blank[Symbol]], 
         Pattern[$CellContext`attributeValue, 
          
          Blank[]]] := \
($CellContext`surfaceSymbol[$CellContext`attributeSymbol] = \
$CellContext`attributeValue), $CellContext`planeShape[] := \
$CellContext`plane[{}, $CellContext`domainAll, $CellContext`domainAll], \
$CellContext`planeShape[
         Pattern[$CellContext`dom, {
           Blank[], 
           
           Blank[]}]] := $CellContext`plane[{}, $CellContext`domainAll, \
$CellContext`dom], $CellContext`marginalPositionOfSurface[
         PatternTest[
          Pattern[$CellContext`s, 
           Blank[]], $CellContext`surfaceQ]] := 
       With[{$CellContext`p = $CellContext`surfacePosition[$CellContext`s]}, 
         Map[{0, $CellContext`p} + #& , 
          $CellContext`marginalPosition[
           $CellContext`s[$CellContext`shape]]]], $CellContext`surfacePosition[
         PatternTest[
          Pattern[$CellContext`surf, 
           Blank[]], $CellContext`surfaceQ]] := Part[
          $CellContext`surf[$CellContext`origin], -1] + \
$CellContext`individualOffset[
          $CellContext`surf[$CellContext`shape]], \
$CellContext`individualOffset[
         $CellContext`parametric[{
           Pattern[$CellContext`f, 
            Blank[]], 
           Blank[]}, 
          BlankNullSequence[]]] := $CellContext`f[
        0.], $CellContext`individualOffset[
         Blank[]] := 0., $CellContext`marginalPosition[
         PatternTest[
          Pattern[$CellContext`s, 
           Blank[]], $CellContext`shapeQ]] := Map[
         $CellContext`shapeFunctionToDraw[$CellContext`s], 
         $CellContext`domain[$CellContext`s]], $CellContext`marginalPosition[
         PatternTest[
          Pattern[$CellContext`s, 
           Blank[]], $CellContext`surfaceQ]] := Map[# + Reverse[
           $CellContext`s[$CellContext`origin]]& , 
         $CellContext`marginalPosition[
          $CellContext`s[$CellContext`shape]]], \
$CellContext`shapeQ[$CellContext`parametric] := 
       True, $CellContext`shapeQ[$CellContext`perfectThinLens] := 
       True, $CellContext`shapeQ[$CellContext`plane] := 
       True, $CellContext`shapeQ[$CellContext`quadratic] := 
       True, $CellContext`shapeQ[$CellContext`spherical] := 
       True, $CellContext`shapeQ[
         $CellContext`spherical[
          BlankNullSequence[]]] := True, $CellContext`shapeQ[
         $CellContext`quadratic[
          BlankNullSequence[]]] := True, $CellContext`shapeQ[
         $CellContext`plane[
          BlankNullSequence[]]] := True, $CellContext`shapeQ[
         $CellContext`perfectThinLens[
          BlankNullSequence[]]] := True, $CellContext`shapeQ[
         $CellContext`parametric[
          BlankNullSequence[]]] := True, $CellContext`shapeQ[
         Blank[]] := False, $CellContext`shapeFunctionToDraw[
         Pattern[$CellContext`s, 
          Blank[$CellContext`plane]]][
         Pattern[$CellContext`h, 
          Blank[]]] := {0, $CellContext`h}, $CellContext`shapeFunctionToDraw[
         Pattern[$CellContext`s, 
          Blank[$CellContext`perfectThinLens]]][
         Pattern[$CellContext`h, 
          Blank[]]] := {0, $CellContext`h}, $CellContext`shapeFunctionToDraw[
         Pattern[$CellContext`s, 
          Blank[$CellContext`spherical]]][
         Pattern[$CellContext`h, 
          
          Blank[]]] := {($CellContext`curvature[$CellContext`s] \
$CellContext`h^2)/(1 + 
         Sqrt[1 - $CellContext`curvature[$CellContext`s]^2 \
$CellContext`h^2]), $CellContext`h}, $CellContext`shapeFunctionToDraw[
         Pattern[$CellContext`s, 
          Blank[$CellContext`quadratic]]][
         Pattern[$CellContext`h, 
          
          Blank[]]] := {($CellContext`curvature[$CellContext`s] \
$CellContext`h^2)/(1 + 
         Sqrt[1 - ($CellContext`curvature[$CellContext`s]^2 $CellContext`h^2) \
(1 + $CellContext`conicConstant[$CellContext`s])]), $CellContext`h}, \
$CellContext`shapeFunctionToDraw[
         Pattern[$CellContext`s, 
          Blank[$CellContext`parametric]]][
         Pattern[$CellContext`h, 
          Blank[]]] := {
         $CellContext`shapeFunction[$CellContext`s][$CellContext`h], \
$CellContext`h}, $CellContext`curvature[
         $CellContext`spherical[{
           Pattern[$CellContext`curv, 
            Blank[]]}, 
          BlankSequence[]]] := $CellContext`curv, $CellContext`curvature[
         $CellContext`quadratic[{
           Pattern[$CellContext`curv, 
            Blank[]], 
           Blank[]}, 
          BlankSequence[]]] := $CellContext`curv, $CellContext`conicConstant[
         $CellContext`quadratic[{
           Blank[], 
           Pattern[$CellContext`conic, 
            Blank[]]}, 
          
          BlankNullSequence[]]] := $CellContext`conic, \
$CellContext`shapeFunction[
         $CellContext`parametric[{
           Pattern[$CellContext`f, 
            Blank[]], 
           Blank[]}, 
          BlankNullSequence[]]] := $CellContext`f, $CellContext`domain[
         Pattern[$CellContext`s, 
          Blank[]][{
           BlankNullSequence[]}, 
          Blank[], 
          Pattern[$CellContext`explicitDomain, 
           Blank[]]]] := Condition[$CellContext`explicitDomain, 
         $CellContext`shapeQ[$CellContext`s]], $CellContext`sphericalShape[
         PatternTest[
          Pattern[$CellContext`curv, 
           Blank[]], N[#] === 
          0.& ]] := $CellContext`planeShape[], $CellContext`sphericalShape[
         PatternTest[
          Pattern[$CellContext`curv, 
           Blank[]], N[#] === 0.& ], 
         Pattern[$CellContext`dom, 
          
          Blank[]]] := $CellContext`planeShape[$CellContext`dom], \
$CellContext`sphericalShape[
         PatternTest[
          Pattern[$CellContext`curv, 
           Blank[]], N[#] =!= 0.& ]] := 
       With[{$CellContext`impdom = \
$CellContext`quadraticImpicitDomain[$CellContext`curv, 0.]}, 
         $CellContext`spherical[{$CellContext`curv}, $CellContext`impdom, \
$CellContext`impdom]], $CellContext`sphericalShape[
         PatternTest[
          Pattern[$CellContext`curv, 
           Blank[]], N[#] =!= 0.& ], 
         Pattern[$CellContext`dom, {
           Blank[], 
           
           Blank[]}]] := $CellContext`spherical[{$CellContext`curv}, \
{(-1.)/$CellContext`curv, 
          1./$CellContext`curv}, $CellContext`dom], \
$CellContext`quadraticImpicitDomain[
         PatternTest[
          Pattern[$CellContext`curv, 
           Blank[]], N[#] =!= 0.& ], 
         PatternTest[
          Pattern[$CellContext`conic, 
           Blank[]], N[#] >= -1.& ]] := {(-1)/($CellContext`curv (
          1 + $CellContext`conic)), 
         1/($CellContext`curv (
          1 + $CellContext`conic))}, $CellContext`quadraticImpicitDomain[
         PatternTest[
          Pattern[$CellContext`curv, 
           Blank[]], N[#] =!= 0.& ], 
         PatternTest[
          Pattern[$CellContext`conic, 
           Blank[]], 
          N[#] < -1.& ]] := $CellContext`domainAll, $CellContext`createOptics[
        
         PatternTest[
          Pattern[$CellContext`opticsSymbol, 
           Blank[]], $CellContext`canBeObjectSymbol], 
         Pattern[$CellContext`seq, {
           BlankNullSequence[]}]] := 
       Module[{$CellContext`meds, $CellContext`surfs}, {$CellContext`meds, \
$CellContext`surfs} = Transpose[
            Partition[$CellContext`seq, 2]]; If[
           Not[
            Apply[And, 
             Join[
              Map[$CellContext`mediumQ, $CellContext`meds], 
              Map[$CellContext`surfaceQ, $CellContext`surfs]]]], 
           Return[$Failed]]; UpSet[
           $CellContext`opticsQ[$CellContext`opticsSymbol], 
           True]; $CellContext`opticsSymbol[$CellContext`mediums] = \
$CellContext`meds; $CellContext`opticsSymbol[$CellContext`surfaces] = \
$CellContext`surfs; $CellContext`opticsSymbol], $CellContext`surfs = \
{$CellContext`pup$22072622}, 
       Attributes[$CellContext`pup$22072622] = {Temporary}, 
       UpSet[
        $CellContext`surfaceQ[$CellContext`pup$22072622], 
        True], $CellContext`pup$22072622[$CellContext`origin] = {
        0, 0.6789312459185386}, \
$CellContext`pup$22072622[$CellContext`pupilSurface] = 
       False, $CellContext`pup$22072622[$CellContext`shape] = \
$CellContext`plane[{}, $CellContext`domainAll, {-0.7556119515754723, 
         0.7556119515754723}], \
$CellContext`pup$22072622[$CellContext`surfaceComment] = 
       "surfaceComment", $CellContext`traceRay[
         PatternTest[
          Pattern[$CellContext`optics, 
           Blank[]], $CellContext`opticsQ]][
         Pattern[$CellContext`initialRay, 
          Blank[$CellContext`ray]], 
         PatternTest[
          Pattern[$CellContext`lambda, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`indices, $CellContext`indpair, $CellContext`args, \
$CellContext`ir, $CellContext`rays}, $CellContext`indices = 
          Map[$CellContext`refractiveIndexValue[#, $CellContext`lambda]& , 
            $CellContext`optics[$CellContext`mediums]]; $CellContext`indpair = 
          Transpose[{$CellContext`indices, 
             RotateLeft[$CellContext`indices]}]; $CellContext`args = 
          Transpose[{
             $CellContext`optics[$CellContext`surfaces], 
             Take[$CellContext`indpair, 
              Length[
               $CellContext`optics[$CellContext`surfaces]]]}]; \
$CellContext`ir = \
$CellContext`setRefractiveIndexForRay[$CellContext`initialRay, 
            Part[$CellContext`indices, 1]]; $CellContext`rays = 
          FoldList[$CellContext`traceOneRay, $CellContext`ir, \
$CellContext`args]; $CellContext`raySequence[$CellContext`lambda, \
$CellContext`rays]], $CellContext`traceRay[
         PatternTest[
          Pattern[$CellContext`surface, 
           Blank[]], $CellContext`surfaceQ]][
         Pattern[$CellContext`r, 
          Blank[$CellContext`ray]], {
          Pattern[$CellContext`inputIndex, 
           Blank[]], 
          Pattern[$CellContext`outputIndex, 
           
           Blank[]]}] := $CellContext`traceOneRay[$CellContext`r, \
{$CellContext`surface, {$CellContext`inputIndex, $CellContext`outputIndex}}], \
$CellContext`setRefractiveIndexForRay[
         $CellContext`ray[
          Pattern[$CellContext`p, {
            Blank[], 
            Blank[]}], 
          Pattern[$CellContext`v, {
            Blank[], 
            Blank[]}], 
          Pattern[$CellContext`opt, 
           BlankNullSequence[]]], 
         Pattern[$CellContext`index, 
          Blank[]]] := With[{$CellContext`len = Sqrt[
            Dot[$CellContext`v, $CellContext`v]]}, 
         $CellContext`ray[$CellContext`p, 
          
          Map[($CellContext`index/$CellContext`len) #& , $CellContext`v], \
$CellContext`opt]], $CellContext`traceOneRay[
         Pattern[$CellContext`r, 
          Blank[$CellContext`ray]], {
          Pattern[$CellContext`surface, 
           Blank[]], {
           Pattern[$CellContext`inputIndex, 
            Blank[]], 
           Pattern[$CellContext`outputIndex, 
            Blank[]]}}] := 
       Module[{$CellContext`offray, $CellContext`refray}, $CellContext`offray = \
$CellContext`offsetRay[$CellContext`r, 
            $CellContext`surface[$CellContext`origin]]; $CellContext`refray = \
$CellContext`reflectedRay[$CellContext`surface][$CellContext`offray, \
{$CellContext`inputIndex, $CellContext`outputIndex}]; \
$CellContext`offsetBackRay[$CellContext`refray, 
           $CellContext`surface[$CellContext`origin]]], \
$CellContext`traceOneRay[
         $CellContext`stoppedRay[
          BlankSequence[]], {
          Pattern[$CellContext`surface, 
           Blank[]], {
           Pattern[$CellContext`inputIndex, 
            Blank[]], 
           Pattern[$CellContext`outputIndex, 
            
            Blank[]]}}] := $CellContext`untraceableRay, \
$CellContext`traceOneRay[$CellContext`untraceableRay, {
          Pattern[$CellContext`surface, 
           Blank[]], {
           Pattern[$CellContext`inputIndex, 
            Blank[]], 
           Pattern[$CellContext`outputIndex, 
            Blank[]]}}] := $CellContext`untraceableRay, $CellContext`offsetRay[
         $CellContext`ray[{
           Pattern[$CellContext`y, 
            Blank[]], 
           Pattern[$CellContext`z, 
            Blank[]]}, 
          Pattern[$CellContext`dir, 
           Blank[]], 
          Pattern[$CellContext`opt, 
           BlankNullSequence[]]], {
          Pattern[$CellContext`yoff, 
           Blank[]], 
          Pattern[$CellContext`zoff, 
           
           Blank[]]}] := $CellContext`ray[{$CellContext`y - \
$CellContext`yoff, $CellContext`z - $CellContext`zoff}, $CellContext`dir, \
$CellContext`opt], $CellContext`reflectedRay[
         PatternTest[
          Pattern[$CellContext`surface, 
           Blank[]], $CellContext`surfaceQ]][
         Pattern[$CellContext`r, 
          $CellContext`ray[
           Blank[], 
           Blank[], 
           Pattern[$CellContext`opt, 
            BlankNullSequence[]]]], {
          Pattern[$CellContext`inputIndex, 
           Blank[]], 
          Pattern[$CellContext`outputIndex, 
           Blank[]]}] := 
       Module[{$CellContext`pos, $CellContext`rv}, $CellContext`pos = \
$CellContext`intersection[
            $CellContext`surface[$CellContext`shape], $CellContext`r]; 
         If[$CellContext`pos === $CellContext`noIntersection, 
           Return[
            $CellContext`stoppedRay[$CellContext`noIntersection]]]; If[
           $CellContext`domainDefinedMarginalRayQ[$CellContext`r], 
           $CellContext`setDomain[$CellContext`surface, $CellContext`pos]]; \
$CellContext`rv = $CellContext`reflectedVector[
            $CellContext`surface[$CellContext`shape], \
{$CellContext`inputIndex, $CellContext`outputIndex}, 
            Part[$CellContext`pos, 1], 
            $CellContext`direction[$CellContext`r]]; If[
           
           Or[$CellContext`rv === $CellContext`noNormalVector, \
$CellContext`rv === $CellContext`totalReflection], 
           Return[
            $CellContext`stoppedRay[$CellContext`pos, $CellContext`rv]]]; \
$CellContext`ray[$CellContext`pos, $CellContext`rv, $CellContext`opt]], \
$CellContext`intersection[
         $CellContext`plane[
          BlankSequence[]], 
         $CellContext`ray[{
           Pattern[$CellContext`yg, 
            Blank[]], 
           Pattern[$CellContext`zg, 
            Blank[]]}, {
           Pattern[$CellContext`yd, 
            Blank[]], 
           Pattern[$CellContext`zd, 
            Blank[]]}, 
          Pattern[$CellContext`opt, 
           BlankNullSequence[]]]] := 
       Module[{$CellContext`t}, If[N[$CellContext`zd] === 0., 
           
           Return[$CellContext`noIntersection]]; {$CellContext`yg - \
$CellContext`yd ($CellContext`zg/$CellContext`zd), 
           0.}], $CellContext`intersection[
         $CellContext`perfectThinLens[
          BlankSequence[]], 
         $CellContext`ray[{
           Pattern[$CellContext`yg, 
            Blank[]], 
           Pattern[$CellContext`zg, 
            Blank[]]}, {
           Pattern[$CellContext`yd, 
            Blank[]], 
           Pattern[$CellContext`zd, 
            Blank[]]}, 
          Pattern[$CellContext`opt, 
           
           BlankNullSequence[]]]] := {$CellContext`yg - $CellContext`zg \
$CellContext`yd, 0.}, $CellContext`intersection[
         Pattern[$CellContext`s, 
          Blank[$CellContext`spherical]], 
         $CellContext`ray[{
           Pattern[$CellContext`yg, 
            Blank[]], 
           Pattern[$CellContext`zg, 
            Blank[]]}, {
           Pattern[$CellContext`yd, 
            Blank[]], 
           Pattern[$CellContext`zd, 
            Blank[]]}, 
          Pattern[$CellContext`opt, 
           BlankNullSequence[]]]] := 
       Module[{$CellContext`crv, $CellContext`isq, $CellContext`a, \
$CellContext`pos}, $CellContext`crv = $CellContext`curvature[$CellContext`s]; \
$CellContext`isq = $CellContext`zd^2 - $CellContext`crv^2 ($CellContext`yg \
$CellContext`zd - $CellContext`yd $CellContext`zg)^2 + ((
              2 $CellContext`crv) $CellContext`yd) (-($CellContext`yg \
$CellContext`zd) + $CellContext`yd $CellContext`zg); If[$CellContext`isq < 0., 
           
           Return[$CellContext`noIntersection]]; $CellContext`a = \
($CellContext`zd - $CellContext`crv ($CellContext`yd $CellContext`yg + \
$CellContext`zd $CellContext`zg) - 
            Sqrt[$CellContext`isq])/($CellContext`crv ($CellContext`yd^2 + \
$CellContext`zd^2)); $CellContext`pos = {$CellContext`yg, $CellContext`zg} + \
$CellContext`a {$CellContext`yd, $CellContext`zd}; If[
           $CellContext`insideImplicitDomain[$CellContext`s][
            
            Part[$CellContext`pos, 
             1]], $CellContext`pos, $CellContext`noIntersection]], \
$CellContext`intersection[
         Pattern[$CellContext`q, 
          Blank[$CellContext`quadratic]], 
         $CellContext`ray[{
           Pattern[$CellContext`yg, 
            Blank[]], 
           Pattern[$CellContext`zg, 
            Blank[]]}, {
           Pattern[$CellContext`yd, 
            Blank[]], 
           Pattern[$CellContext`zd, 
            Blank[]]}, 
          Pattern[$CellContext`opt, 
           BlankNullSequence[]]]] := 
       Module[{$CellContext`crv, $CellContext`con, $CellContext`isq, \
$CellContext`a, $CellContext`pos}, $CellContext`crv = \
$CellContext`curvature[$CellContext`q]; $CellContext`con = \
$CellContext`conicConstant[$CellContext`q]; $CellContext`isq = \
$CellContext`zd^2 - ($CellContext`crv^2 (
             1 + $CellContext`con)) ($CellContext`yg $CellContext`zd - \
$CellContext`yd $CellContext`zg)^2 + ((
              2 $CellContext`crv) $CellContext`yd) (-($CellContext`yg \
$CellContext`zd) + $CellContext`yd $CellContext`zg); If[$CellContext`isq < 0., 
           
           Return[$CellContext`noIntersection]]; $CellContext`a = \
($CellContext`zd - $CellContext`crv ($CellContext`yd $CellContext`yg + ((
                1 + $CellContext`con) $CellContext`zd) $CellContext`zg) - 
            Sqrt[$CellContext`isq])/($CellContext`crv ($CellContext`yd^2 + (
              1 + $CellContext`con) $CellContext`zd^2)); $CellContext`pos = \
{$CellContext`yg, $CellContext`zg} + $CellContext`a {$CellContext`yd, \
$CellContext`zd}; If[
           $CellContext`insideImplicitDomain[$CellContext`q][
            
            Part[$CellContext`pos, 
             1]], $CellContext`pos, $CellContext`noIntersection]], \
$CellContext`intersection[
         Pattern[$CellContext`p, 
          Blank[$CellContext`parametric]], 
         $CellContext`ray[{
           Pattern[$CellContext`yg, 
            Blank[]], 
           Pattern[$CellContext`zg, 
            Blank[]]}, {
           Pattern[$CellContext`yd, 
            Blank[]], 
           Pattern[$CellContext`zd, 
            Blank[]]}, 
          Pattern[$CellContext`opt, 
           BlankNullSequence[]]]] := 
       Module[{$CellContext`f, $CellContext`y, $CellContext`ini, \
$CellContext`hsol}, $CellContext`ini = \
$CellContext`heightInDomain[$CellContext`yg - ($CellContext`yd \
$CellContext`zg)/$CellContext`zd, 
            $CellContext`implicitDomain[$CellContext`p]]; $CellContext`f = \
$CellContext`shapeFunction[$CellContext`p]; $CellContext`hsol = 
          If[N[$CellContext`yd] === 0., $CellContext`yg, 
            ReplaceAll[$CellContext`y, 
             
             FindRoot[$CellContext`f[$CellContext`y] == ($CellContext`y \
$CellContext`zd - $CellContext`yg $CellContext`zd + $CellContext`yd \
$CellContext`zg)/$CellContext`yd, {$CellContext`y, $CellContext`ini}]]]; If[
           $CellContext`insideImplicitDomain[$CellContext`p][$CellContext`\
hsol], {$CellContext`hsol, 
            $CellContext`f[$CellContext`hsol]}, \
$CellContext`noIntersection]], $CellContext`insideImplicitDomain[
         PatternTest[
          Pattern[$CellContext`s, 
           Blank[]], $CellContext`shapeQ]] := Between[
         $CellContext`implicitDomain[$CellContext`s]], \
$CellContext`implicitDomain[
         Pattern[$CellContext`s, 
          Blank[]][{
           BlankNullSequence[]}, 
          Pattern[$CellContext`impdom, 
           Blank[]], 
          Blank[]]] := Condition[$CellContext`impdom, 
         $CellContext`shapeQ[$CellContext`s]], $CellContext`heightInDomain[
         Pattern[$CellContext`height, 
          Blank[]], 
         Pattern[$CellContext`dom, {
           Blank[], 
           Blank[]}]] := Condition[$CellContext`height, 
         Between[$CellContext`dom][$CellContext`height]], \
$CellContext`heightInDomain[
         Pattern[$CellContext`height, 
          Blank[]], {
          Pattern[$CellContext`hmin, 
           Blank[]], 
          Pattern[$CellContext`hmax, 
           Blank[]]}] := 
       Condition[$CellContext`hmin, $CellContext`height < $CellContext`hmin], \
$CellContext`heightInDomain[
         Pattern[$CellContext`height, 
          Blank[]], {
          Pattern[$CellContext`hmin, 
           Blank[]], 
          Pattern[$CellContext`hmax, 
           Blank[]]}] := 
       Condition[$CellContext`hmax, $CellContext`hmax < $CellContext`height], \
$CellContext`domainDefinedMarginalRayQ[
         $CellContext`ray[{
           Blank[], 
           Blank[]}, {
           Blank[], 
           Blank[]}, 
          Pattern[$CellContext`opt, 
           BlankNullSequence[]]]] := 
       MemberQ[{$CellContext`opt}, $CellContext`domainDefinedMarginalRay], \
$CellContext`setDomain[
         PatternTest[
          Pattern[$CellContext`surface, 
           Blank[]], $CellContext`surfaceQ], 
         Pattern[$CellContext`pos, 
          Blank[]]] := 
       Module[{$CellContext`h, $CellContext`dom}, $CellContext`h = 
          Part[$CellContext`pos, 
            1]; $CellContext`surface[$CellContext`shape] = \
$CellContext`copyShapeReplacingDomain[
            $CellContext`surface[$CellContext`shape], {-$CellContext`h, \
$CellContext`h}]], $CellContext`copyShapeReplacingDomain[
         Pattern[$CellContext`s, 
          Blank[]][
          Pattern[$CellContext`p, {
            BlankNullSequence[]}], 
          Pattern[$CellContext`impdom, 
           Blank[]], 
          Pattern[$CellContext`dom, 
           Blank[]]], 
         Pattern[$CellContext`newDom, 
          
          Blank[]]] := $CellContext`s[$CellContext`p, $CellContext`impdom, \
$CellContext`newDom], $CellContext`reflectedVector[
         $CellContext`plane[
          BlankSequence[]], {
          Pattern[$CellContext`iind, 
           Blank[]], 
          Pattern[$CellContext`oind, 
           Blank[]]}, 
         Pattern[$CellContext`h, 
          Blank[]], 
         Pattern[$CellContext`r, {
           Pattern[$CellContext`ry, 
            Blank[]], 
           Pattern[$CellContext`rz, 
            Blank[]]}]] := 
       With[{$CellContext`sq = $CellContext`oind^2 - $CellContext`iind^2 + \
$CellContext`rz^2}, 
         If[$CellContext`sq < 0., $Failed, {$CellContext`ry, 
           Sqrt[$CellContext`sq]}]], $CellContext`reflectedVector[
         $CellContext`perfectThinLens[{
           Pattern[$CellContext`f, 
            Blank[]]}, 
          BlankSequence[]], {
          Pattern[$CellContext`iind, 
           Blank[]], 
          Pattern[$CellContext`oind, 
           Blank[]]}, 
         Pattern[$CellContext`h, 
          Blank[]], 
         Pattern[$CellContext`r, {
           Pattern[$CellContext`ry, 
            Blank[]], 
           Pattern[$CellContext`rz, 
            Blank[]]}]] := 
       With[{$CellContext`sq = 
          Sqrt[$CellContext`f^2 + ($CellContext`h - $CellContext`f \
$CellContext`ry)^2] ($CellContext`oind/$CellContext`iind)}, {($CellContext`f \
$CellContext`ry - $CellContext`h)/$CellContext`sq, \
$CellContext`f/$CellContext`sq}], $CellContext`reflectedVector[
         PatternTest[
          Pattern[$CellContext`s, 
           Blank[]], 
          MemberQ[{$CellContext`spherical, $CellContext`quadratic, \
$CellContext`parametric}, 
           Head[#]]& ], {
          Pattern[$CellContext`iind, 
           Blank[]], 
          Pattern[$CellContext`oind, 
           Blank[]]}, 
         Pattern[$CellContext`h, 
          Blank[]], 
         Pattern[$CellContext`r, {
           Blank[], 
           Blank[]}]] := 
       Module[{$CellContext`v, $CellContext`sq, $CellContext`com, \
$CellContext`iprod}, $CellContext`v = \
$CellContext`normalVector[$CellContext`s, $CellContext`h]; 
         If[$CellContext`v === $CellContext`noNormalVector, 
           Return[$CellContext`noNormalVector]]; $CellContext`iprod = 
          Dot[$CellContext`r, $CellContext`v]; $CellContext`sq = \
$CellContext`oind^2 - $CellContext`iind^2 + $CellContext`iprod^2; 
         If[$CellContext`sq < 0., 
           Return[$CellContext`totalReflection]]; $CellContext`com = 
          Sqrt[$CellContext`sq] - $CellContext`iprod; $CellContext`r + \
$CellContext`v $CellContext`com], $CellContext`normalVector[
         $CellContext`plane[
          BlankSequence[]], 
         Blank[]] := {0., 1.}, $CellContext`normalVector[
         Pattern[$CellContext`s, 
          Blank[$CellContext`spherical]], 
         Pattern[$CellContext`h, 
          Blank[]]] := Condition[
         Module[{$CellContext`crv, $CellContext`v, $CellContext`sq}, \
$CellContext`crv = $CellContext`curvature[$CellContext`s]; $CellContext`v = \
{(-$CellContext`h) (Sqrt[1. - ($CellContext`crv $CellContext`h)^2]/(
              1./$CellContext`crv - $CellContext`crv $CellContext`h^2)), 
             1.}; $CellContext`sq = 
           Dot[$CellContext`v, $CellContext`v]; $CellContext`v/
           Sqrt[$CellContext`sq]], 
         $CellContext`insideImplicitDomain[$CellContext`s][$CellContext`h]], \
$CellContext`normalVector[
         Pattern[$CellContext`s, 
          Blank[$CellContext`spherical]], 
         Pattern[$CellContext`h, 
          Blank[]]] := Condition[$CellContext`noNormalVector, 
         Not[
          $CellContext`insideImplicitDomain[$CellContext`s][$CellContext`h]]],\
 $CellContext`normalVector[
         Pattern[$CellContext`q, 
          Blank[$CellContext`quadratic]], 
         Pattern[$CellContext`h, 
          Blank[]]] := Condition[
         Module[{$CellContext`crv, $CellContext`con, $CellContext`v, \
$CellContext`sq}, $CellContext`crv = $CellContext`curvature[$CellContext`q]; \
$CellContext`con = $CellContext`conicConstant[$CellContext`q]; $CellContext`v = \
{(-$CellContext`h) (
              Sqrt[1. - (
                 1. + $CellContext`con) ($CellContext`crv $CellContext`h)^2]/(
              1./$CellContext`crv - ((
                1. + $CellContext`con) $CellContext`crv) $CellContext`h^2)), 
             1.}; $CellContext`sq = 
           Dot[$CellContext`v, $CellContext`v]; $CellContext`v/
           Sqrt[$CellContext`sq]], 
         $CellContext`insideImplicitDomain[$CellContext`q][$CellContext`h]], \
$CellContext`normalVector[
         Pattern[$CellContext`q, 
          Blank[$CellContext`quadratic]], 
         Pattern[$CellContext`h, 
          Blank[]]] := Condition[$CellContext`noNormalVector, 
         Not[
          $CellContext`insideImplicitDomain[$CellContext`q][$CellContext`h]]],\
 $CellContext`normalVector[
         Pattern[$CellContext`p, 
          Blank[$CellContext`parametric]], 
         Pattern[$CellContext`h, 
          Blank[]]] := Condition[
         With[{$CellContext`v = \
{-$CellContext`shapeDerivativeFunction[$CellContext`p][$CellContext`h], 
             1}}, $CellContext`v/Sqrt[
           Dot[$CellContext`v, $CellContext`v]]], 
         $CellContext`insideImplicitDomain[$CellContext`p][$CellContext`h]], \
$CellContext`normalVector[
         Pattern[$CellContext`p, 
          Blank[$CellContext`parametric]], 
         Pattern[$CellContext`h, 
          Blank[]]] := Condition[$CellContext`noNormalVector, 
         Not[
          $CellContext`insideImplicitDomain[$CellContext`p][$CellContext`h]]],\
 $CellContext`shapeDerivativeFunction[
         $CellContext`parametric[{
           Blank[], 
           Pattern[$CellContext`df, 
            Blank[]]}, 
          BlankSequence[]]] := $CellContext`df, $CellContext`direction[
         $CellContext`ray[
          Pattern[$CellContext`org, 
           Blank[]], 
          Pattern[$CellContext`dir, 
           Blank[]], 
          
          BlankNullSequence[]]] := $CellContext`dir, \
$CellContext`offsetBackRay[
         $CellContext`ray[{
           Pattern[$CellContext`y, 
            Blank[]], 
           Pattern[$CellContext`z, 
            Blank[]]}, 
          Pattern[$CellContext`dir, 
           Blank[]], 
          Pattern[$CellContext`opt, 
           BlankNullSequence[]]], {
          Pattern[$CellContext`yoff, 
           Blank[]], 
          Pattern[$CellContext`zoff, 
           
           Blank[]]}] := $CellContext`ray[{$CellContext`y + \
$CellContext`yoff, $CellContext`z + $CellContext`zoff}, $CellContext`dir, \
$CellContext`opt], $CellContext`offsetBackRay[
         $CellContext`stoppedRay[$CellContext`noIntersection], {
          Pattern[$CellContext`yoff, 
           Blank[]], 
          Pattern[$CellContext`zoff, 
           
           Blank[]]}] := \
$CellContext`stoppedRay[$CellContext`noIntersection], \
$CellContext`offsetBackRay[
         $CellContext`stoppedRay[{
           Pattern[$CellContext`y, 
            Blank[]], 
           Pattern[$CellContext`z, 
            Blank[]]}, 
          Pattern[$CellContext`a, 
           Blank[]]], {
          Pattern[$CellContext`yoff, 
           Blank[]], 
          Pattern[$CellContext`zoff, 
           
           Blank[]]}] := $CellContext`stoppedRay[{$CellContext`y + \
$CellContext`yoff, $CellContext`z + $CellContext`zoff}, $CellContext`a], \
$CellContext`markRayAsDomainDefinedMarginal[
         Pattern[$CellContext`r, 
          
          Blank[$CellContext`ray]]] := \
$CellContext`appendRayOption[$CellContext`r, \
$CellContext`domainDefinedMarginalRay], $CellContext`appendRayOption[
         $CellContext`ray[
          Pattern[$CellContext`p, 
           Blank[]], 
          Pattern[$CellContext`d, 
           Blank[]], 
          Pattern[$CellContext`o, 
           BlankNullSequence[]]], 
         Pattern[$CellContext`opt, 
          
          BlankNullSequence[]]] := $CellContext`ray[$CellContext`p, \
$CellContext`d, $CellContext`o, $CellContext`opt], $CellContext`raySet[{
          Pattern[$CellContext`y0, 
           Blank[]], 
          Pattern[$CellContext`z0, 
           Blank[]]}, {
          Pattern[$CellContext`yd, 
           Blank[]], 
          Pattern[$CellContext`zd, 
           Blank[]]}, 
         Pattern[$CellContext`opt, 
          
          BlankNullSequence[]]] := $CellContext`ray[{$CellContext`y0, \
$CellContext`z0}, {$CellContext`yd, $CellContext`zd}, $CellContext`opt], \
$CellContext`raySet[{
          Pattern[$CellContext`y0, 
           Blank[]], 
          Pattern[$CellContext`z0, 
           Blank[]]}, 
         PatternTest[
          Pattern[$CellContext`angleToAxis, 
           Blank[]], NumericQ], 
         PatternTest[
          Pattern[$CellContext`refractiveIndex, 
           Blank[]], NumericQ], 
         Pattern[$CellContext`opt, 
          
          BlankNullSequence[]]] := $CellContext`ray[{$CellContext`y0, \
$CellContext`z0}, {$CellContext`refractiveIndex 
          Sin[$CellContext`angleToAxis], $CellContext`refractiveIndex 
          Cos[$CellContext`angleToAxis]}, $CellContext`opt], \
$CellContext`setPupil[
         PatternTest[
          Pattern[$CellContext`opticsSymbol, 
           Blank[]], $CellContext`opticsQ], 
         PatternTest[
          Pattern[$CellContext`surfaceSymbol, 
           Blank[]], $CellContext`surfaceQ]] := 
       Module[{$CellContext`poss, $CellContext`surf}, $CellContext`poss = \
$CellContext`positionOfAttributedSurface[$CellContext`opticsSymbol, \
$CellContext`pupilSurface, True]; 
         If[$CellContext`poss =!= {}, $CellContext`surfs = Extract[
              $CellContext`opticsSymbol[$CellContext`surfaces], \
$CellContext`poss]; ReleaseHold[
             Map[
             Hold[#[$CellContext`pupilSurface] = 
               False]& , $CellContext`surfs]]]; If[
           MemberQ[
            $CellContext`opticsSymbol[$CellContext`surfaces], \
$CellContext`surfaceSymbol], \
$CellContext`surfaceSymbol[$CellContext`pupilSurface] = True, 
           Message[
            
            MessageName[$CellContext`setPupil, 
             "nosurface"], $CellContext`surfaceSymbol]]; \
$CellContext`opticsSymbol], 
       TagSet[$CellContext`setPupil, 
        MessageName[$CellContext`setPupil, "nosurface"], 
        "optics does not have a surface `1`"], \
$CellContext`positionOfAttributedSurface[
         PatternTest[
          Pattern[$CellContext`op, 
           Blank[]], $CellContext`opticsQ], 
         Pattern[$CellContext`attributeSymbol, 
          Blank[Symbol]], 
         Pattern[$CellContext`attributeValue, 
          Blank[]]] := Position[
         $CellContext`op[$CellContext`surfaces], 
         PatternTest[
          
          Blank[], #[$CellContext`attributeSymbol] === \
$CellContext`attributeValue& ]], $CellContext`setOpticsFor2DRayTraceFinite[
         Pattern[$CellContext`op, 
          Blank[Symbol]], 
         Pattern[$CellContext`solverResult, {
           BlankSequence[Rule]}], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[Rule]]] := 
       Module[{$CellContext`wl, $CellContext`s1, $CellContext`pup, \
$CellContext`s2, $CellContext`img, $CellContext`ref, $CellContext`cg1i, \
$CellContext`cg1o, $CellContext`cg2i, $CellContext`cg2o, $CellContext`bod, \
$CellContext`ncg1, $CellContext`ncg2, $CellContext`do, $CellContext`oplis, \
$CellContext`dec, $CellContext`mrg}, $CellContext`wl = ReplaceAll[
            
            ReplaceAll[$CellContext`tracingWavelength, {$CellContext`opt}], \
{$CellContext`tracingWavelength -> 
             ReplaceAll[$CellContext`designWavelength, \
$CellContext`solverResult]}]; $CellContext`dec = ReplaceAll[
            
            ReplaceAll[$CellContext`decenterBetweenAspherics, \
{$CellContext`opt}], 
            Options[$CellContext`setOpticsFor2DRayTrace]]; $CellContext`oplis = 
          If[
            
            ReplaceAll[$CellContext`objectSideCoverGlassExistence, \
$CellContext`solverResult], $CellContext`createSurface[$CellContext`cg1i, 
              $CellContext`planeShape[], {0, 
               
               ReplaceAll[(-$CellContext`mechanicalObjectDistance)/
                 2 - $CellContext`objectSideCoverGlassThickness/
                2, $CellContext`solverResult]}]; \
$CellContext`createSurface[$CellContext`cg1o, 
              $CellContext`planeShape[], {0, 
               
               ReplaceAll[(-$CellContext`mechanicalObjectDistance)/
                 2 + $CellContext`objectSideCoverGlassThickness/
                 2, $CellContext`solverResult]}]; $CellContext`ncg1 = 
             ReplaceAll[$CellContext`objectSideCoverGlassMediumSymbol, \
$CellContext`solverResult]; {$CellContext`atmosphere, $CellContext`cg1i, \
$CellContext`ncg1, $CellContext`cg1o, $CellContext`atmosphere}, \
{$CellContext`atmosphere}]; $CellContext`createSurface[$CellContext`s1, 
           $CellContext`parametricShape[
            
            ReplaceAll[$CellContext`frontSurfaceShapeFunction, \
$CellContext`solverResult]], {0, 
           0}]; $CellContext`attachAttributeToSurface[$CellContext`s1, \
$CellContext`solverAsphericalSurface, \
$CellContext`frontSolverAsphericalSurface]; \
$CellContext`createSurface[$CellContext`pup, 
           $CellContext`planeShape[], {0, 
            Part[
             $CellContext`marginalPositionOfSurface[$CellContext`s1], -1, 
             1]}]; $CellContext`createSurface[$CellContext`s2, 
           $CellContext`parametricShape[
            
            ReplaceAll[$CellContext`backSurfaceShapeFunction, \
$CellContext`solverResult]], {$CellContext`dec, 
            0}]; $CellContext`attachAttributeToSurface[$CellContext`s2, \
$CellContext`solverAsphericalSurface, \
$CellContext`backSolverAsphericalSurface]; \
$CellContext`createSurface[$CellContext`img, 
           $CellContext`planeShape[{-2, 2}], {0, 
            
            ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`mechanicalImageDistance, $CellContext`solverResult]}]; \
$CellContext`createSurface[$CellContext`ref, 
           $CellContext`sphericalShape[
            ReplaceAll[
            1/$CellContext`focalLength, $CellContext`solverResult]], {0, 
            
            ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`mechanicalImageDistance - $CellContext`focalLength, \
$CellContext`solverResult]}]; $CellContext`bod = 
          ReplaceAll[$CellContext`lensMediumSymbol, \
$CellContext`solverResult]; $CellContext`oplis = 
          Flatten[{$CellContext`oplis, $CellContext`s1, $CellContext`bod, \
$CellContext`pup, $CellContext`bod, $CellContext`s2, \
$CellContext`atmosphere}]; If[
           
           ReplaceAll[$CellContext`coverGlassExistence, \
$CellContext`solverResult], $CellContext`createSurface[$CellContext`cg2i, 
             $CellContext`planeShape[], {0, 
              
              ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`mechanicalImageDistance/2 - $CellContext`coverGlassThickness/
               2, $CellContext`solverResult]}]; \
$CellContext`createSurface[$CellContext`cg2o, 
             $CellContext`planeShape[], {0, 
              
              ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`mechanicalImageDistance/2 + $CellContext`coverGlassThickness/
                2, $CellContext`solverResult]}]; $CellContext`ncg2 = 
            ReplaceAll[$CellContext`coverGlassMediumSymbol, \
$CellContext`solverResult]; $CellContext`oplis = 
            Flatten[{$CellContext`oplis, $CellContext`cg2i, \
$CellContext`ncg2, $CellContext`cg2o, $CellContext`atmosphere}]; 
           Null]; $CellContext`createSurface[$CellContext`img, 
           $CellContext`planeShape[{-2, 2}], {0, 
            
            ReplaceAll[$CellContext`lensMediumThickness + \
$CellContext`mechanicalImageDistance, $CellContext`solverResult]}]; \
$CellContext`oplis = 
          Flatten[{$CellContext`oplis, $CellContext`img, \
$CellContext`atmosphere, $CellContext`ref, $CellContext`atmosphere}]; 
         Clear[$CellContext`op]; $CellContext`createOptics[$CellContext`op, \
$CellContext`oplis]; $CellContext`mrg = ArcSin[
            
            ReplaceAll[(-$CellContext`numericalAperture) \
$CellContext`lateralMagnification, $CellContext`solverResult]]; \
$CellContext`do = 
          ReplaceAll[$CellContext`mechanicalObjectDistance, \
$CellContext`solverResult]; $CellContext`traceRay[$CellContext`op][
           $CellContext`markRayAsDomainDefinedMarginal[
            $CellContext`raySet[{0, -$CellContext`do}, {
              Sin[$CellContext`mrg], 
              
              Cos[$CellContext`mrg]}]], $CellContext`wl]; \
$CellContext`setPupil[$CellContext`op, $CellContext`pup]; $CellContext`op], \
$CellContext`rs = {
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{-0.28421052631578947`, -0.3}, {0., 1.}], 
           $CellContext`ray[{-0.28421052631578947`, 0.07037282335229347}, {
            0.25499123172567634`, 1.4979240309277064`}], 
           $CellContext`ray[{-0.2822269667337137, 0.08202507329304691}, {
            0.25499123172567634`, 1.4979240309277064`}], 
           $CellContext`ray[{-0.12663237962702475`, 0.9960520754455089}, {
            0.28421447754219403`, 0.9587607265399523}], 
           $CellContext`ray[{4.901352823022398*^-6, 1.423246539883929}, {
            0.28421447754219403`, 0.9587607265399523}], 
           $CellContext`ray[{-0.28420997210707044`, 0.46448447776689955`}, {
            0.28421447754219403`, 0.9587607265399523}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{-0.25087719298245614`, -0.3}, {0., 1.}], 
           $CellContext`ray[{-0.25087719298245614`, 0.054427370384373994`}, {
            0.2238547747812468, 1.5028925345796762`}], 
           $CellContext`ray[{-0.24676653475044322`, 0.08202507329304691}, {
            0.2238547747812468, 1.5028925345796762`}], 
           $CellContext`ray[{-0.1104967794104964, 0.9968985585226403}, {
            0.2508746283117021, 0.9680195870277962}], 
           $CellContext`ray[{-3.259662753454795*^-6, 1.423246539883929}, {
            0.2508746283117021, 0.9680195870277962}], 
           $CellContext`ray[{-0.2508776828162943, 0.4552277444751173}, {
            0.2508746283117021, 0.9680195870277962}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{-0.21754385964912282`, -0.3}, {0., 1.}], 
           $CellContext`ray[{-0.21754385964912282`, 0.040665543617921004`}, {
            0.19320751991116245`, 1.5071389401569664`}], 
           $CellContext`ray[{-0.21224177903776859`, 0.08202507329304691}, {
            0.19320751991116245`, 1.5071389401569664`}], 
           $CellContext`ray[{-0.09486296149502521, 0.997652926440742}, {
            0.21753738801762518`, 0.9760519887866983}], 
           $CellContext`ray[{-8.871662678919257*^-6, 1.423246539883929}, {
            0.21753738801762518`, 0.9760519887866983}], 
           $CellContext`ray[{-0.2175458398427566, 0.44719643483444443`}, {
            0.21753738801762518`, 0.9760519887866983}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{-0.18421052631578946`, -0.3}, {0., 1.}], 
           $CellContext`ray[{-0.18421052631578946`, 0.029002619591928593`}, {
            0.16297833243670884`, 1.5107067861910979`}], 
           $CellContext`ray[{-0.17849034873738692`, 0.08202507329304691}, {
            0.16297833243670884`, 1.5107067861910979`}], 
           $CellContext`ray[{-0.07963964669241218, 0.9983089999131102}, {
            0.1842116166206939, 0.9828866060243115}], 
           $CellContext`ray[{1.718568911818208*^-6, 1.423246539883929}, {
            0.1842116166206939, 0.9828866060243115}], 
           $CellContext`ray[{-0.18420995636929874`, 0.4403596226984265}, {
            0.1842116166206939, 0.9828866060243115}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{-0.15087719298245614`, -0.3}, {0., 1.}], 
           $CellContext`ray[{-0.15087719298245614`, 0.019370806134301907`}, {
            0.13306392767947692`, 1.5136350028452026`}], 
           $CellContext`ray[{-0.14536924499079987`, 0.08202507329304691}, {
            0.13306392767947692`, 1.5136350028452026`}], 
           $CellContext`ray[{-0.0647700037215522, 0.9988613257277867}, {
            0.15087831162675105`, 0.9885523431162663}], 
           $CellContext`ray[{2.008642900910851*^-6, 1.423246539883929}, {
            0.15087831162675105`, 0.9885523431162663}], 
           $CellContext`ray[{-0.15087634870883188`, 0.4346938971782958}, {
            0.15087831162675105`, 0.9885523431162663}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{-0.11754385964912281`, -0.3}, {0., 1.}], 
           $CellContext`ray[{-0.11754385964912281`, 0.01171633762900542}, {
            0.10340209996962742`, 1.5159501760973404`}], 
           $CellContext`ray[{-0.11274814074720785`, 0.08202507329304691}, {
            0.10340209996962742`, 1.5159501760973404`}], 
           $CellContext`ray[{-0.05018087198937928, 0.9993068511217376}, {
            0.11754283209541477`, 0.993067813708102}], 
           $CellContext`ray[{-1.9507043483094066`*^-6, 1.423246539883929}, {
            0.11754283209541477`, 0.993067813708102}], 
           $CellContext`ray[{-0.11754475584799212`, 0.43017895387951416`}, {
            0.11754283209541477`, 0.993067813708102}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{-0.08421052631578946, -0.3}, {0., 1.}], 
           $CellContext`ray[{-0.08421052631578946, 0.0059979611970354145`}, {
            0.07394314107592495, 1.5176723436155486`}], 
           $CellContext`ray[{-0.08050637798696243, 0.08202507329304691}, {
            0.07394314107592495, 1.5176723436155486`}], 
           $CellContext`ray[{-0.035798709240624796`, 0.9996435490103786}, {
            0.08421073959755873, 0.9964479671997087}], 
           $CellContext`ray[{3.714253205139295*^-7, 1.423246539883929}, {
            0.08421073959755873, 0.9964479671997087}], 
           $CellContext`ray[{-0.08421037080617606, 0.4267985415173878}, {
            0.08421073959755873, 0.9964479671997087}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{-0.05087719298245613, -0.3}, {0., 1.}], 
           $CellContext`ray[{-0.05087719298245613, 0.002185637412775211}, {
            0.044619376433925516`, 1.5188173168404204`}], 
           $CellContext`ray[{-0.04853169309625198, 0.08202507329304691}, {
            0.044619376433925516`, 1.5188173168404204`}], 
           $CellContext`ray[{-0.021567517950128973`, 0.9998697277761907}, {
            0.05087790835379974, 0.9987048805535812}], 
           $CellContext`ray[{9.424278772929284*^-7, 1.423246539883929}, {
            0.05087790835379974, 0.9987048805535812}], 
           $CellContext`ray[{-0.05087696836543247, 0.42454161144413055`}, {
            0.05087790835379974, 0.9987048805535812}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{-0.017543859649122806`, -0.3}, {0., 1.}], 
           $CellContext`ray[{-0.017543859649122806`, 
            0.00025966700565760085`}, {0.015376514956031281`, 
            1.5193947786785018`}], 
           $CellContext`ray[{-0.016716380833013193`, 0.08202507329304691}, {
            0.015376514956031281`, 1.5193947786785018`}], 
           $CellContext`ray[{-0.007426486559084568, 0.9999845000320452}, {
            0.01754423861036413, 0.9998460880013399}], 
           $CellContext`ray[{4.6676001562960534`*^-7, 1.423246539883929}, {
            0.01754423861036413, 0.9998460880013399}], 
           $CellContext`ray[{-0.01754377199401546, 0.42340044369500957`}, {
            0.01754423861036413, 0.9998460880013399}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{0.01578947368421052, -0.3}, {0., 1.}], 
           $CellContext`ray[{0.01578947368421052, 
            0.0002103272589564013}, {-0.013838476181593349`, 
            1.5194095653459134`}], 
           $CellContext`ray[{0.015044321461848333`, 
            0.08202507329304691}, {-0.013838476181593349`, 
            1.5194095653459134`}], 
           $CellContext`ray[{0.006683705141303037, 
            0.9999874445055739}, {-0.01578978269625409, 0.999875333610348}], 
           $CellContext`ray[{-2.9726938323860336`*^-7, 
            1.423246539883929}, {-0.01578978269625409, 0.999875333610348}], 
           $CellContext`ray[{0.015789485500984544`, 
            0.42337120158039104`}, {-0.01578978269625409, 
            0.999875333610348}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{0.049122807017543846`, -0.3}, {0., 1.}], 
           $CellContext`ray[{0.049122807017543846`, 
            0.0020373678770397815`}, {-0.043078690356117486`, 
            1.5188617965848268`}], 
           $CellContext`ray[{0.046854157162988054`, 
            0.08202507329304691}, {-0.043078690356117486`, 
            1.5188617965848268`}], 
           $CellContext`ray[{0.020821554425037407`, 
            0.9998785511374085}, {-0.049123520635281775`, 
            0.9987927110869376}], 
           $CellContext`ray[{-9.10437441128259*^-7, 
            1.423246539883929}, {-0.049123520635281775`, 0.9987927110869376}], 
           $CellContext`ray[{0.0491226123948154, 
            0.4244537841275064}, {-0.049123520635281775`, 
            0.9987927110869376}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{0.08245614035087717, -0.3}, {0., 1.}], 
           $CellContext`ray[{0.08245614035087717, 
            0.005750007145320743}, {-0.07239666458341444, 1.517746900390471}], 
           $CellContext`ray[{0.07881781278878232, 
            0.08202507329304691}, {-0.07239666458341444, 
            1.517746900390471}], 
           $CellContext`ray[{0.03504662882268009, 
            0.9996582152788754}, {-0.0824563005297628, 0.9965946811532488}], 
           $CellContext`ray[{-2.431454857940163*^-7, 
            1.423246539883929}, {-0.0824563005297628, 0.9965946811532488}], 
           $CellContext`ray[{0.0824560590374308, 
            0.4266518387501052}, {-0.0824563005297628, 0.9965946811532488}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{0.11578947368421055`, -0.3}, {0., 1.}], 
           $CellContext`ray[{0.11578947368421055`, 
            0.011367418984002748`}, {-0.10185116039624004`, 
            1.5160551678001777`}], 
           $CellContext`ray[{0.11104257249281468`, 
            0.08202507329304691}, {-0.10185116039624004`, 
            1.5160551678001777`}], 
           $CellContext`ray[{0.04941664633725128, 
            0.9993273745642561}, {-0.11579009720246133`, 
            0.993273705173878}], 
           $CellContext`ray[{-1.3953391449286756`*^-6, 
            1.423246539883929}, {-0.11579009720246133`, 0.993273705173878}], 
           $CellContext`ray[{0.11578872057100079`, 
            0.4299726742312931}, {-0.11579009720246133`, 
            0.993273705173878}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{0.14912280701754388`, -0.3}, {0., 1.}], 
           $CellContext`ray[{0.14912280701754388`, 
            0.018919046169131856`}, {-0.13149673431971046`, 
            1.5137719575784647`}], 
           $CellContext`ray[{0.14364097969134587`, 
            0.08202507329304691}, {-0.13149673431971046`, 
            1.5137719575784647`}], 
           $CellContext`ray[{0.06399595256655223, 
            0.9988874520115807}, {-0.14912371602998511`, 0.9888185462042104}], 
           $CellContext`ray[{-1.637646071653287*^-6, 
            1.423246539883929}, {-0.14912371602998511`, 
            0.9888185462042104}], 
           $CellContext`ray[{0.14912211480149917`, 
            0.43442775219979096`}, {-0.14912371602998511`, 
            0.9888185462042104}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{0.1824561403508772, -0.3}, {0., 1.}], 
           $CellContext`ray[{0.1824561403508772, 
            0.028445566130059864`}, {-0.16139549121274363`, 
            1.5108767077772705`}], 
           $CellContext`ray[{0.17673264826645108`, 
            0.08202507329304691}, {-0.16139549121274363`, 
            1.5108767077772705`}], 
           $CellContext`ray[{0.07884960916033863, 
            0.9983406578277887}, {-0.1824567120760393, 0.9832138873197436}], 
           $CellContext`ray[{-9.148015149840205*^-7, 
            1.423246539883929}, {-0.1824567120760393, 0.9832138873197436}], 
           $CellContext`ray[{0.18245582772860625`, 
            0.4400324884547047}, {-0.1824567120760393, 0.9832138873197436}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{0.21578947368421053`, -0.3}, {0., 1.}], 
           $CellContext`ray[{0.21578947368421053`, 
            0.04000007049531239}, {-0.1916058313020738, 1.5073434035078828`}], 
           $CellContext`ray[{0.21044746895072194`, 
            0.08202507329304691}, {-0.1916058313020738, 1.5073434035078828`}], 
           $CellContext`ray[{0.09405280681877076, 
            0.9976899305464099}, {-0.2157824588662831, 0.976441462887367}], 
           $CellContext`ray[{9.635732906618233*^-6, 
            1.423246539883929}, {-0.2157824588662831, 0.976441462887367}], 
           $CellContext`ray[{0.21579164592997285`, 
            0.4468071072784892}, {-0.2157824588662831, 
            0.976441462887367}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{0.24912280701754386`, -0.3}, {0., 1.}], 
           $CellContext`ray[{0.24912280701754386`, 
            0.053649455289601036`}, {-0.22222920543265445`, 
            1.5031337634889508`}], 
           $CellContext`ray[{0.24492764408811196`, 
            0.08202507329304691}, {-0.22222920543265445`, 
            1.5031337634889508`}], 
           $CellContext`ray[{0.10966293717565172`, 
            0.9969405884374853}, {-0.24911906891727667`, 0.9684728646182033}], 
           $CellContext`ray[{4.788167936461973*^-6, 
            1.423246539883929}, {-0.24911906891727667`, 
            0.9684728646182033}], 
           $CellContext`ray[{0.24912355992734586`, 
            0.4547748304937546}, {-0.24911906891727667`, 
            0.9684728646182033}]}], 
         $CellContext`raySequence[0.000532, {
           $CellContext`ray[{0.2824561403508772, -0.3}, {0., 1.}], 
           $CellContext`ray[{0.2824561403508772, 
            0.06947755171640288}, {-0.25333821217599034`, 1.498204485689173}], 
           $CellContext`ray[{0.28033442284580345`, 
            0.08202507329304691}, {-0.25333821217599034`, 1.498204485689173}], 
           $CellContext`ray[{0.12576954297331353`, 
            0.9960987709241982}, {-0.28245926603028015`, 
            0.959279293549921}], 
           $CellContext`ray[{-3.8851805992945465`*^-6, 
            1.423246539883929}, {-0.28245926603028015`, 0.959279293549921}], 
           $CellContext`ray[{0.28245569082000355`, 
            0.4639661936225273}, {-0.28245926603028015`, 
            0.959279293549921}]}]}, $CellContext`rayCongruenceGraphics[
         Pattern[$CellContext`rss, {
           BlankSequence[$CellContext`raySequence]}], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[Rule]]] := 
       Module[{$CellContext`rc, $CellContext`cnt}, $CellContext`rc = \
$CellContext`raySegmentCount[
             Part[$CellContext`rss, 1]] + If[
             ReplaceAll[
              ReplaceAll[$CellContext`removeLast, {$CellContext`opt}], 
              Options[$CellContext`rayCongruenceGraphics]], -1, 
             0]; $CellContext`cnt = ReplaceAll[
            ReplaceAll[$CellContext`rayCount, {$CellContext`opt}], 
            Options[$CellContext`rayCongruenceGraphics]]; 
         If[$CellContext`cnt > Length[$CellContext`rss], $CellContext`cnt = 
           Length[$CellContext`rss]]; Graphics[{Thin, 
            Map[$CellContext`rayLineToDraw[#, $CellContext`rc]& , 
             $CellContext`thinOutFromBothSide[$CellContext`rss, \
$CellContext`cnt]]}]], 
       Options[$CellContext`rayCongruenceGraphics] = {$CellContext`rayCount -> 
         12, $CellContext`removeLast -> False}, $CellContext`raySegmentCount[
         $CellContext`raySequence[
          Pattern[$CellContext`lambda, 
           Blank[]], 
          Pattern[$CellContext`rays, 
           Blank[List]]]] := 
       Length[$CellContext`rays], $CellContext`rayLineToDraw[
         Pattern[$CellContext`rs, 
          Blank[$CellContext`raySequence]]] := Line[
         $CellContext`reflectedPointsToDraw[$CellContext`rs]], \
$CellContext`rayLineToDraw[
         Pattern[$CellContext`rs, 
          Blank[$CellContext`raySequence]], {
          Pattern[$CellContext`from, 
           Blank[]], 
          Pattern[$CellContext`upto, 
           Blank[]]}] := Line[
         Take[
          $CellContext`reflectedPointsToDraw[$CellContext`rs], \
{$CellContext`from, $CellContext`upto}]], $CellContext`rayLineToDraw[
         Pattern[$CellContext`rs, 
          Blank[$CellContext`raySequence]], 
         Pattern[$CellContext`count, 
          Blank[]]] := Line[
         Take[
          $CellContext`reflectedPointsToDraw[$CellContext`rs], \
$CellContext`count]], $CellContext`reflectedPointsToDraw[
         Pattern[$CellContext`rs, 
          Blank[$CellContext`raySequence]]] := Map[Reverse, 
         Map[$CellContext`origin, 
          $CellContext`sequenceOfRays[$CellContext`rs]]], \
$CellContext`sequenceOfRays[
         $CellContext`raySequence[
          Pattern[$CellContext`lambda, 
           Blank[]], 
          Pattern[$CellContext`rays, 
           Blank[List]]]] := Cases[$CellContext`rays, 
         Except[$CellContext`untraceableRay]], \
$CellContext`thinOutFromBothSide[
         Pattern[$CellContext`lis, 
          Blank[List]], 
         Pattern[$CellContext`n, 
          Blank[]]] := 
       Module[{$CellContext`subs, $CellContext`nhalf}, $CellContext`nhalf = 
          Floor[$CellContext`n/2]; $CellContext`subs = 
          Partition[$CellContext`lis, 
            Floor[Length[$CellContext`lis]/2]]; Join[
           $CellContext`thinOut[
            Part[$CellContext`subs, 1], $CellContext`nhalf], 
           Reverse[
            $CellContext`thinOut[
             Reverse[
              
              Part[$CellContext`subs, 
               2]], $CellContext`nhalf]]]], $CellContext`thinOut[
         Pattern[$CellContext`lis, 
          Blank[List]], 
         Pattern[$CellContext`n, 
          Blank[]]] := Map[First, 
         Partition[$CellContext`lis, 
          Round[
          Length[$CellContext`lis]/$CellContext`n]]], \
$CellContext`opticsGraphics[
         PatternTest[
          Pattern[$CellContext`opti, 
           Blank[]], $CellContext`opticsQ], 
         Pattern[$CellContext`opt, 
          BlankNullSequence[Rule]]] := 
       Module[{$CellContext`sus, $CellContext`osurfs, $CellContext`omeds, \
$CellContext`cnt, $CellContext`surs, $CellContext`bulks, $CellContext`meds, \
$CellContext`mbet, $CellContext`mpir}, $CellContext`sus = ReplaceAll[
            ReplaceAll[$CellContext`hideUselessSurface, {$CellContext`opt}], 
            
            Options[$CellContext`opticsGraphics]]; {$CellContext`osurfs, \
$CellContext`omeds} = If[$CellContext`sus, 
            $CellContext`removeUselessSurfaces[
             $CellContext`opti[$CellContext`surfaces], 
             $CellContext`opti[$CellContext`mediums]], {
             $CellContext`opti[$CellContext`surfaces], 
             $CellContext`opti[$CellContext`mediums]}]; $CellContext`cnt = 
          Length[$CellContext`osurfs] + If[
             And[
              ReplaceAll[
               ReplaceAll[$CellContext`removeLast, {$CellContext`opt}], 
               Options[$CellContext`opticsGraphics]], 
              Not[$CellContext`sus]], -1, 0]; $CellContext`surs = 
          Take[$CellContext`osurfs, $CellContext`cnt]; $CellContext`bulks = \
$CellContext`neighbouringPair[$CellContext`surs]; $CellContext`meds = 
          Append[$CellContext`omeds, $CellContext`atmosphere]; \
$CellContext`mbet = Take[
            Rest[$CellContext`meds], $CellContext`cnt - 
            1]; $CellContext`mpair = Take[
            $CellContext`neighbouringPair[$CellContext`meds], \
$CellContext`cnt]; Show[
           Thread[
            $CellContext`lensGraphics[$CellContext`bulks, $CellContext`mbet]], 
           Thread[
            $CellContext`singleSurfaceGraphics[$CellContext`surs, \
$CellContext`mpair]]]], 
       Options[$CellContext`opticsGraphics] = {$CellContext`removeLast -> 
         False, $CellContext`hideUselessSurface -> 
         True}, $CellContext`removeUselessSurfaces[
         Pattern[$CellContext`surfs, 
          Blank[]], 
         Pattern[$CellContext`meds, 
          Blank[]]] := 
       With[{$CellContext`poss = $CellContext`positionToDifferent[
            $CellContext`neighbouringPair[$CellContext`meds]]}, {
          Extract[$CellContext`surfs, $CellContext`poss], 
          
          Extract[$CellContext`meds, $CellContext`poss]}], \
$CellContext`positionToDifferent[
         Pattern[$CellContext`l, 
          Blank[List]]] := Position[$CellContext`l, 
         PatternTest[
          Blank[], Part[#, 1] =!= Part[#, 2]& ], 1, Heads -> 
         False], $CellContext`neighbouringPair[
         Pattern[$CellContext`l, 
          Blank[List]]] := Most[
         Transpose[{$CellContext`l, 
           
           RotateLeft[$CellContext`l]}]], $CellContext`mpair = \
{{$CellContext`atmosphere, $CellContext`n$bk7}, {$CellContext`n$bk7, \
$CellContext`atmosphere}}, $CellContext`lensGraphics[{
          PatternTest[
           Pattern[$CellContext`s1, 
            Blank[]], $CellContext`surfaceQ], 
          PatternTest[
           Pattern[$CellContext`s2, 
            
            Blank[]], $CellContext`surfaceQ]}, $CellContext`atmosphere] := \
{}, $CellContext`lensGraphics[{
          PatternTest[
           Pattern[$CellContext`s1, 
            Blank[]], $CellContext`surfaceQ], 
          PatternTest[
           Pattern[$CellContext`s2, 
            Blank[]], $CellContext`surfaceQ]}, 
         Blank[]] := $CellContext`bulkLensGraphics[$CellContext`s1, \
$CellContext`s2], $CellContext`bulkLensGraphics[
         PatternTest[
          Pattern[$CellContext`s1, 
           Blank[]], $CellContext`surfaceQ], 
         PatternTest[
          Pattern[$CellContext`s2, 
           Blank[]], $CellContext`surfaceQ]] := Show[
         Graphics[
          Join[$CellContext`lineStyles, {
            $CellContext`edgeConnectingLines[$CellContext`s1, \
$CellContext`s2]}]], 
         $CellContext`surfaceGraphics[$CellContext`s1], 
         $CellContext`surfaceGraphics[$CellContext`s2]], \
$CellContext`lineStyles = {
         CapForm["Round"], 
         JoinForm["Round"], 
         GrayLevel[0], 
         AbsoluteThickness[1.6]}, $CellContext`edgeConnectingLines[
         Pattern[$CellContext`s1, 
          Blank[]], 
         Pattern[$CellContext`s2, 
          Blank[]]] := 
       Module[{$CellContext`p1, $CellContext`p2}, $CellContext`p1 = \
$CellContext`marginalPosition[$CellContext`s1]; $CellContext`p2 = \
$CellContext`marginalPosition[$CellContext`s2]; {
           $CellContext`edgeLine[
            Part[$CellContext`p1, 1], 
            Part[$CellContext`p2, 1]], 
           $CellContext`edgeLine[
            Part[$CellContext`p1, 2], 
            Part[$CellContext`p2, 2]]}], $CellContext`edgeLine[
         Pattern[$CellContext`p1, {
           Blank[], 
           Blank[]}], 
         Pattern[$CellContext`p2, {
           Blank[], 
           Blank[]}]] := Line[{$CellContext`p1, 
          $CellContext`cornerPostion[$CellContext`p1, $CellContext`p2], \
$CellContext`p2}], $CellContext`cornerPostion[{
          Pattern[$CellContext`x1, 
           Blank[]], 
          Pattern[$CellContext`y1, 
           Blank[]]}, {
          Pattern[$CellContext`x2, 
           Blank[]], 
          Pattern[$CellContext`y2, 
           Blank[]]}] := 
       Condition[{$CellContext`x2, $CellContext`y1}, Abs[$CellContext`y1] >= 
         Abs[$CellContext`y2]], $CellContext`cornerPostion[{
          Pattern[$CellContext`x1, 
           Blank[]], 
          Pattern[$CellContext`y1, 
           Blank[]]}, {
          Pattern[$CellContext`x2, 
           Blank[]], 
          Pattern[$CellContext`y2, 
           Blank[]]}] := 
       Condition[{$CellContext`x1, $CellContext`y2}, Abs[$CellContext`y1] < 
         Abs[$CellContext`y2]], $CellContext`surfaceGraphics[
         PatternTest[
          Pattern[$CellContext`s, 
           Blank[]], $CellContext`surfaceQ]] := 
       Module[{$CellContext`h, $CellContext`isec}, $CellContext`isec = 
          Interval[
            $CellContext`domain[
             $CellContext`s[$CellContext`shape]]]; ParametricPlot[
           Evaluate[$CellContext`shapeFunctionToDraw[
              $CellContext`s[$CellContext`shape]][$CellContext`h] + Reverse[
              $CellContext`s[$CellContext`origin]]], 
           Evaluate[
            Flatten[
             Join[{$CellContext`h}, 
              MinMax[$CellContext`isec]]]], 
           PlotStyle :> $CellContext`lineStyles]], \
$CellContext`surfaceGraphics[
         PatternTest[
          Pattern[$CellContext`s, 
           Blank[]], $CellContext`surfaceQ], 
         Pattern[$CellContext`dom, {
           Blank[], 
           Blank[]}]] := 
       Module[{$CellContext`h, $CellContext`isec}, $CellContext`isec = 
          IntervalIntersection[
            Interval[$CellContext`dom], 
            Interval[
             $CellContext`domain[
              $CellContext`s[$CellContext`shape]]]]; ParametricPlot[
           Evaluate[$CellContext`shapeFunctionToDraw[
              $CellContext`s[$CellContext`shape]][$CellContext`h] + Reverse[
              $CellContext`s[$CellContext`origin]]], 
           Evaluate[
            Flatten[
             Join[{$CellContext`h}, 
              MinMax[$CellContext`isec]]]], 
           PlotStyle :> $CellContext`lineStyles]], \
$CellContext`surfaceGraphics[
         PatternTest[
          Pattern[$CellContext`s, 
           Blank[]], $CellContext`surfaceQ], 
         BlankNullSequence[]] := Condition[
         Graphics[], 
         $CellContext`hiddenQ[$CellContext`s]], \
$CellContext`singleSurfaceGraphics[
         PatternTest[
          Pattern[$CellContext`s, 
           
           Blank[]], $CellContext`surfaceQ], {$CellContext`atmosphere, \
$CellContext`atmosphere}] := $CellContext`surfaceGraphics[$CellContext`s], \
$CellContext`singleSurfaceGraphics[
         PatternTest[
          Pattern[$CellContext`s, 
           Blank[]], $CellContext`surfaceQ], {
          Blank[], 
          Blank[]}] := {}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->190746835,ExpressionUUID->"145468c3-7467-4d7c-bed7-502158105c63"]
}, Open  ]],

Cell[TextData[{
 "Snapshots",
 Cell[BoxData[
  TemplateBox[{"Snapshots", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
        TextData[{"To create snapshots, paste the output cell from the ", 
          StyleBox["Manipulate", "MRbig"], 
          " section in this section at least three times, and adjust the \
controls of each copy to show a range of interesting settings. Do not convert \
the screenshots to bitmaps. Optional captions for the screenshots may be \
included in the Details section.", 
          StyleBox["\n", FontSize -> 4]}], "MoreInfoText"], Background -> 
       GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
       RoundingRadius -> 5]], "MoreInfoText", Deletable -> True, 
     CellTags -> {"SectionMoreInfoDefinition"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "d854de0f-efbb-449a-8b04-a7b3ca5773d5"]
}], "SnapshotsSection",
 CellTags->"Snapshots",ExpressionUUID->"96bb7a68-4496-4362-86d3-c2a0812907f2"],

Cell[CellGroupData[{

Cell[TextData[{
 "Details",
 StyleBox[" (optional) ", "SectionGloss"],
 Cell[BoxData[
  TemplateBox[{"Details", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
        TextData[{
         "This optional section is for a more detailed description of the \
Demonstration than the caption, but it should still be as concise as \
possible. This section may also include numbered snapshot captions (e.g., \
Snapshot 1: phrase or sentence without an initial capital and without a \
period, unless more than one sentence is used) and explanations of the ", 
          StyleBox["Manipulate", "MRbig"], 
          " control labels. Define any symbols undefined so far. Include only \
text in this section \[LongDash] no code, graphics, etc. Do not change the \
cell style or copy cells from other sections. \n\nA book reference uses this \
format: \n    L. D. Schmidt, ", 
          StyleBox[
          "The Engineering of Chemical Reactions", FontSlant -> "Italic"], 
          ", New York: Oxford University Press, 1998. \n\nAn article \
reference uses this format: \n    D. Pearson, \"A Polynomial-Time Algorithm \
for the Change-Making Problem,\" ", 
          StyleBox["Operations Research Letters", FontSlant -> "Italic"], 
          ", ", 
          StyleBox["33", FontWeight -> "Bold"], 
          "(3), 2005 pp. 231\[Dash]234."}], "MoreInfoText"], Background -> 
       GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
       RoundingRadius -> 5]], "MoreInfoText", Deletable -> True, 
     CellTags -> {"SectionMoreInfoDefinition"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "b42cafa3-93cc-45b2-9bce-00512b05ae14"]
}], "DetailsSection",
 CellTags->"Details",ExpressionUUID->"b9971572-9357-4ce2-a011-62ff9eede7fa"],

Cell["\<\
The surface shapes of both sides are fixed by numerically solving the \
Wassermann-Wolf equation. The focal length always normalized to 1.0.  You can \
specify some parameters, numerical aperture, lens thickness, CSF (Coddington \
Shape Factor that represents lens bending), wavelength and glass medium \
(extracted from SCHOTT catalog). Some sets of the parameters can not reach \
solutions with specified N.A. For these cases, this notebook shows maximum \
N.A. under the specified paraxial conditions.\
\>", "DetailNotes",
 CellChangeTimes->{3.82329153033799*^9},
 CellID->1986929129,ExpressionUUID->"1e20170b-6fe4-40dc-a374-ea331b3e0ed8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Control Suggestions",
 StyleBox[" (optional) ", "SectionGloss"],
 Cell[BoxData[
  TemplateBox[{"Control Suggestions", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
        TextData[{
         "Check the boxes beside items that are appropriate control \
suggestions for this Demonstration. For more information, see the ", 
          ButtonBox[
          "guidelines", 
           BaseStyle -> {"Hyperlink", FontColor -> RGBColor[0.4, 0.45, 0.5]}, 
           ButtonData -> {
             URL["http://demonstrations.wolfram.com/guidelines.php"], None}], 
          " page.", 
          StyleBox["\n", FontSize -> 4]}], "MoreInfoText"], Background -> 
       GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
       RoundingRadius -> 5]], "MoreInfoText", Deletable -> True, 
     CellTags -> {"SectionMoreInfoDefinition"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "f1fe398c-f37e-4aca-9161-633bae63965a"]
}], "ControlSuggestionsSection",
 CellTags->
  "Control Suggestions",ExpressionUUID->"af8a4061-fdd4-44d0-82cc-\
9fec786547ab"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[
   " Resize Images",ExpressionUUID->"fcee1195-e255-4dbd-8863-4af840debdbd"]}],
  
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\""]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->
  "ResizeImages",ExpressionUUID->"ac542041-3d26-42bf-920d-b54a74785eef"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[
   " Rotate and Zoom in 3D",ExpressionUUID->
    "df0b52c8-7325-4803-bb1e-958545cedfd1"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" on Mac) and drag up and down to zoom.\""}]]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->
  "RotateAndZoomIn3D",ExpressionUUID->"e14e98ed-7514-4081-99ea-c2ffb624df9b"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[
   " Drag Locators",ExpressionUUID->"61b2b2a8-69c4-4012-b6da-8923112012e2"]}],
  
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}]]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->
  "DragLocators",ExpressionUUID->"384b79dc-c11a-492d-87e1-2c4b84403891"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[
   " Create and Delete Locators",ExpressionUUID->
    "8e06b60e-3149-4a23-ab31-0a8ab2f5ceaf"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}]]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->
  "CreateAndDeleteLocators",ExpressionUUID->"98a81657-e34e-4dab-ac86-\
717d7eff050a"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[
   " Slider Zoom",ExpressionUUID->"c8d377e3-56fc-4adc-88e3-cf7642fb3181"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" to make ever finer adjustments.\""}]]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->
  "SliderZoom",ExpressionUUID->"b84ac2ce-e422-4d4d-953e-073d63c15a9e"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[
   " Gamepad Controls",ExpressionUUID->
    "1fbb5ded-9a1c-4ba0-a087-0d1c0be219ce"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\""]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.3895522232313623`*^9},
 FontFamily->"Verdana",
 CellTags->
  "GamepadControls",ExpressionUUID->"b4dbde82-29d9-4853-88cd-e053ae8d181c"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[
   " Automatic Animation",ExpressionUUID->
    "ec8a5240-77b9-42a0-8b9e-365efb47dfeb"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}]]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->
  "AutomaticAnimation",ExpressionUUID->"6e84bbe0-7d8e-44ab-aac1-048973c18d4f"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[
   " Bookmark Animation",ExpressionUUID->
    "5bdb2812-7da3-4bb1-a7fc-436054c40542"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}]]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->
  "BookmarkAnimation",ExpressionUUID->"0cf5a50d-6c0e-4089-a29f-941bc4ca8891"]
}, Open  ]],

Cell[TextData[{
 "Search Terms",
 StyleBox[" (optional) ", "SectionGloss"],
 Cell[BoxData[
  TemplateBox[{"Search Terms", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
        TextData[{
         "Provide words and phrases that people might search for, with each \
one in a separate cell. Categories are added after the Demonstration is \
submitted, so the best things to enter here are terms (including any \
synonyms) that refer to specific parts of the Demonstration. Do not \
capitalize words unless they are proper names or proper adjectives.", 
          StyleBox["\n", FontSize -> 4]}], "MoreInfoText"], Background -> 
       GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
       RoundingRadius -> 5]], "MoreInfoText", Deletable -> True, 
     CellTags -> {"SectionMoreInfoDefinition"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "b8b4550c-a7c1-4c5e-acf4-64f68ac8ea51"]
}], "SearchTermsSection",
 CellTags->
  "Search Terms",ExpressionUUID->"a3a3a6a7-7876-4115-a51a-6d092bee139b"],

Cell[TextData[{
 "Related Links",
 StyleBox[" (optional) ", "SectionGloss"],
 Cell[BoxData[
  TemplateBox[{"Related Links", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
        TextData[{
         "Provide hyperlinks (not just bare URLs) to any relevant wolfram.com \
pages, with the page title as the linked text. Links to ", 
          ButtonBox[
          "NKS | Online", 
           BaseStyle -> {"Hyperlink", FontColor -> RGBColor[0.4, 0.45, 0.5]}, 
           ButtonData -> {
             URL["http://www.wolframscience.com/nks"], None}], 
          " should use the section title, not a page number. Links to \
non-Wolfram sites go in the Details section.", 
          StyleBox["\n", FontSize -> 4]}], "MoreInfoText"], Background -> 
       GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
       RoundingRadius -> 5]], "MoreInfoText", Deletable -> True, 
     CellTags -> {"SectionMoreInfoDefinition"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "d5b26c0d-c135-41cd-9d97-dc9003b05c57"]
}], "RelatedLinksSection",
 CellTags->
  "Related Links",ExpressionUUID->"83b0243b-b7e3-4afb-8a4e-185fec8161fe"],

Cell[CellGroupData[{

Cell[TextData[{
 "Authoring Information",
 Cell[BoxData[
  TemplateBox[{"Authoring Information", 
    Cell[
     BoxData[
      FrameBox[
       Cell[
        TextData[{
         "'Contributed by: John Smith' for single authors; 'Contributed by: \
John Smith, Robert Ford, and Jane Doe' for multiple authors. To credit people \
other than Demonstrations authors, please see the detailed ", 
          ButtonBox[
          "guidelines", 
           BaseStyle -> {"Hyperlink", FontColor -> RGBColor[0.4, 0.45, 0.5]}, 
           ButtonData -> {
             URL["http://demonstrations.wolfram.com/guidelines.php"], None}], 
          ".", 
          StyleBox["\n", FontSize -> 4]}], "MoreInfoText"], Background -> 
       GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
       RoundingRadius -> 5]], "MoreInfoText", Deletable -> True, 
     CellTags -> {"SectionMoreInfoDefinition"}, 
     CellMargins -> {{66, 66}, {15, 15}}]},
   "MoreInfoOpenerButtonTemplate"]],ExpressionUUID->
  "990970f3-a922-4bea-919a-d6fa2da1f6d5"]
}], "AuthorSection",
 CellTags->
  "Authoring \
Information",ExpressionUUID->"c2736cdb-c24c-4dd4-9a22-5bbef1a7a20a"],

Cell["Contributed by: Takatoshi Yamada @AYASE Co.,Ltd.", "Author",
 CellChangeTimes->{
  3.35696210375764*^9, {3.432333043774981*^9, 3.432333045441087*^9}, {
   3.823286774351448*^9, 3.823286783881792*^9}, {3.853965416456547*^9, 
   3.853965418233911*^9}, {3.8541451693542624`*^9, 
   3.8541451703750143`*^9}},ExpressionUUID->"e6a077c9-f528-4852-97e7-\
764f2f3a1895"]
}, Open  ]]
}, Open  ]]
},
ScreenStyleEnvironment->"DemonstrationSource",
WindowSize->{875, 966},
WindowMargins->{{277, Automatic}, {Automatic, 28}},
TaggingRules->{
 "DocuToolsSettingsInternal" -> {
   "$PacletVersion" -> "0.10.2121", "$MVersion" -> "12", "$FlaggedVersion" -> 
    11.3, "$ApplicationName" -> "Pubs", "$LinkBase" -> "Pubs", 
    "$ApplicationDirectory" -> "C:\\Users\\jayw\\Desktop\\CVSTree\\Pubs\\", 
    "$DocumentationDirectory" -> 
    "C:\\Users\\jayw\\Desktop\\CVSTree\\Pubs\\Documentation\\English\\", 
    "$UseNewPageDialog" -> "False", "$CondensedBlogMenus" -> "True"}, 
  "PresenterSettings" -> {
   "OutlineThumbnails" -> {"1" -> "Thumbnail"}, 
    "OutlinePalette" -> {"Thumbnails" -> {}, "ThumbnailMagnification" -> 0.8},
     "SideNotesPalette" -> {"PaletteNumber" -> 0}}, "BlogsDirectory" -> 
  "\\\\wrisync02.wri.wolfram.com\\backup$\\jayw\\My \
Documents\\jaywstasks\\BlogTools\\Blogs\\", "ChatNotebookID" -> 
  "fef9786d-4748-42a0-a328-5496e837f205", "Originator" -> 
  "chatframework@wolfram.com", "ScreenName" -> "", "ChatCreationDate" -> 
  "DateObject[{2018, 6, 18, 13, 5, 54.5673134}, Instant, Gregorian, -5.]", 
  "CustomWindowTitle" -> "None", "ChatNotebookDate" -> "18 Jun 2018 13:05:54",
   "ChatNotebookWindowTitle" -> "chatframework's Chat - (18 Jun 2018 13:05)", 
  "Participants" -> {"chatframework@wolfram.com", "wan4ren2jie2@gmail.com"}, 
  "AllParticipants" -> {
   "chatframework@wolfram.com", "wan4ren2jie2@gmail.com"}, 
  "Contacts" -> {
   "andre@wolfram.com", "bradym@wolfram.com", "brianv@wolfram.com", 
    "jayw@wolfram.com", "wan4ren2jie2@gmail.com"}, 
  "EmailListData" -> {0, 0, 0, 0, 1}, "ScrollLock" -> False, "Terminated" -> 
  True, "QuestionState" -> "Timeup", 
  "AttachedCells" -> {
   "Initialization Code" -> None, "Manipulate" -> None, "Caption" -> None, 
    "Snapshots" -> CellObject[26321], "Details" -> None, "Related Links" -> 
    None, "Search Terms" -> None, "Control Suggestions" -> None, "Thumbnail" -> 
    None, "Authoring Information" -> None}},
FrontEndVersion->"13.0 for Mac OS X x86 (64-bit) \
(2021\:5e7412\:67082\:65e5)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "UTF-8"],
ExpressionUUID->"fc218b87-1837-4198-a7bd-ae5dcd9d6e24"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Initialization Code"->{
  Cell[885, 30, 1861, 40, 68, "InitializationSection",ExpressionUUID->"1d34a731-8c48-4189-8b6f-89ef5777db9f",
   InitializationCell->False,
   CellTags->"Initialization Code"]},
 "Manipulate"->{
  Cell[442872, 11405, 1524, 30, 68, "ManipulateSection",ExpressionUUID->"b7acceb9-ca4b-4965-b319-bd8a6214a587",
   CellTags->"Manipulate"]},
 "Caption"->{
  Cell[704734, 16907, 1138, 24, 68, "ManipulateCaptionSection",ExpressionUUID->"3ed78bfd-4459-4d2a-906f-3e9e6aba33a4",
   CellTags->"Caption"]},
 "Thumbnail"->{
  Cell[706834, 16953, 1016, 23, 68, "ThumbnailSection",ExpressionUUID->"401cc3c4-8319-4e19-82e7-df5fcb711a42",
   CellTags->"Thumbnail"]},
 "Snapshots"->{
  Cell[937600, 21798, 1018, 22, 68, "SnapshotsSection",ExpressionUUID->"96bb7a68-4496-4362-86d3-c2a0812907f2",
   CellTags->"Snapshots"]},
 "Details"->{
  Cell[938643, 21824, 1796, 36, 68, "DetailsSection",ExpressionUUID->"b9971572-9357-4ce2-a011-62ff9eede7fa",
   CellTags->"Details"]},
 "Control Suggestions"->{
  Cell[941131, 21877, 1131, 28, 68, "ControlSuggestionsSection",ExpressionUUID->"af8a4061-fdd4-44d0-82cc-9fec786547ab",
   CellTags->"Control Suggestions"]},
 "ResizeImages"->{
  Cell[942265, 21907, 410, 10, 28, "ControlSuggestions",ExpressionUUID->"ac542041-3d26-42bf-920d-b54a74785eef",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[942678, 21919, 783, 19, 28, "ControlSuggestions",ExpressionUUID->"e14e98ed-7514-4081-99ea-c2ffb624df9b",
   CellTags->"RotateAndZoomIn3D"]},
 "DragLocators"->{
  Cell[943464, 21940, 438, 13, 28, "ControlSuggestions",ExpressionUUID->"384b79dc-c11a-492d-87e1-2c4b84403891",
   CellTags->"DragLocators"]},
 "CreateAndDeleteLocators"->{
  Cell[943905, 21955, 739, 18, 28, "ControlSuggestions",ExpressionUUID->"98a81657-e34e-4dab-ac86-717d7eff050a",
   CellTags->"CreateAndDeleteLocators"]},
 "SliderZoom"->{
  Cell[944647, 21975, 944, 23, 28, "ControlSuggestions",ExpressionUUID->"b84ac2ce-e422-4d4d-953e-073d63c15a9e",
   CellTags->"SliderZoom"]},
 "GamepadControls"->{
  Cell[945594, 22000, 469, 11, 28, "ControlSuggestions",ExpressionUUID->"b4dbde82-29d9-4853-88cd-e053ae8d181c",
   CellTags->"GamepadControls"]},
 "AutomaticAnimation"->{
  Cell[946066, 22013, 1564, 33, 28, "ControlSuggestions",ExpressionUUID->"6e84bbe0-7d8e-44ab-aac1-048973c18d4f",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[947633, 22048, 1008, 23, 28, "ControlSuggestions",ExpressionUUID->"0cf5a50d-6c0e-4089-a29f-941bc4ca8891",
   CellTags->"BookmarkAnimation"]},
 "Search Terms"->{
  Cell[948656, 22074, 1073, 24, 68, "SearchTermsSection",ExpressionUUID->"a3a3a6a7-7876-4115-a51a-6d092bee139b",
   CellTags->"Search Terms"]},
 "Related Links"->{
  Cell[949732, 22100, 1191, 28, 68, "RelatedLinksSection",ExpressionUUID->"83b0243b-b7e3-4afb-8a4e-185fec8161fe",
   CellTags->"Related Links"]},
 "Authoring Information"->{
  Cell[950948, 22132, 1158, 28, 68, "AuthorSection",ExpressionUUID->"c2736cdb-c24c-4dd4-9a22-5bbef1a7a20a",
   CellTags->"Authoring Information"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Initialization Code", 954874, 22218},
 {"Manipulate", 955069, 22222},
 {"Caption", 955224, 22225},
 {"Thumbnail", 955385, 22228},
 {"Snapshots", 955540, 22231},
 {"Details", 955693, 22234},
 {"Control Suggestions", 955854, 22237},
 {"ResizeImages", 956031, 22240},
 {"RotateAndZoomIn3D", 956198, 22243},
 {"DragLocators", 956365, 22246},
 {"CreateAndDeleteLocators", 956538, 22249},
 {"SliderZoom", 956709, 22252},
 {"GamepadControls", 956872, 22255},
 {"AutomaticAnimation", 957043, 22258},
 {"BookmarkAnimation", 957217, 22261},
 {"Search Terms", 957385, 22264},
 {"Related Links", 957549, 22267},
 {"Authoring Information", 957723, 22270}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 280, 4, 98, "Title",ExpressionUUID->"b9e6fe14-67c5-4f7d-9ec0-13c361826e91"],
Cell[CellGroupData[{
Cell[885, 30, 1861, 40, 68, "InitializationSection",ExpressionUUID->"1d34a731-8c48-4189-8b6f-89ef5777db9f",
 InitializationCell->False,
 CellTags->"Initialization Code"],
Cell[2749, 72, 440086, 11328, 40365, "Input",ExpressionUUID->"1d643925-280d-4678-bc58-4ccd4eb56561",
 CellID->2066746197]
}, Closed]],
Cell[CellGroupData[{
Cell[442872, 11405, 1524, 30, 68, "ManipulateSection",ExpressionUUID->"b7acceb9-ca4b-4965-b319-bd8a6214a587",
 CellTags->"Manipulate"],
Cell[CellGroupData[{
Cell[444421, 11439, 12599, 291, 636, "Input",ExpressionUUID->"1c8a51fe-61b3-446f-b3f3-b27c622b6763"],
Cell[457023, 11732, 247665, 5169, 480, "Output",ExpressionUUID->"6c6c93ff-cf83-4c1d-beb3-e30e5d47d61a",
 CellID->1990220094]
}, {2}]]
}, Open  ]],
Cell[CellGroupData[{
Cell[704734, 16907, 1138, 24, 68, "ManipulateCaptionSection",ExpressionUUID->"3ed78bfd-4459-4d2a-906f-3e9e6aba33a4",
 CellTags->"Caption"],
Cell[705875, 16933, 922, 15, 39, "ManipulateCaption",ExpressionUUID->"71921e4e-c8c2-4f05-96e3-4e3047349e9a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[706834, 16953, 1016, 23, 68, "ThumbnailSection",ExpressionUUID->"401cc3c4-8319-4e19-82e7-df5fcb711a42",
 CellTags->"Thumbnail"],
Cell[707853, 16978, 229732, 4817, 464, "Output",ExpressionUUID->"145468c3-7467-4d7c-bed7-502158105c63",
 CellID->190746835]
}, Open  ]],
Cell[937600, 21798, 1018, 22, 68, "SnapshotsSection",ExpressionUUID->"96bb7a68-4496-4362-86d3-c2a0812907f2",
 CellTags->"Snapshots"],
Cell[CellGroupData[{
Cell[938643, 21824, 1796, 36, 68, "DetailsSection",ExpressionUUID->"b9971572-9357-4ce2-a011-62ff9eede7fa",
 CellTags->"Details"],
Cell[940442, 21862, 652, 10, 71, "DetailNotes",ExpressionUUID->"1e20170b-6fe4-40dc-a374-ea331b3e0ed8",
 CellID->1986929129]
}, Open  ]],
Cell[CellGroupData[{
Cell[941131, 21877, 1131, 28, 68, "ControlSuggestionsSection",ExpressionUUID->"af8a4061-fdd4-44d0-82cc-9fec786547ab",
 CellTags->"Control Suggestions"],
Cell[942265, 21907, 410, 10, 28, "ControlSuggestions",ExpressionUUID->"ac542041-3d26-42bf-920d-b54a74785eef",
 CellTags->"ResizeImages"],
Cell[942678, 21919, 783, 19, 28, "ControlSuggestions",ExpressionUUID->"e14e98ed-7514-4081-99ea-c2ffb624df9b",
 CellTags->"RotateAndZoomIn3D"],
Cell[943464, 21940, 438, 13, 28, "ControlSuggestions",ExpressionUUID->"384b79dc-c11a-492d-87e1-2c4b84403891",
 CellTags->"DragLocators"],
Cell[943905, 21955, 739, 18, 28, "ControlSuggestions",ExpressionUUID->"98a81657-e34e-4dab-ac86-717d7eff050a",
 CellTags->"CreateAndDeleteLocators"],
Cell[944647, 21975, 944, 23, 28, "ControlSuggestions",ExpressionUUID->"b84ac2ce-e422-4d4d-953e-073d63c15a9e",
 CellTags->"SliderZoom"],
Cell[945594, 22000, 469, 11, 28, "ControlSuggestions",ExpressionUUID->"b4dbde82-29d9-4853-88cd-e053ae8d181c",
 CellTags->"GamepadControls"],
Cell[946066, 22013, 1564, 33, 28, "ControlSuggestions",ExpressionUUID->"6e84bbe0-7d8e-44ab-aac1-048973c18d4f",
 CellTags->"AutomaticAnimation"],
Cell[947633, 22048, 1008, 23, 28, "ControlSuggestions",ExpressionUUID->"0cf5a50d-6c0e-4089-a29f-941bc4ca8891",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[948656, 22074, 1073, 24, 68, "SearchTermsSection",ExpressionUUID->"a3a3a6a7-7876-4115-a51a-6d092bee139b",
 CellTags->"Search Terms"],
Cell[949732, 22100, 1191, 28, 68, "RelatedLinksSection",ExpressionUUID->"83b0243b-b7e3-4afb-8a4e-185fec8161fe",
 CellTags->"Related Links"],
Cell[CellGroupData[{
Cell[950948, 22132, 1158, 28, 68, "AuthorSection",ExpressionUUID->"c2736cdb-c24c-4dd4-9a22-5bbef1a7a20a",
 CellTags->"Authoring Information"],
Cell[952109, 22162, 367, 6, 23, "Author",ExpressionUUID->"e6a077c9-f528-4852-97e7-764f2f3a1895"]
}, Open  ]]
}, Open  ]]
}
]
*)

